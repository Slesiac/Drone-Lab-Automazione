
DRONE_radiocomando_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e3f4  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0810e698  0810e698  0001e698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810ec98  0810ec98  0001ec98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810eca0  0810eca0  0001eca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810eca4  0810eca4  0001eca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000248  10000000  0810eca8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000046c  10000248  0810eef0  00020248  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  100006b4  0810eef0  000206b4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001a089  00000000  00000000  000202bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000031e7  00000000  00000000  0003a344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001598  00000000  00000000  0003d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001106  00000000  00000000  0003eac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003b9c1  00000000  00000000  0003fbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001cf75  00000000  00000000  0007b58f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00186050  00000000  00000000  00098504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007228  00000000  00000000  0021e554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  0022577c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000248 	.word	0x10000248
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810e67c 	.word	0x0810e67c

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000024c 	.word	0x1000024c
 81002dc:	0810e67c 	.word	0x0810e67c

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a6 	b.w	81010fc <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9e08      	ldr	r6, [sp, #32]
 8100e3a:	460d      	mov	r5, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	460f      	mov	r7, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4694      	mov	ip, r2
 8100e48:	d965      	bls.n	8100f16 <__udivmoddi4+0xe2>
 8100e4a:	fab2 f382 	clz	r3, r2
 8100e4e:	b143      	cbz	r3, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8100e54:	f1c3 0220 	rsb	r2, r3, #32
 8100e58:	409f      	lsls	r7, r3
 8100e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8100e5e:	4317      	orrs	r7, r2
 8100e60:	409c      	lsls	r4, r3
 8100e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100e66:	fa1f f58c 	uxth.w	r5, ip
 8100e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100e6e:	0c22      	lsrs	r2, r4, #16
 8100e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8100e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100e78:	fb01 f005 	mul.w	r0, r1, r5
 8100e7c:	4290      	cmp	r0, r2
 8100e7e:	d90a      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e80:	eb1c 0202 	adds.w	r2, ip, r2
 8100e84:	f101 37ff 	add.w	r7, r1, #4294967295
 8100e88:	f080 811c 	bcs.w	81010c4 <__udivmoddi4+0x290>
 8100e8c:	4290      	cmp	r0, r2
 8100e8e:	f240 8119 	bls.w	81010c4 <__udivmoddi4+0x290>
 8100e92:	3902      	subs	r1, #2
 8100e94:	4462      	add	r2, ip
 8100e96:	1a12      	subs	r2, r2, r0
 8100e98:	b2a4      	uxth	r4, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100ea6:	fb00 f505 	mul.w	r5, r0, r5
 8100eaa:	42a5      	cmp	r5, r4
 8100eac:	d90a      	bls.n	8100ec4 <__udivmoddi4+0x90>
 8100eae:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8100eb6:	f080 8107 	bcs.w	81010c8 <__udivmoddi4+0x294>
 8100eba:	42a5      	cmp	r5, r4
 8100ebc:	f240 8104 	bls.w	81010c8 <__udivmoddi4+0x294>
 8100ec0:	4464      	add	r4, ip
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11e      	cbz	r6, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40dc      	lsrs	r4, r3
 8100ed0:	2300      	movs	r3, #0
 8100ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0xbc>
 8100ede:	2e00      	cmp	r6, #0
 8100ee0:	f000 80ed 	beq.w	81010be <__udivmoddi4+0x28a>
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8100eea:	4608      	mov	r0, r1
 8100eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef0:	fab3 f183 	clz	r1, r3
 8100ef4:	2900      	cmp	r1, #0
 8100ef6:	d149      	bne.n	8100f8c <__udivmoddi4+0x158>
 8100ef8:	42ab      	cmp	r3, r5
 8100efa:	d302      	bcc.n	8100f02 <__udivmoddi4+0xce>
 8100efc:	4282      	cmp	r2, r0
 8100efe:	f200 80f8 	bhi.w	81010f2 <__udivmoddi4+0x2be>
 8100f02:	1a84      	subs	r4, r0, r2
 8100f04:	eb65 0203 	sbc.w	r2, r5, r3
 8100f08:	2001      	movs	r0, #1
 8100f0a:	4617      	mov	r7, r2
 8100f0c:	2e00      	cmp	r6, #0
 8100f0e:	d0e2      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	e9c6 4700 	strd	r4, r7, [r6]
 8100f14:	e7df      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f16:	b902      	cbnz	r2, 8100f1a <__udivmoddi4+0xe6>
 8100f18:	deff      	udf	#255	; 0xff
 8100f1a:	fab2 f382 	clz	r3, r2
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	f040 8090 	bne.w	8101044 <__udivmoddi4+0x210>
 8100f24:	1a8a      	subs	r2, r1, r2
 8100f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f2a:	fa1f fe8c 	uxth.w	lr, ip
 8100f2e:	2101      	movs	r1, #1
 8100f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8100f34:	fb07 2015 	mls	r0, r7, r5, r2
 8100f38:	0c22      	lsrs	r2, r4, #16
 8100f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100f3e:	fb0e f005 	mul.w	r0, lr, r5
 8100f42:	4290      	cmp	r0, r2
 8100f44:	d908      	bls.n	8100f58 <__udivmoddi4+0x124>
 8100f46:	eb1c 0202 	adds.w	r2, ip, r2
 8100f4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8100f4e:	d202      	bcs.n	8100f56 <__udivmoddi4+0x122>
 8100f50:	4290      	cmp	r0, r2
 8100f52:	f200 80cb 	bhi.w	81010ec <__udivmoddi4+0x2b8>
 8100f56:	4645      	mov	r5, r8
 8100f58:	1a12      	subs	r2, r2, r0
 8100f5a:	b2a4      	uxth	r4, r4
 8100f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100f60:	fb07 2210 	mls	r2, r7, r0, r2
 8100f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100f68:	fb0e fe00 	mul.w	lr, lr, r0
 8100f6c:	45a6      	cmp	lr, r4
 8100f6e:	d908      	bls.n	8100f82 <__udivmoddi4+0x14e>
 8100f70:	eb1c 0404 	adds.w	r4, ip, r4
 8100f74:	f100 32ff 	add.w	r2, r0, #4294967295
 8100f78:	d202      	bcs.n	8100f80 <__udivmoddi4+0x14c>
 8100f7a:	45a6      	cmp	lr, r4
 8100f7c:	f200 80bb 	bhi.w	81010f6 <__udivmoddi4+0x2c2>
 8100f80:	4610      	mov	r0, r2
 8100f82:	eba4 040e 	sub.w	r4, r4, lr
 8100f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100f8a:	e79f      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f8c:	f1c1 0720 	rsb	r7, r1, #32
 8100f90:	408b      	lsls	r3, r1
 8100f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8100f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8100f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8100fa2:	40fd      	lsrs	r5, r7
 8100fa4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fa8:	4323      	orrs	r3, r4
 8100faa:	fbb5 f8f9 	udiv	r8, r5, r9
 8100fae:	fa1f fe8c 	uxth.w	lr, ip
 8100fb2:	fb09 5518 	mls	r5, r9, r8, r5
 8100fb6:	0c1c      	lsrs	r4, r3, #16
 8100fb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100fbc:	fb08 f50e 	mul.w	r5, r8, lr
 8100fc0:	42a5      	cmp	r5, r4
 8100fc2:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc6:	fa00 f001 	lsl.w	r0, r0, r1
 8100fca:	d90b      	bls.n	8100fe4 <__udivmoddi4+0x1b0>
 8100fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8100fd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fd4:	f080 8088 	bcs.w	81010e8 <__udivmoddi4+0x2b4>
 8100fd8:	42a5      	cmp	r5, r4
 8100fda:	f240 8085 	bls.w	81010e8 <__udivmoddi4+0x2b4>
 8100fde:	f1a8 0802 	sub.w	r8, r8, #2
 8100fe2:	4464      	add	r4, ip
 8100fe4:	1b64      	subs	r4, r4, r5
 8100fe6:	b29d      	uxth	r5, r3
 8100fe8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fec:	fb09 4413 	mls	r4, r9, r3, r4
 8100ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100ff8:	45a6      	cmp	lr, r4
 8100ffa:	d908      	bls.n	810100e <__udivmoddi4+0x1da>
 8100ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8101000:	f103 35ff 	add.w	r5, r3, #4294967295
 8101004:	d26c      	bcs.n	81010e0 <__udivmoddi4+0x2ac>
 8101006:	45a6      	cmp	lr, r4
 8101008:	d96a      	bls.n	81010e0 <__udivmoddi4+0x2ac>
 810100a:	3b02      	subs	r3, #2
 810100c:	4464      	add	r4, ip
 810100e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8101012:	fba3 9502 	umull	r9, r5, r3, r2
 8101016:	eba4 040e 	sub.w	r4, r4, lr
 810101a:	42ac      	cmp	r4, r5
 810101c:	46c8      	mov	r8, r9
 810101e:	46ae      	mov	lr, r5
 8101020:	d356      	bcc.n	81010d0 <__udivmoddi4+0x29c>
 8101022:	d053      	beq.n	81010cc <__udivmoddi4+0x298>
 8101024:	b156      	cbz	r6, 810103c <__udivmoddi4+0x208>
 8101026:	ebb0 0208 	subs.w	r2, r0, r8
 810102a:	eb64 040e 	sbc.w	r4, r4, lr
 810102e:	fa04 f707 	lsl.w	r7, r4, r7
 8101032:	40ca      	lsrs	r2, r1
 8101034:	40cc      	lsrs	r4, r1
 8101036:	4317      	orrs	r7, r2
 8101038:	e9c6 7400 	strd	r7, r4, [r6]
 810103c:	4618      	mov	r0, r3
 810103e:	2100      	movs	r1, #0
 8101040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101044:	f1c3 0120 	rsb	r1, r3, #32
 8101048:	fa02 fc03 	lsl.w	ip, r2, r3
 810104c:	fa20 f201 	lsr.w	r2, r0, r1
 8101050:	fa25 f101 	lsr.w	r1, r5, r1
 8101054:	409d      	lsls	r5, r3
 8101056:	432a      	orrs	r2, r5
 8101058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810105c:	fa1f fe8c 	uxth.w	lr, ip
 8101060:	fbb1 f0f7 	udiv	r0, r1, r7
 8101064:	fb07 1510 	mls	r5, r7, r0, r1
 8101068:	0c11      	lsrs	r1, r2, #16
 810106a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 810106e:	fb00 f50e 	mul.w	r5, r0, lr
 8101072:	428d      	cmp	r5, r1
 8101074:	fa04 f403 	lsl.w	r4, r4, r3
 8101078:	d908      	bls.n	810108c <__udivmoddi4+0x258>
 810107a:	eb1c 0101 	adds.w	r1, ip, r1
 810107e:	f100 38ff 	add.w	r8, r0, #4294967295
 8101082:	d22f      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 8101084:	428d      	cmp	r5, r1
 8101086:	d92d      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 8101088:	3802      	subs	r0, #2
 810108a:	4461      	add	r1, ip
 810108c:	1b49      	subs	r1, r1, r5
 810108e:	b292      	uxth	r2, r2
 8101090:	fbb1 f5f7 	udiv	r5, r1, r7
 8101094:	fb07 1115 	mls	r1, r7, r5, r1
 8101098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810109c:	fb05 f10e 	mul.w	r1, r5, lr
 81010a0:	4291      	cmp	r1, r2
 81010a2:	d908      	bls.n	81010b6 <__udivmoddi4+0x282>
 81010a4:	eb1c 0202 	adds.w	r2, ip, r2
 81010a8:	f105 38ff 	add.w	r8, r5, #4294967295
 81010ac:	d216      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 81010ae:	4291      	cmp	r1, r2
 81010b0:	d914      	bls.n	81010dc <__udivmoddi4+0x2a8>
 81010b2:	3d02      	subs	r5, #2
 81010b4:	4462      	add	r2, ip
 81010b6:	1a52      	subs	r2, r2, r1
 81010b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81010bc:	e738      	b.n	8100f30 <__udivmoddi4+0xfc>
 81010be:	4631      	mov	r1, r6
 81010c0:	4630      	mov	r0, r6
 81010c2:	e708      	b.n	8100ed6 <__udivmoddi4+0xa2>
 81010c4:	4639      	mov	r1, r7
 81010c6:	e6e6      	b.n	8100e96 <__udivmoddi4+0x62>
 81010c8:	4610      	mov	r0, r2
 81010ca:	e6fb      	b.n	8100ec4 <__udivmoddi4+0x90>
 81010cc:	4548      	cmp	r0, r9
 81010ce:	d2a9      	bcs.n	8101024 <__udivmoddi4+0x1f0>
 81010d0:	ebb9 0802 	subs.w	r8, r9, r2
 81010d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 81010d8:	3b01      	subs	r3, #1
 81010da:	e7a3      	b.n	8101024 <__udivmoddi4+0x1f0>
 81010dc:	4645      	mov	r5, r8
 81010de:	e7ea      	b.n	81010b6 <__udivmoddi4+0x282>
 81010e0:	462b      	mov	r3, r5
 81010e2:	e794      	b.n	810100e <__udivmoddi4+0x1da>
 81010e4:	4640      	mov	r0, r8
 81010e6:	e7d1      	b.n	810108c <__udivmoddi4+0x258>
 81010e8:	46d0      	mov	r8, sl
 81010ea:	e77b      	b.n	8100fe4 <__udivmoddi4+0x1b0>
 81010ec:	3d02      	subs	r5, #2
 81010ee:	4462      	add	r2, ip
 81010f0:	e732      	b.n	8100f58 <__udivmoddi4+0x124>
 81010f2:	4608      	mov	r0, r1
 81010f4:	e70a      	b.n	8100f0c <__udivmoddi4+0xd8>
 81010f6:	4464      	add	r4, ip
 81010f8:	3802      	subs	r0, #2
 81010fa:	e742      	b.n	8100f82 <__udivmoddi4+0x14e>

081010fc <__aeabi_idiv0>:
 81010fc:	4770      	bx	lr
 81010fe:	bf00      	nop

08101100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101100:	b480      	push	{r7}
 8101102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101104:	4b09      	ldr	r3, [pc, #36]	; (810112c <SystemInit+0x2c>)
 8101106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810110a:	4a08      	ldr	r2, [pc, #32]	; (810112c <SystemInit+0x2c>)
 810110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101114:	4b05      	ldr	r3, [pc, #20]	; (810112c <SystemInit+0x2c>)
 8101116:	691b      	ldr	r3, [r3, #16]
 8101118:	4a04      	ldr	r2, [pc, #16]	; (810112c <SystemInit+0x2c>)
 810111a:	f043 0310 	orr.w	r3, r3, #16
 810111e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101120:	bf00      	nop
 8101122:	46bd      	mov	sp, r7
 8101124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101128:	4770      	bx	lr
 810112a:	bf00      	nop
 810112c:	e000ed00 	.word	0xe000ed00

08101130 <bno055_assignI2C>:
float eulerScale = 16;       // Scala per l'angolo di Eulero
float quaScale = (1<<14);    // Scala per la lettura della quaternion


void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) //Associa un'interfaccia I2C al driver
{
 8101130:	b480      	push	{r7}
 8101132:	b083      	sub	sp, #12
 8101134:	af00      	add	r7, sp, #0
 8101136:	6078      	str	r0, [r7, #4]
	_bno055_i2c_port = hi2c_device;
 8101138:	4a04      	ldr	r2, [pc, #16]	; (810114c <bno055_assignI2C+0x1c>)
 810113a:	687b      	ldr	r3, [r7, #4]
 810113c:	6013      	str	r3, [r2, #0]
}
 810113e:	bf00      	nop
 8101140:	370c      	adds	r7, #12
 8101142:	46bd      	mov	sp, r7
 8101144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101148:	4770      	bx	lr
 810114a:	bf00      	nop
 810114c:	10000264 	.word	0x10000264

08101150 <bno055_delay>:

void bno055_delay(uint16_t ms)
{
 8101150:	b580      	push	{r7, lr}
 8101152:	b082      	sub	sp, #8
 8101154:	af00      	add	r7, sp, #0
 8101156:	4603      	mov	r3, r0
 8101158:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 810115a:	88fb      	ldrh	r3, [r7, #6]
 810115c:	4618      	mov	r0, r3
 810115e:	f002 fa19 	bl	8103594 <HAL_Delay>
}
 8101162:	bf00      	nop
 8101164:	3708      	adds	r7, #8
 8101166:	46bd      	mov	sp, r7
 8101168:	bd80      	pop	{r7, pc}
	...

0810116c <bno055_readData>:
//Argomenti:
// reg = indirizzo del registro che si vuole leggere nel BNO055
// puntatore ad un buffer (array) -> probabilmente una parte del registro dedicata a lettura/scrittura del dato
// lenght = Numero di byte da leggere dal registro specificato.
void bno055_readData(uint8_t reg, uint8_t *buffer, uint8_t length)
{
 810116c:	b590      	push	{r4, r7, lr}
 810116e:	b089      	sub	sp, #36	; 0x24
 8101170:	af04      	add	r7, sp, #16
 8101172:	4603      	mov	r3, r0
 8101174:	6039      	str	r1, [r7, #0]
 8101176:	71fb      	strb	r3, [r7, #7]
 8101178:	4613      	mov	r3, r2
 810117a:	71bb      	strb	r3, [r7, #6]
    // Indirizzo del dispositivo con bit di scrittura impostato
    uint16_t dev_addr = BNO055_I2C_ADDR << 1;
 810117c:	2350      	movs	r3, #80	; 0x50
 810117e:	81fb      	strh	r3, [r7, #14]
    // Sposta l'indirizzo di 1 bit verso sinistra
    // Il tipo di operazione (di lettura o scrittura) non deve essere specificato esplicitamente perché è gestito automaticamente dalla libreria HAL.
    // poichè in I2C il bit meno significativo (LSB) dell'indirizzo è riservato per indicare se si sta leggendo (1) o scrivendo (0) al dispositivo.

    // Legge i dati utilizzando la funzione HAL per la memoria I2C
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read
 8101180:	4b0e      	ldr	r3, [pc, #56]	; (81011bc <bno055_readData+0x50>)
 8101182:	6818      	ldr	r0, [r3, #0]
 8101184:	79fb      	ldrb	r3, [r7, #7]
 8101186:	b29a      	uxth	r2, r3
 8101188:	79bb      	ldrb	r3, [r7, #6]
 810118a:	b29b      	uxth	r3, r3
 810118c:	89f9      	ldrh	r1, [r7, #14]
 810118e:	f04f 34ff 	mov.w	r4, #4294967295
 8101192:	9402      	str	r4, [sp, #8]
 8101194:	9301      	str	r3, [sp, #4]
 8101196:	683b      	ldr	r3, [r7, #0]
 8101198:	9300      	str	r3, [sp, #0]
 810119a:	2301      	movs	r3, #1
 810119c:	f002 fece 	bl	8103f3c <HAL_I2C_Mem_Read>
 81011a0:	4603      	mov	r3, r0
 81011a2:	737b      	strb	r3, [r7, #13]
        buffer,            // Buffer in cui salvare i dati
        length,            // Numero di byte da leggere
        HAL_MAX_DELAY      // Timeout massimo
    );

    if (status != HAL_OK) {
 81011a4:	7b7b      	ldrb	r3, [r7, #13]
 81011a6:	2b00      	cmp	r3, #0
 81011a8:	d004      	beq.n	81011b4 <bno055_readData+0x48>
        printf("Errore nella lettura del registro 0x%02X\n", reg);
 81011aa:	79fb      	ldrb	r3, [r7, #7]
 81011ac:	4619      	mov	r1, r3
 81011ae:	4804      	ldr	r0, [pc, #16]	; (81011c0 <bno055_readData+0x54>)
 81011b0:	f009 fcac 	bl	810ab0c <iprintf>
    }
}
 81011b4:	bf00      	nop
 81011b6:	3714      	adds	r7, #20
 81011b8:	46bd      	mov	sp, r7
 81011ba:	bd90      	pop	{r4, r7, pc}
 81011bc:	10000264 	.word	0x10000264
 81011c0:	0810e698 	.word	0x0810e698

081011c4 <bno055_writeData>:


// Funzione per scrivere un valore in un registro specifico del BNO055
void bno055_writeData(uint8_t reg, uint8_t value)
{
 81011c4:	b580      	push	{r7, lr}
 81011c6:	b088      	sub	sp, #32
 81011c8:	af04      	add	r7, sp, #16
 81011ca:	4603      	mov	r3, r0
 81011cc:	460a      	mov	r2, r1
 81011ce:	71fb      	strb	r3, [r7, #7]
 81011d0:	4613      	mov	r3, r2
 81011d2:	71bb      	strb	r3, [r7, #6]
    uint16_t dev_addr = BNO055_I2C_ADDR << 1;
 81011d4:	2350      	movs	r3, #80	; 0x50
 81011d6:	81fb      	strh	r3, [r7, #14]

    // Scrive il dato utilizzando la funzione HAL per la memoria I2C
    HAL_StatusTypeDef status = HAL_I2C_Mem_Write
 81011d8:	4b0e      	ldr	r3, [pc, #56]	; (8101214 <bno055_writeData+0x50>)
 81011da:	6818      	ldr	r0, [r3, #0]
 81011dc:	79fb      	ldrb	r3, [r7, #7]
 81011de:	b29a      	uxth	r2, r3
 81011e0:	89f9      	ldrh	r1, [r7, #14]
 81011e2:	f04f 33ff 	mov.w	r3, #4294967295
 81011e6:	9302      	str	r3, [sp, #8]
 81011e8:	2301      	movs	r3, #1
 81011ea:	9301      	str	r3, [sp, #4]
 81011ec:	1dbb      	adds	r3, r7, #6
 81011ee:	9300      	str	r3, [sp, #0]
 81011f0:	2301      	movs	r3, #1
 81011f2:	f002 fd8f 	bl	8103d14 <HAL_I2C_Mem_Write>
 81011f6:	4603      	mov	r3, r0
 81011f8:	737b      	strb	r3, [r7, #13]
        &value,            // Puntatore al dato da scrivere
        1,                 // Numero di byte da scrivere (il sensore BNO055 è progettato per scrivere un byte alla volta nei suoi registri)
        HAL_MAX_DELAY
    );

    if (status != HAL_OK) {
 81011fa:	7b7b      	ldrb	r3, [r7, #13]
 81011fc:	2b00      	cmp	r3, #0
 81011fe:	d004      	beq.n	810120a <bno055_writeData+0x46>
        printf("Errore nella scrittura del registro 0x%02X\n", reg);
 8101200:	79fb      	ldrb	r3, [r7, #7]
 8101202:	4619      	mov	r1, r3
 8101204:	4804      	ldr	r0, [pc, #16]	; (8101218 <bno055_writeData+0x54>)
 8101206:	f009 fc81 	bl	810ab0c <iprintf>
    }
}
 810120a:	bf00      	nop
 810120c:	3710      	adds	r7, #16
 810120e:	46bd      	mov	sp, r7
 8101210:	bd80      	pop	{r7, pc}
 8101212:	bf00      	nop
 8101214:	10000264 	.word	0x10000264
 8101218:	0810e6c4 	.word	0x0810e6c4

0810121c <bno055_setPage>:


// Funzione per impostare la pagina di configurazione del BNO055
void bno055_setPage(uint8_t page)
{
 810121c:	b580      	push	{r7, lr}
 810121e:	b082      	sub	sp, #8
 8101220:	af00      	add	r7, sp, #0
 8101222:	4603      	mov	r3, r0
 8101224:	71fb      	strb	r3, [r7, #7]
    // Scrive il valore della pagina nel registro PAGE_ID
    bno055_writeData(BNO055_PAGE_ID, page);
 8101226:	79fb      	ldrb	r3, [r7, #7]
 8101228:	4619      	mov	r1, r3
 810122a:	2007      	movs	r0, #7
 810122c:	f7ff ffca 	bl	81011c4 <bno055_writeData>
}
 8101230:	bf00      	nop
 8101232:	3708      	adds	r7, #8
 8101234:	46bd      	mov	sp, r7
 8101236:	bd80      	pop	{r7, pc}

08101238 <bno055_reset>:


void bno055_reset(void) //Soft Reset command
{
 8101238:	b580      	push	{r7, lr}
 810123a:	af00      	add	r7, sp, #0
    bno055_writeData(BNO055_SYS_TRIGGER, BNO055_VECTOR_QUATERNION); //L'indirizzo del registro System Trigger per resettare il registro del quaternione
 810123c:	2120      	movs	r1, #32
 810123e:	203f      	movs	r0, #63	; 0x3f
 8101240:	f7ff ffc0 	bl	81011c4 <bno055_writeData>
    bno055_delay(650); // Attendi che il reset sia completato
 8101244:	f240 208a 	movw	r0, #650	; 0x28a
 8101248:	f7ff ff82 	bl	8101150 <bno055_delay>
}
 810124c:	bf00      	nop
 810124e:	bd80      	pop	{r7, pc}

08101250 <bno055_setOperationMode>:


void bno055_setOperationMode(bno055_opmode_t mode)//funzione che imposta la modalità operativa del sensore
{
 8101250:	b580      	push	{r7, lr}
 8101252:	b082      	sub	sp, #8
 8101254:	af00      	add	r7, sp, #0
 8101256:	4603      	mov	r3, r0
 8101258:	71fb      	strb	r3, [r7, #7]
    bno055_writeData(BNO055_OPR_MODE, mode);
 810125a:	79fb      	ldrb	r3, [r7, #7]
 810125c:	4619      	mov	r1, r3
 810125e:	203d      	movs	r0, #61	; 0x3d
 8101260:	f7ff ffb0 	bl	81011c4 <bno055_writeData>
    if (mode == BNO055_OPERATION_MODE_CONFIG)
 8101264:	79fb      	ldrb	r3, [r7, #7]
 8101266:	2b00      	cmp	r3, #0
 8101268:	d103      	bne.n	8101272 <bno055_setOperationMode+0x22>
    {
        bno055_delay(19); //Delay maggiore per la modalità iniziale di configurazione
 810126a:	2013      	movs	r0, #19
 810126c:	f7ff ff70 	bl	8101150 <bno055_delay>
    }
    else
    {
        bno055_delay(7);
    }
}
 8101270:	e002      	b.n	8101278 <bno055_setOperationMode+0x28>
        bno055_delay(7);
 8101272:	2007      	movs	r0, #7
 8101274:	f7ff ff6c 	bl	8101150 <bno055_delay>
}
 8101278:	bf00      	nop
 810127a:	3708      	adds	r7, #8
 810127c:	46bd      	mov	sp, r7
 810127e:	bd80      	pop	{r7, pc}

08101280 <bno055_setOperationModeConfig>:


// Funzione per impostare il sensore in modalità di configurazione
void bno055_setOperationModeConfig() {
 8101280:	b580      	push	{r7, lr}
 8101282:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG); //Ritardo maggiore
 8101284:	2000      	movs	r0, #0
 8101286:	f7ff ffe3 	bl	8101250 <bno055_setOperationMode>
}
 810128a:	bf00      	nop
 810128c:	bd80      	pop	{r7, pc}

0810128e <bno055_setOperationModeNDOF>:


// Funzione per impostare il sensore in modalità NDOF
void bno055_setOperationModeNDOF() {
 810128e:	b580      	push	{r7, lr}
 8101290:	af00      	add	r7, sp, #0
    bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8101292:	200c      	movs	r0, #12
 8101294:	f7ff ffdc 	bl	8101250 <bno055_setOperationMode>
}
 8101298:	bf00      	nop
 810129a:	bd80      	pop	{r7, pc}

0810129c <bno055_init>:


void bno055_init() //funzione utilizzata per inizializzare il sensore BNO055
{
 810129c:	b580      	push	{r7, lr}
 810129e:	b082      	sub	sp, #8
 81012a0:	af00      	add	r7, sp, #0
    bno055_reset();
 81012a2:	f7ff ffc9 	bl	8101238 <bno055_reset>

    uint8_t id = 0;
 81012a6:	2300      	movs	r3, #0
 81012a8:	71fb      	strb	r3, [r7, #7]
    bno055_readData(BNO055_CHIP_ID, &id, 1);
 81012aa:	1dfb      	adds	r3, r7, #7
 81012ac:	2201      	movs	r2, #1
 81012ae:	4619      	mov	r1, r3
 81012b0:	2000      	movs	r0, #0
 81012b2:	f7ff ff5b 	bl	810116c <bno055_readData>
    if (id != BNO055_CHIP_ID) {
 81012b6:	79fb      	ldrb	r3, [r7, #7]
 81012b8:	2b00      	cmp	r3, #0
 81012ba:	d004      	beq.n	81012c6 <bno055_init+0x2a>
        printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 81012bc:	79fb      	ldrb	r3, [r7, #7]
 81012be:	4619      	mov	r1, r3
 81012c0:	4809      	ldr	r0, [pc, #36]	; (81012e8 <bno055_init+0x4c>)
 81012c2:	f009 fc23 	bl	810ab0c <iprintf>
    }
    //Imposta la pagina 0, poiché il BNO055 utilizza una struttura di registri a pagine
    bno055_setPage(0);
 81012c6:	2000      	movs	r0, #0
 81012c8:	f7ff ffa8 	bl	810121c <bno055_setPage>
    bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 81012cc:	2100      	movs	r1, #0
 81012ce:	203f      	movs	r0, #63	; 0x3f
 81012d0:	f7ff ff78 	bl	81011c4 <bno055_writeData>

    // Select BNO055 config mode
    //Mette il chip in modalità di configurazione, necessaria per modificare alcune impostazioni o inizializzarlo
    bno055_setOperationModeConfig();
 81012d4:	f7ff ffd4 	bl	8101280 <bno055_setOperationModeConfig>
    bno055_delay(10);
 81012d8:	200a      	movs	r0, #10
 81012da:	f7ff ff39 	bl	8101150 <bno055_delay>
}
 81012de:	bf00      	nop
 81012e0:	3708      	adds	r7, #8
 81012e2:	46bd      	mov	sp, r7
 81012e4:	bd80      	pop	{r7, pc}
 81012e6:	bf00      	nop
 81012e8:	0810e6f0 	.word	0x0810e6f0

081012ec <bno055_getVector>:


bno055_vector_t bno055_getVector(uint8_t vec)
{
 81012ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81012f0:	b09e      	sub	sp, #120	; 0x78
 81012f2:	af00      	add	r7, sp, #0
 81012f4:	4603      	mov	r3, r0
 81012f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bno055_setPage(0);
 81012fa:	2000      	movs	r0, #0
 81012fc:	f7ff ff8e 	bl	810121c <bno055_setPage>
    uint8_t buffer[8];  // I quaternioni richiedono 8 byte

    if (vec == BNO055_VECTOR_QUATERNION)
 8101300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101304:	2b20      	cmp	r3, #32
 8101306:	d108      	bne.n	810131a <bno055_getVector+0x2e>
    {
        bno055_readData(vec, buffer, 8);
 8101308:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810130c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101310:	2208      	movs	r2, #8
 8101312:	4618      	mov	r0, r3
 8101314:	f7ff ff2a 	bl	810116c <bno055_readData>
 8101318:	e007      	b.n	810132a <bno055_getVector+0x3e>
    } else
    {
        bno055_readData(vec, buffer, 6);
 810131a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 810131e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101322:	2206      	movs	r2, #6
 8101324:	4618      	mov	r0, r3
 8101326:	f7ff ff21 	bl	810116c <bno055_readData>
    }

    double scale = 1;
 810132a:	f04f 0200 	mov.w	r2, #0
 810132e:	4b6c      	ldr	r3, [pc, #432]	; (81014e0 <bno055_getVector+0x1f4>)
 8101330:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

    //BNO055_VECTOR_ACCELEROMETER... sono definizioni preimpostate (costanti)
    //che rappresentano indirizzi specifici dei registri dell'IMU BNO055
    //In base al tipo di dato gli associa una scala (costante) che identifica una certa unità di misura
    //Unità di misura di: accelerazione, velocità angolare, gradi (per gli angoli di Eulero)
    if (vec == BNO055_MAG_DATA_X_LSB) //Misura il campo magnetico in micro Tesla
 8101334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101338:	2b0e      	cmp	r3, #14
 810133a:	d109      	bne.n	8101350 <bno055_getVector+0x64>
    {
        scale = magScale;
 810133c:	4b69      	ldr	r3, [pc, #420]	; (81014e4 <bno055_getVector+0x1f8>)
 810133e:	681b      	ldr	r3, [r3, #0]
 8101340:	4618      	mov	r0, r3
 8101342:	f7ff f989 	bl	8100658 <__aeabi_f2d>
 8101346:	4602      	mov	r2, r0
 8101348:	460b      	mov	r3, r1
 810134a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810134e:	e03e      	b.n	81013ce <bno055_getVector+0xe2>
    } else if (vec == BNO055_ACC_DATA_X_LSB ||
 8101350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101354:	2b08      	cmp	r3, #8
 8101356:	d007      	beq.n	8101368 <bno055_getVector+0x7c>
 8101358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810135c:	2b28      	cmp	r3, #40	; 0x28
 810135e:	d003      	beq.n	8101368 <bno055_getVector+0x7c>
               vec == BNO055_LIA_DATA_X_LSB ||
 8101360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101364:	2b2e      	cmp	r3, #46	; 0x2e
 8101366:	d109      	bne.n	810137c <bno055_getVector+0x90>
               vec == BNO055_VECTOR_GRAVITY) {
        scale = accelScale;
 8101368:	4b5f      	ldr	r3, [pc, #380]	; (81014e8 <bno055_getVector+0x1fc>)
 810136a:	681b      	ldr	r3, [r3, #0]
 810136c:	4618      	mov	r0, r3
 810136e:	f7ff f973 	bl	8100658 <__aeabi_f2d>
 8101372:	4602      	mov	r2, r0
 8101374:	460b      	mov	r3, r1
 8101376:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 810137a:	e028      	b.n	81013ce <bno055_getVector+0xe2>
    } else if (vec == BNO055_GYR_DATA_X_LSB) {
 810137c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101380:	2b14      	cmp	r3, #20
 8101382:	d109      	bne.n	8101398 <bno055_getVector+0xac>
        scale = angularRateScale;
 8101384:	4b59      	ldr	r3, [pc, #356]	; (81014ec <bno055_getVector+0x200>)
 8101386:	681b      	ldr	r3, [r3, #0]
 8101388:	4618      	mov	r0, r3
 810138a:	f7ff f965 	bl	8100658 <__aeabi_f2d>
 810138e:	4602      	mov	r2, r0
 8101390:	460b      	mov	r3, r1
 8101392:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8101396:	e01a      	b.n	81013ce <bno055_getVector+0xe2>
    } else if (vec == BNO055_VECTOR_EULER) {
 8101398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810139c:	2b1a      	cmp	r3, #26
 810139e:	d109      	bne.n	81013b4 <bno055_getVector+0xc8>
        scale = eulerScale;
 81013a0:	4b53      	ldr	r3, [pc, #332]	; (81014f0 <bno055_getVector+0x204>)
 81013a2:	681b      	ldr	r3, [r3, #0]
 81013a4:	4618      	mov	r0, r3
 81013a6:	f7ff f957 	bl	8100658 <__aeabi_f2d>
 81013aa:	4602      	mov	r2, r0
 81013ac:	460b      	mov	r3, r1
 81013ae:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 81013b2:	e00c      	b.n	81013ce <bno055_getVector+0xe2>
    } else if (vec == BNO055_VECTOR_QUATERNION) {
 81013b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81013b8:	2b20      	cmp	r3, #32
 81013ba:	d108      	bne.n	81013ce <bno055_getVector+0xe2>
        scale = quaScale; //Generica variazione di posizione nello spazio tridimensionale
 81013bc:	4b4d      	ldr	r3, [pc, #308]	; (81014f4 <bno055_getVector+0x208>)
 81013be:	681b      	ldr	r3, [r3, #0]
 81013c0:	4618      	mov	r0, r3
 81013c2:	f7ff f949 	bl	8100658 <__aeabi_f2d>
 81013c6:	4602      	mov	r2, r0
 81013c8:	460b      	mov	r3, r1
 81013ca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
    }

    bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 81013ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81013d2:	2220      	movs	r2, #32
 81013d4:	2100      	movs	r1, #0
 81013d6:	4618      	mov	r0, r3
 81013d8:	f009 fc0d 	bl	810abf6 <memset>

    //Conversione da dati grezzi a dati identificati e puliti
    //L'informazione grezza è salvata su 8 bit di cui ogni 2 bit sono riservati rispettivamente
    //ai valori della grandezza relativi alle componenti x, y, z ed eventualmente w
    xyz.x = ((int16_t)((buffer[1] << 8) | buffer[0])) / scale;
 81013dc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 81013e0:	021b      	lsls	r3, r3, #8
 81013e2:	b21a      	sxth	r2, r3
 81013e4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 81013e8:	b21b      	sxth	r3, r3
 81013ea:	4313      	orrs	r3, r2
 81013ec:	b21b      	sxth	r3, r3
 81013ee:	4618      	mov	r0, r3
 81013f0:	f7ff f920 	bl	8100634 <__aeabi_i2d>
 81013f4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 81013f8:	f7ff fab0 	bl	810095c <__aeabi_ddiv>
 81013fc:	4602      	mov	r2, r0
 81013fe:	460b      	mov	r3, r1
 8101400:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = ((int16_t)((buffer[3] << 8) | buffer[2])) / scale;
 8101404:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8101408:	021b      	lsls	r3, r3, #8
 810140a:	b21a      	sxth	r2, r3
 810140c:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8101410:	b21b      	sxth	r3, r3
 8101412:	4313      	orrs	r3, r2
 8101414:	b21b      	sxth	r3, r3
 8101416:	4618      	mov	r0, r3
 8101418:	f7ff f90c 	bl	8100634 <__aeabi_i2d>
 810141c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101420:	f7ff fa9c 	bl	810095c <__aeabi_ddiv>
 8101424:	4602      	mov	r2, r0
 8101426:	460b      	mov	r3, r1
 8101428:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = ((int16_t)((buffer[5] << 8) | buffer[4])) / scale;
 810142c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8101430:	021b      	lsls	r3, r3, #8
 8101432:	b21a      	sxth	r2, r3
 8101434:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8101438:	b21b      	sxth	r3, r3
 810143a:	4313      	orrs	r3, r2
 810143c:	b21b      	sxth	r3, r3
 810143e:	4618      	mov	r0, r3
 8101440:	f7ff f8f8 	bl	8100634 <__aeabi_i2d>
 8101444:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101448:	f7ff fa88 	bl	810095c <__aeabi_ddiv>
 810144c:	4602      	mov	r2, r0
 810144e:	460b      	mov	r3, r1
 8101450:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

    if (vec == BNO055_VECTOR_QUATERNION) //Se la grandezza è un quaternione
 8101454:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8101458:	2b20      	cmp	r3, #32
 810145a:	d113      	bne.n	8101484 <bno055_getVector+0x198>
    {
        xyz.w = ((int16_t)((buffer[7] << 8) | buffer[6])) / scale;
 810145c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8101460:	021b      	lsls	r3, r3, #8
 8101462:	b21a      	sxth	r2, r3
 8101464:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8101468:	b21b      	sxth	r3, r3
 810146a:	4313      	orrs	r3, r2
 810146c:	b21b      	sxth	r3, r3
 810146e:	4618      	mov	r0, r3
 8101470:	f7ff f8e0 	bl	8100634 <__aeabi_i2d>
 8101474:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8101478:	f7ff fa70 	bl	810095c <__aeabi_ddiv>
 810147c:	4602      	mov	r2, r0
 810147e:	460b      	mov	r3, r1
 8101480:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    }

    return xyz;
 8101484:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8101488:	f107 0528 	add.w	r5, r7, #40	; 0x28
 810148c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810148e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101490:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101494:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8101498:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 810149c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 81014a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 81014a4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 81014a8:	ec49 8b14 	vmov	d4, r8, r9
 81014ac:	ec45 4b15 	vmov	d5, r4, r5
 81014b0:	ec41 0b16 	vmov	d6, r0, r1
 81014b4:	ec43 2b17 	vmov	d7, r2, r3
}
 81014b8:	eeb0 0a44 	vmov.f32	s0, s8
 81014bc:	eef0 0a64 	vmov.f32	s1, s9
 81014c0:	eeb0 1a45 	vmov.f32	s2, s10
 81014c4:	eef0 1a65 	vmov.f32	s3, s11
 81014c8:	eeb0 2a46 	vmov.f32	s4, s12
 81014cc:	eef0 2a66 	vmov.f32	s5, s13
 81014d0:	eeb0 3a47 	vmov.f32	s6, s14
 81014d4:	eef0 3a67 	vmov.f32	s7, s15
 81014d8:	3778      	adds	r7, #120	; 0x78
 81014da:	46bd      	mov	sp, r7
 81014dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 81014e0:	3ff00000 	.word	0x3ff00000
 81014e4:	10000008 	.word	0x10000008
 81014e8:	1000000c 	.word	0x1000000c
 81014ec:	10000010 	.word	0x10000010
 81014f0:	10000014 	.word	0x10000014
 81014f4:	10000018 	.word	0x10000018

081014f8 <bno055_getVectorEuler>:


bno055_vector_t bno055_getVectorEuler() //Legge i dati di orientamento del sensore in termini di angoli Euleriani (roll, pitch, yaw)
{
 81014f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 81014fc:	b090      	sub	sp, #64	; 0x40
 81014fe:	af00      	add	r7, sp, #0
    return bno055_getVector(BNO055_VECTOR_EULER);
 8101500:	201a      	movs	r0, #26
 8101502:	f7ff fef3 	bl	81012ec <bno055_getVector>
 8101506:	eeb0 4a40 	vmov.f32	s8, s0
 810150a:	eef0 4a60 	vmov.f32	s9, s1
 810150e:	eeb0 5a41 	vmov.f32	s10, s2
 8101512:	eef0 5a61 	vmov.f32	s11, s3
 8101516:	eeb0 6a42 	vmov.f32	s12, s4
 810151a:	eef0 6a62 	vmov.f32	s13, s5
 810151e:	eeb0 7a43 	vmov.f32	s14, s6
 8101522:	eef0 7a63 	vmov.f32	s15, s7
 8101526:	ed87 4b08 	vstr	d4, [r7, #32]
 810152a:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 810152e:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8101532:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8101536:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 810153a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 810153e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8101542:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8101546:	ec49 8b14 	vmov	d4, r8, r9
 810154a:	ec45 4b15 	vmov	d5, r4, r5
 810154e:	ec41 0b16 	vmov	d6, r0, r1
 8101552:	ec43 2b17 	vmov	d7, r2, r3
}
 8101556:	eeb0 0a44 	vmov.f32	s0, s8
 810155a:	eef0 0a64 	vmov.f32	s1, s9
 810155e:	eeb0 1a45 	vmov.f32	s2, s10
 8101562:	eef0 1a65 	vmov.f32	s3, s11
 8101566:	eeb0 2a46 	vmov.f32	s4, s12
 810156a:	eef0 2a66 	vmov.f32	s5, s13
 810156e:	eeb0 3a47 	vmov.f32	s6, s14
 8101572:	eef0 3a67 	vmov.f32	s7, s15
 8101576:	3740      	adds	r7, #64	; 0x40
 8101578:	46bd      	mov	sp, r7
 810157a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0810157e <PID_Init>:
// d = 0.000000038124

//Assegnamo i valori ai coefficienti della struct del PID
// Init e Tune PID
void PID_Init(PID* pid, float kp, float ki, float kd, float dt, float outMin, float outMax)
{
 810157e:	b480      	push	{r7}
 8101580:	b089      	sub	sp, #36	; 0x24
 8101582:	af00      	add	r7, sp, #0
 8101584:	61f8      	str	r0, [r7, #28]
 8101586:	ed87 0a06 	vstr	s0, [r7, #24]
 810158a:	edc7 0a05 	vstr	s1, [r7, #20]
 810158e:	ed87 1a04 	vstr	s2, [r7, #16]
 8101592:	edc7 1a03 	vstr	s3, [r7, #12]
 8101596:	ed87 2a02 	vstr	s4, [r7, #8]
 810159a:	edc7 2a01 	vstr	s5, [r7, #4]
	pid->kp = kp;
 810159e:	69fb      	ldr	r3, [r7, #28]
 81015a0:	69ba      	ldr	r2, [r7, #24]
 81015a2:	601a      	str	r2, [r3, #0]
	pid->ki = ki;
 81015a4:	69fb      	ldr	r3, [r7, #28]
 81015a6:	697a      	ldr	r2, [r7, #20]
 81015a8:	605a      	str	r2, [r3, #4]
	pid->kd = kd;
 81015aa:	69fb      	ldr	r3, [r7, #28]
 81015ac:	693a      	ldr	r2, [r7, #16]
 81015ae:	609a      	str	r2, [r3, #8]
	pid->dt = dt;
 81015b0:	69fb      	ldr	r3, [r7, #28]
 81015b2:	68fa      	ldr	r2, [r7, #12]
 81015b4:	60da      	str	r2, [r3, #12]
	pid->Iterm = 0;
 81015b6:	69fb      	ldr	r3, [r7, #28]
 81015b8:	f04f 0200 	mov.w	r2, #0
 81015bc:	611a      	str	r2, [r3, #16]
	pid->DtermFiltered = 0;
 81015be:	69fb      	ldr	r3, [r7, #28]
 81015c0:	f04f 0200 	mov.w	r2, #0
 81015c4:	615a      	str	r2, [r3, #20]
	pid->lastError = 0;
 81015c6:	69fb      	ldr	r3, [r7, #28]
 81015c8:	f04f 0200 	mov.w	r2, #0
 81015cc:	619a      	str	r2, [r3, #24]
	pid->outMax = outMax;
 81015ce:	69fb      	ldr	r3, [r7, #28]
 81015d0:	687a      	ldr	r2, [r7, #4]
 81015d2:	61da      	str	r2, [r3, #28]
	pid->outMin = outMin;
 81015d4:	69fb      	ldr	r3, [r7, #28]
 81015d6:	68ba      	ldr	r2, [r7, #8]
 81015d8:	621a      	str	r2, [r3, #32]
}
 81015da:	bf00      	nop
 81015dc:	3724      	adds	r7, #36	; 0x24
 81015de:	46bd      	mov	sp, r7
 81015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015e4:	4770      	bx	lr

081015e6 <PID_Controller>:
}*/


// Funzione PID con filtro passa-basso sul termine derivativo
float PID_Controller(PID* pid, float input, float setPoint)
{
 81015e6:	b480      	push	{r7}
 81015e8:	b08b      	sub	sp, #44	; 0x2c
 81015ea:	af00      	add	r7, sp, #0
 81015ec:	60f8      	str	r0, [r7, #12]
 81015ee:	ed87 0a02 	vstr	s0, [r7, #8]
 81015f2:	edc7 0a01 	vstr	s1, [r7, #4]
    float output;
    float newIterm;

    float error = setPoint - input;
 81015f6:	ed97 7a01 	vldr	s14, [r7, #4]
 81015fa:	edd7 7a02 	vldr	s15, [r7, #8]
 81015fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101602:	edc7 7a08 	vstr	s15, [r7, #32]

    float Pterm = pid->kp * error;
 8101606:	68fb      	ldr	r3, [r7, #12]
 8101608:	edd3 7a00 	vldr	s15, [r3]
 810160c:	ed97 7a08 	vldr	s14, [r7, #32]
 8101610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101614:	edc7 7a07 	vstr	s15, [r7, #28]

    newIterm = pid->Iterm + (pid->ki) * pid->dt * pid->lastError;
 8101618:	68fb      	ldr	r3, [r7, #12]
 810161a:	ed93 7a04 	vldr	s14, [r3, #16]
 810161e:	68fb      	ldr	r3, [r7, #12]
 8101620:	edd3 6a01 	vldr	s13, [r3, #4]
 8101624:	68fb      	ldr	r3, [r7, #12]
 8101626:	edd3 7a03 	vldr	s15, [r3, #12]
 810162a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 810162e:	68fb      	ldr	r3, [r7, #12]
 8101630:	edd3 7a06 	vldr	s15, [r3, #24]
 8101634:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101638:	ee77 7a27 	vadd.f32	s15, s14, s15
 810163c:	edc7 7a06 	vstr	s15, [r7, #24]

    float Dterm = (pid->kd/pid->dt) * (error - pid->lastError);
 8101640:	68fb      	ldr	r3, [r7, #12]
 8101642:	edd3 6a02 	vldr	s13, [r3, #8]
 8101646:	68fb      	ldr	r3, [r7, #12]
 8101648:	edd3 7a03 	vldr	s15, [r3, #12]
 810164c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101650:	68fb      	ldr	r3, [r7, #12]
 8101652:	edd3 7a06 	vldr	s15, [r3, #24]
 8101656:	edd7 6a08 	vldr	s13, [r7, #32]
 810165a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 810165e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101662:	edc7 7a05 	vstr	s15, [r7, #20]
    // Applica filtro passa-basso (α = 0.8 per smorzare il rumore)
    pid->DtermFiltered = 0.8 * pid->DtermFiltered + 0.2 * DtermRaw;
    float Dterm = pid->DtermFiltered;
    */

    pid->lastError = error;
 8101666:	68fb      	ldr	r3, [r7, #12]
 8101668:	6a3a      	ldr	r2, [r7, #32]
 810166a:	619a      	str	r2, [r3, #24]

    output = Pterm + newIterm + Dterm;
 810166c:	ed97 7a07 	vldr	s14, [r7, #28]
 8101670:	edd7 7a06 	vldr	s15, [r7, #24]
 8101674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101678:	ed97 7a05 	vldr	s14, [r7, #20]
 810167c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101680:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

    // Saturazione dell'output & anti-windup
    if (output > pid->outMax) {
 8101684:	68fb      	ldr	r3, [r7, #12]
 8101686:	edd3 7a07 	vldr	s15, [r3, #28]
 810168a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 810168e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8101692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8101696:	dd03      	ble.n	81016a0 <PID_Controller+0xba>
        output = pid->outMax;
 8101698:	68fb      	ldr	r3, [r7, #12]
 810169a:	69db      	ldr	r3, [r3, #28]
 810169c:	627b      	str	r3, [r7, #36]	; 0x24
 810169e:	e010      	b.n	81016c2 <PID_Controller+0xdc>
    } else if (output < pid->outMin) {
 81016a0:	68fb      	ldr	r3, [r7, #12]
 81016a2:	edd3 7a08 	vldr	s15, [r3, #32]
 81016a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 81016aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 81016ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 81016b2:	d503      	bpl.n	81016bc <PID_Controller+0xd6>
        output = pid->outMin;
 81016b4:	68fb      	ldr	r3, [r7, #12]
 81016b6:	6a1b      	ldr	r3, [r3, #32]
 81016b8:	627b      	str	r3, [r7, #36]	; 0x24
 81016ba:	e002      	b.n	81016c2 <PID_Controller+0xdc>
    } else {
        pid->Iterm = newIterm; // Applica anti-windup
 81016bc:	68fb      	ldr	r3, [r7, #12]
 81016be:	69ba      	ldr	r2, [r7, #24]
 81016c0:	611a      	str	r2, [r3, #16]
    }

    return output;
 81016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81016c4:	ee07 3a90 	vmov	s15, r3
}
 81016c8:	eeb0 0a67 	vmov.f32	s0, s15
 81016cc:	372c      	adds	r7, #44	; 0x2c
 81016ce:	46bd      	mov	sp, r7
 81016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016d4:	4770      	bx	lr
	...

081016d8 <SpeedCompute>:


float* SpeedCompute(float virtualInputs[])
{
 81016d8:	b580      	push	{r7, lr}
 81016da:	b082      	sub	sp, #8
 81016dc:	af00      	add	r7, sp, #0
 81016de:	6078      	str	r0, [r7, #4]
    static float Speeds_quad[4];
    static float Speeds[4];

    Speeds_quad[0] = (1/(4*b))*virtualInputs[0] - (1/(2*l*b))*virtualInputs[2] + (1/(4*d))*virtualInputs[3];
 81016e0:	4ba2      	ldr	r3, [pc, #648]	; (810196c <SpeedCompute+0x294>)
 81016e2:	edd3 7a00 	vldr	s15, [r3]
 81016e6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 81016ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 81016ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81016f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81016f6:	687b      	ldr	r3, [r7, #4]
 81016f8:	edd3 7a00 	vldr	s15, [r3]
 81016fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101700:	4b9b      	ldr	r3, [pc, #620]	; (8101970 <SpeedCompute+0x298>)
 8101702:	edd3 7a00 	vldr	s15, [r3]
 8101706:	ee77 6aa7 	vadd.f32	s13, s15, s15
 810170a:	4b98      	ldr	r3, [pc, #608]	; (810196c <SpeedCompute+0x294>)
 810170c:	edd3 7a00 	vldr	s15, [r3]
 8101710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101714:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8101718:	eec6 6a27 	vdiv.f32	s13, s12, s15
 810171c:	687b      	ldr	r3, [r7, #4]
 810171e:	3308      	adds	r3, #8
 8101720:	edd3 7a00 	vldr	s15, [r3]
 8101724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101728:	ee37 7a67 	vsub.f32	s14, s14, s15
 810172c:	4b91      	ldr	r3, [pc, #580]	; (8101974 <SpeedCompute+0x29c>)
 810172e:	edd3 7a00 	vldr	s15, [r3]
 8101732:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8101736:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810173a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 810173e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8101742:	687b      	ldr	r3, [r7, #4]
 8101744:	330c      	adds	r3, #12
 8101746:	edd3 7a00 	vldr	s15, [r3]
 810174a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810174e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101752:	4b89      	ldr	r3, [pc, #548]	; (8101978 <SpeedCompute+0x2a0>)
 8101754:	edc3 7a00 	vstr	s15, [r3]
	Speeds_quad[1] = (1/(4*b))*virtualInputs[0] - (1/(2*l*b))*virtualInputs[1] - (1/(4*d))*virtualInputs[3];
 8101758:	4b84      	ldr	r3, [pc, #528]	; (810196c <SpeedCompute+0x294>)
 810175a:	edd3 7a00 	vldr	s15, [r3]
 810175e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8101762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810176a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810176e:	687b      	ldr	r3, [r7, #4]
 8101770:	edd3 7a00 	vldr	s15, [r3]
 8101774:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101778:	4b7d      	ldr	r3, [pc, #500]	; (8101970 <SpeedCompute+0x298>)
 810177a:	edd3 7a00 	vldr	s15, [r3]
 810177e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8101782:	4b7a      	ldr	r3, [pc, #488]	; (810196c <SpeedCompute+0x294>)
 8101784:	edd3 7a00 	vldr	s15, [r3]
 8101788:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810178c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8101790:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8101794:	687b      	ldr	r3, [r7, #4]
 8101796:	3304      	adds	r3, #4
 8101798:	edd3 7a00 	vldr	s15, [r3]
 810179c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81017a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 81017a4:	4b73      	ldr	r3, [pc, #460]	; (8101974 <SpeedCompute+0x29c>)
 81017a6:	edd3 7a00 	vldr	s15, [r3]
 81017aa:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 81017ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 81017b2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 81017b6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 81017ba:	687b      	ldr	r3, [r7, #4]
 81017bc:	330c      	adds	r3, #12
 81017be:	edd3 7a00 	vldr	s15, [r3]
 81017c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81017c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 81017ca:	4b6b      	ldr	r3, [pc, #428]	; (8101978 <SpeedCompute+0x2a0>)
 81017cc:	edc3 7a01 	vstr	s15, [r3, #4]
	Speeds_quad[2] = (1/(4*b))*virtualInputs[0] + (1/(2*l*b))*virtualInputs[2] + (1/(4*d))*virtualInputs[3];
 81017d0:	4b66      	ldr	r3, [pc, #408]	; (810196c <SpeedCompute+0x294>)
 81017d2:	edd3 7a00 	vldr	s15, [r3]
 81017d6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 81017da:	ee67 7a87 	vmul.f32	s15, s15, s14
 81017de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81017e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81017e6:	687b      	ldr	r3, [r7, #4]
 81017e8:	edd3 7a00 	vldr	s15, [r3]
 81017ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 81017f0:	4b5f      	ldr	r3, [pc, #380]	; (8101970 <SpeedCompute+0x298>)
 81017f2:	edd3 7a00 	vldr	s15, [r3]
 81017f6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 81017fa:	4b5c      	ldr	r3, [pc, #368]	; (810196c <SpeedCompute+0x294>)
 81017fc:	edd3 7a00 	vldr	s15, [r3]
 8101800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101804:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8101808:	eec6 6a27 	vdiv.f32	s13, s12, s15
 810180c:	687b      	ldr	r3, [r7, #4]
 810180e:	3308      	adds	r3, #8
 8101810:	edd3 7a00 	vldr	s15, [r3]
 8101814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101818:	ee37 7a27 	vadd.f32	s14, s14, s15
 810181c:	4b55      	ldr	r3, [pc, #340]	; (8101974 <SpeedCompute+0x29c>)
 810181e:	edd3 7a00 	vldr	s15, [r3]
 8101822:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8101826:	ee67 7aa6 	vmul.f32	s15, s15, s13
 810182a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 810182e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8101832:	687b      	ldr	r3, [r7, #4]
 8101834:	330c      	adds	r3, #12
 8101836:	edd3 7a00 	vldr	s15, [r3]
 810183a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810183e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8101842:	4b4d      	ldr	r3, [pc, #308]	; (8101978 <SpeedCompute+0x2a0>)
 8101844:	edc3 7a02 	vstr	s15, [r3, #8]
	Speeds_quad[3] = (1/(4*b))*virtualInputs[0] + (1/(2*l*b))*virtualInputs[1] - (1/(4*d))*virtualInputs[3];
 8101848:	4b48      	ldr	r3, [pc, #288]	; (810196c <SpeedCompute+0x294>)
 810184a:	edd3 7a00 	vldr	s15, [r3]
 810184e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8101852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8101856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810185a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810185e:	687b      	ldr	r3, [r7, #4]
 8101860:	edd3 7a00 	vldr	s15, [r3]
 8101864:	ee27 7a27 	vmul.f32	s14, s14, s15
 8101868:	4b41      	ldr	r3, [pc, #260]	; (8101970 <SpeedCompute+0x298>)
 810186a:	edd3 7a00 	vldr	s15, [r3]
 810186e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8101872:	4b3e      	ldr	r3, [pc, #248]	; (810196c <SpeedCompute+0x294>)
 8101874:	edd3 7a00 	vldr	s15, [r3]
 8101878:	ee66 7aa7 	vmul.f32	s15, s13, s15
 810187c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8101880:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8101884:	687b      	ldr	r3, [r7, #4]
 8101886:	3304      	adds	r3, #4
 8101888:	edd3 7a00 	vldr	s15, [r3]
 810188c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8101890:	ee37 7a27 	vadd.f32	s14, s14, s15
 8101894:	4b37      	ldr	r3, [pc, #220]	; (8101974 <SpeedCompute+0x29c>)
 8101896:	edd3 7a00 	vldr	s15, [r3]
 810189a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 810189e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 81018a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 81018a6:	eec6 6a27 	vdiv.f32	s13, s12, s15
 81018aa:	687b      	ldr	r3, [r7, #4]
 81018ac:	330c      	adds	r3, #12
 81018ae:	edd3 7a00 	vldr	s15, [r3]
 81018b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 81018b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 81018ba:	4b2f      	ldr	r3, [pc, #188]	; (8101978 <SpeedCompute+0x2a0>)
 81018bc:	edc3 7a03 	vstr	s15, [r3, #12]
     * Calcoliamo le velocità dei motori al quadrato, poiché non possono essere negative.
     * Partendo dal valore di throttle e seguendo le matrici di controllo dei droni,
     * andiamo a sommare e sottrarre le variabili date tramite il PID per il controllo delle velocità.
     */

    Speeds[0] = sqrt(Speeds_quad[0]);
 81018c0:	4b2d      	ldr	r3, [pc, #180]	; (8101978 <SpeedCompute+0x2a0>)
 81018c2:	681b      	ldr	r3, [r3, #0]
 81018c4:	4618      	mov	r0, r3
 81018c6:	f7fe fec7 	bl	8100658 <__aeabi_f2d>
 81018ca:	4602      	mov	r2, r0
 81018cc:	460b      	mov	r3, r1
 81018ce:	ec43 2b10 	vmov	d0, r2, r3
 81018d2:	f00c fdcd 	bl	810e470 <sqrt>
 81018d6:	ec53 2b10 	vmov	r2, r3, d0
 81018da:	4610      	mov	r0, r2
 81018dc:	4619      	mov	r1, r3
 81018de:	f7ff fa0b 	bl	8100cf8 <__aeabi_d2f>
 81018e2:	4603      	mov	r3, r0
 81018e4:	4a25      	ldr	r2, [pc, #148]	; (810197c <SpeedCompute+0x2a4>)
 81018e6:	6013      	str	r3, [r2, #0]
    Speeds[1] = sqrt(Speeds_quad[1]);
 81018e8:	4b23      	ldr	r3, [pc, #140]	; (8101978 <SpeedCompute+0x2a0>)
 81018ea:	685b      	ldr	r3, [r3, #4]
 81018ec:	4618      	mov	r0, r3
 81018ee:	f7fe feb3 	bl	8100658 <__aeabi_f2d>
 81018f2:	4602      	mov	r2, r0
 81018f4:	460b      	mov	r3, r1
 81018f6:	ec43 2b10 	vmov	d0, r2, r3
 81018fa:	f00c fdb9 	bl	810e470 <sqrt>
 81018fe:	ec53 2b10 	vmov	r2, r3, d0
 8101902:	4610      	mov	r0, r2
 8101904:	4619      	mov	r1, r3
 8101906:	f7ff f9f7 	bl	8100cf8 <__aeabi_d2f>
 810190a:	4603      	mov	r3, r0
 810190c:	4a1b      	ldr	r2, [pc, #108]	; (810197c <SpeedCompute+0x2a4>)
 810190e:	6053      	str	r3, [r2, #4]
    Speeds[2] = sqrt(Speeds_quad[2]);
 8101910:	4b19      	ldr	r3, [pc, #100]	; (8101978 <SpeedCompute+0x2a0>)
 8101912:	689b      	ldr	r3, [r3, #8]
 8101914:	4618      	mov	r0, r3
 8101916:	f7fe fe9f 	bl	8100658 <__aeabi_f2d>
 810191a:	4602      	mov	r2, r0
 810191c:	460b      	mov	r3, r1
 810191e:	ec43 2b10 	vmov	d0, r2, r3
 8101922:	f00c fda5 	bl	810e470 <sqrt>
 8101926:	ec53 2b10 	vmov	r2, r3, d0
 810192a:	4610      	mov	r0, r2
 810192c:	4619      	mov	r1, r3
 810192e:	f7ff f9e3 	bl	8100cf8 <__aeabi_d2f>
 8101932:	4603      	mov	r3, r0
 8101934:	4a11      	ldr	r2, [pc, #68]	; (810197c <SpeedCompute+0x2a4>)
 8101936:	6093      	str	r3, [r2, #8]
    Speeds[3] = sqrt(Speeds_quad[3]);
 8101938:	4b0f      	ldr	r3, [pc, #60]	; (8101978 <SpeedCompute+0x2a0>)
 810193a:	68db      	ldr	r3, [r3, #12]
 810193c:	4618      	mov	r0, r3
 810193e:	f7fe fe8b 	bl	8100658 <__aeabi_f2d>
 8101942:	4602      	mov	r2, r0
 8101944:	460b      	mov	r3, r1
 8101946:	ec43 2b10 	vmov	d0, r2, r3
 810194a:	f00c fd91 	bl	810e470 <sqrt>
 810194e:	ec53 2b10 	vmov	r2, r3, d0
 8101952:	4610      	mov	r0, r2
 8101954:	4619      	mov	r1, r3
 8101956:	f7ff f9cf 	bl	8100cf8 <__aeabi_d2f>
 810195a:	4603      	mov	r3, r0
 810195c:	4a07      	ldr	r2, [pc, #28]	; (810197c <SpeedCompute+0x2a4>)
 810195e:	60d3      	str	r3, [r2, #12]

    // Una volta calcolata la velocità dei motori al quadrato, viene eseguita la radice

    return Speeds;
 8101960:	4b06      	ldr	r3, [pc, #24]	; (810197c <SpeedCompute+0x2a4>)
}
 8101962:	4618      	mov	r0, r3
 8101964:	3708      	adds	r7, #8
 8101966:	46bd      	mov	sp, r7
 8101968:	bd80      	pop	{r7, pc}
 810196a:	bf00      	nop
 810196c:	1000001c 	.word	0x1000001c
 8101970:	10000020 	.word	0x10000020
 8101974:	10000024 	.word	0x10000024
 8101978:	10000268 	.word	0x10000268
 810197c:	10000278 	.word	0x10000278

08101980 <readImu>:
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */


void readImu()
{
 8101980:	b5b0      	push	{r4, r5, r7, lr}
 8101982:	b088      	sub	sp, #32
 8101984:	af00      	add	r7, sp, #0
	bno055_vector_t euler_vector = bno055_getVectorEuler();
 8101986:	f7ff fdb7 	bl	81014f8 <bno055_getVectorEuler>
 810198a:	eeb0 4a40 	vmov.f32	s8, s0
 810198e:	eef0 4a60 	vmov.f32	s9, s1
 8101992:	eeb0 5a41 	vmov.f32	s10, s2
 8101996:	eef0 5a61 	vmov.f32	s11, s3
 810199a:	eeb0 6a42 	vmov.f32	s12, s4
 810199e:	eef0 6a62 	vmov.f32	s13, s5
 81019a2:	eeb0 7a43 	vmov.f32	s14, s6
 81019a6:	eef0 7a63 	vmov.f32	s15, s7
 81019aa:	ed87 4b00 	vstr	d4, [r7]
 81019ae:	ed87 5b02 	vstr	d5, [r7, #8]
 81019b2:	ed87 6b04 	vstr	d6, [r7, #16]
 81019b6:	ed87 7b06 	vstr	d7, [r7, #24]

	roll = euler_vector.y;
 81019ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 81019be:	491a      	ldr	r1, [pc, #104]	; (8101a28 <readImu+0xa8>)
 81019c0:	e9c1 2300 	strd	r2, r3, [r1]
	if (euler_vector.z < 0)
 81019c4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 81019c8:	f04f 0200 	mov.w	r2, #0
 81019cc:	f04f 0300 	mov.w	r3, #0
 81019d0:	f7ff f90c 	bl	8100bec <__aeabi_dcmplt>
 81019d4:	4603      	mov	r3, r0
 81019d6:	2b00      	cmp	r3, #0
 81019d8:	d011      	beq.n	81019fe <readImu+0x7e>
	{
		pitch = -euler_vector.z - 180; //Se si raggiunge il SetPoint di -180° sul roll, questa variabile vale 0
 81019da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 81019de:	4614      	mov	r4, r2
 81019e0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 81019e4:	f04f 0200 	mov.w	r2, #0
 81019e8:	4b10      	ldr	r3, [pc, #64]	; (8101a2c <readImu+0xac>)
 81019ea:	4620      	mov	r0, r4
 81019ec:	4629      	mov	r1, r5
 81019ee:	f7fe fcd3 	bl	8100398 <__aeabi_dsub>
 81019f2:	4602      	mov	r2, r0
 81019f4:	460b      	mov	r3, r1
 81019f6:	490e      	ldr	r1, [pc, #56]	; (8101a30 <readImu+0xb0>)
 81019f8:	e9c1 2300 	strd	r2, r3, [r1]
 81019fc:	e00b      	b.n	8101a16 <readImu+0x96>
	}
	else{
		pitch = -euler_vector.z + 180;
 81019fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8101a02:	f04f 0000 	mov.w	r0, #0
 8101a06:	4909      	ldr	r1, [pc, #36]	; (8101a2c <readImu+0xac>)
 8101a08:	f7fe fcc6 	bl	8100398 <__aeabi_dsub>
 8101a0c:	4602      	mov	r2, r0
 8101a0e:	460b      	mov	r3, r1
 8101a10:	4907      	ldr	r1, [pc, #28]	; (8101a30 <readImu+0xb0>)
 8101a12:	e9c1 2300 	strd	r2, r3, [r1]
	}
	yaw = euler_vector.x;
 8101a16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101a1a:	4906      	ldr	r1, [pc, #24]	; (8101a34 <readImu+0xb4>)
 8101a1c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8101a20:	bf00      	nop
 8101a22:	3720      	adds	r7, #32
 8101a24:	46bd      	mov	sp, r7
 8101a26:	bdb0      	pop	{r4, r5, r7, pc}
 8101a28:	100004b8 	.word	0x100004b8
 8101a2c:	40668000 	.word	0x40668000
 8101a30:	100004c0 	.word	0x100004c0
 8101a34:	100004c8 	.word	0x100004c8

08101a38 <stabilizeMotors>:



void stabilizeMotors()
{
 8101a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8101a3c:	ed2d 8b08 	vpush	{d8-d11}
 8101a40:	b0bf      	sub	sp, #252	; 0xfc
 8101a42:	af22      	add	r7, sp, #136	; 0x88
	float virtualInputs[4];
	readImu();
 8101a44:	f7ff ff9c 	bl	8101980 <readImu>
	//quindi mantiene il suo valore tra le chiamate alla funzione
	static int prev_rif_yaw = 0; // Memorizza il valore precedente della levetta
	static int flag_control = 0; // Indica se il PID deve continuare a controllare

	// Controllo cambio stato della levetta dell'imbardata
	if (rif_yaw != prev_rif_yaw)
 8101a48:	4b70      	ldr	r3, [pc, #448]	; (8101c0c <stabilizeMotors+0x1d4>)
 8101a4a:	681a      	ldr	r2, [r3, #0]
 8101a4c:	4b70      	ldr	r3, [pc, #448]	; (8101c10 <stabilizeMotors+0x1d8>)
 8101a4e:	681b      	ldr	r3, [r3, #0]
 8101a50:	429a      	cmp	r2, r3
 8101a52:	d045      	beq.n	8101ae0 <stabilizeMotors+0xa8>
	{
		prev_rif_yaw = rif_yaw; // Aggiorna lo stato precedente
 8101a54:	4b6d      	ldr	r3, [pc, #436]	; (8101c0c <stabilizeMotors+0x1d4>)
 8101a56:	681b      	ldr	r3, [r3, #0]
 8101a58:	4a6d      	ldr	r2, [pc, #436]	; (8101c10 <stabilizeMotors+0x1d8>)
 8101a5a:	6013      	str	r3, [r2, #0]
		yaw_setpoint = yaw + yaw_angolo;
 8101a5c:	4b6d      	ldr	r3, [pc, #436]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101a5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101a62:	4b6d      	ldr	r3, [pc, #436]	; (8101c18 <stabilizeMotors+0x1e0>)
 8101a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a68:	f7fe fc98 	bl	810039c <__adddf3>
 8101a6c:	4602      	mov	r2, r0
 8101a6e:	460b      	mov	r3, r1
 8101a70:	496a      	ldr	r1, [pc, #424]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101a72:	e9c1 2300 	strd	r2, r3, [r1]

		// Assicura che yaw_setpoint sia nel range [0, 360]
		if (yaw_setpoint >= 360)
 8101a76:	4b69      	ldr	r3, [pc, #420]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101a78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101a7c:	f04f 0200 	mov.w	r2, #0
 8101a80:	4b67      	ldr	r3, [pc, #412]	; (8101c20 <stabilizeMotors+0x1e8>)
 8101a82:	f7ff f8c7 	bl	8100c14 <__aeabi_dcmpge>
 8101a86:	4603      	mov	r3, r0
 8101a88:	2b00      	cmp	r3, #0
 8101a8a:	d00d      	beq.n	8101aa8 <stabilizeMotors+0x70>
			yaw_setpoint -= 360;
 8101a8c:	4b63      	ldr	r3, [pc, #396]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101a8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101a92:	f04f 0200 	mov.w	r2, #0
 8101a96:	4b62      	ldr	r3, [pc, #392]	; (8101c20 <stabilizeMotors+0x1e8>)
 8101a98:	f7fe fc7e 	bl	8100398 <__aeabi_dsub>
 8101a9c:	4602      	mov	r2, r0
 8101a9e:	460b      	mov	r3, r1
 8101aa0:	495e      	ldr	r1, [pc, #376]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101aa2:	e9c1 2300 	strd	r2, r3, [r1]
 8101aa6:	e018      	b.n	8101ada <stabilizeMotors+0xa2>
		else if (yaw_setpoint < 0)
 8101aa8:	4b5c      	ldr	r3, [pc, #368]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101aaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101aae:	f04f 0200 	mov.w	r2, #0
 8101ab2:	f04f 0300 	mov.w	r3, #0
 8101ab6:	f7ff f899 	bl	8100bec <__aeabi_dcmplt>
 8101aba:	4603      	mov	r3, r0
 8101abc:	2b00      	cmp	r3, #0
 8101abe:	d00c      	beq.n	8101ada <stabilizeMotors+0xa2>
			yaw_setpoint += 360;
 8101ac0:	4b56      	ldr	r3, [pc, #344]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101ac2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101ac6:	f04f 0200 	mov.w	r2, #0
 8101aca:	4b55      	ldr	r3, [pc, #340]	; (8101c20 <stabilizeMotors+0x1e8>)
 8101acc:	f7fe fc66 	bl	810039c <__adddf3>
 8101ad0:	4602      	mov	r2, r0
 8101ad2:	460b      	mov	r3, r1
 8101ad4:	4951      	ldr	r1, [pc, #324]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101ad6:	e9c1 2300 	strd	r2, r3, [r1]

		flag_control = 1; // Attiva il controllo PID
 8101ada:	4b52      	ldr	r3, [pc, #328]	; (8101c24 <stabilizeMotors+0x1ec>)
 8101adc:	2201      	movs	r2, #1
 8101ade:	601a      	str	r2, [r3, #0]
	}

	// Se il PID ha raggiunto lo yaw_setpoint o yaw_angolo è 0, ferma il controllo
	//fabs() restituisce il valore assoluto di un numero in virgola mobile
	if ((flag_control && fabs(yaw_setpoint - yaw) < 1.0) || rif_yaw == 0) // Tolleranza di 1 grado
 8101ae0:	4b50      	ldr	r3, [pc, #320]	; (8101c24 <stabilizeMotors+0x1ec>)
 8101ae2:	681b      	ldr	r3, [r3, #0]
 8101ae4:	2b00      	cmp	r3, #0
 8101ae6:	d016      	beq.n	8101b16 <stabilizeMotors+0xde>
 8101ae8:	4b4c      	ldr	r3, [pc, #304]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101aea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101aee:	4b49      	ldr	r3, [pc, #292]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101af4:	f7fe fc50 	bl	8100398 <__aeabi_dsub>
 8101af8:	4602      	mov	r2, r0
 8101afa:	460b      	mov	r3, r1
 8101afc:	4614      	mov	r4, r2
 8101afe:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8101b02:	f04f 0200 	mov.w	r2, #0
 8101b06:	4b48      	ldr	r3, [pc, #288]	; (8101c28 <stabilizeMotors+0x1f0>)
 8101b08:	4620      	mov	r0, r4
 8101b0a:	4629      	mov	r1, r5
 8101b0c:	f7ff f86e 	bl	8100bec <__aeabi_dcmplt>
 8101b10:	4603      	mov	r3, r0
 8101b12:	2b00      	cmp	r3, #0
 8101b14:	d103      	bne.n	8101b1e <stabilizeMotors+0xe6>
 8101b16:	4b3d      	ldr	r3, [pc, #244]	; (8101c0c <stabilizeMotors+0x1d4>)
 8101b18:	681b      	ldr	r3, [r3, #0]
 8101b1a:	2b00      	cmp	r3, #0
 8101b1c:	d102      	bne.n	8101b24 <stabilizeMotors+0xec>
	{
		flag_control = 0;
 8101b1e:	4b41      	ldr	r3, [pc, #260]	; (8101c24 <stabilizeMotors+0x1ec>)
 8101b20:	2200      	movs	r2, #0
 8101b22:	601a      	str	r2, [r3, #0]
	}

	virtualInputs[0] = 9; // Peso del drone
 8101b24:	4b41      	ldr	r3, [pc, #260]	; (8101c2c <stabilizeMotors+0x1f4>)
 8101b26:	64fb      	str	r3, [r7, #76]	; 0x4c
	virtualInputs[1] = PID_Controller(&RollPID, roll, 0);
 8101b28:	4b41      	ldr	r3, [pc, #260]	; (8101c30 <stabilizeMotors+0x1f8>)
 8101b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b2e:	4610      	mov	r0, r2
 8101b30:	4619      	mov	r1, r3
 8101b32:	f7ff f8e1 	bl	8100cf8 <__aeabi_d2f>
 8101b36:	4603      	mov	r3, r0
 8101b38:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8101c34 <stabilizeMotors+0x1fc>
 8101b3c:	ee00 3a10 	vmov	s0, r3
 8101b40:	483d      	ldr	r0, [pc, #244]	; (8101c38 <stabilizeMotors+0x200>)
 8101b42:	f7ff fd50 	bl	81015e6 <PID_Controller>
 8101b46:	eef0 7a40 	vmov.f32	s15, s0
 8101b4a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	virtualInputs[2] = PID_Controller(&PitchPID, pitch, 0);
 8101b4e:	4b3b      	ldr	r3, [pc, #236]	; (8101c3c <stabilizeMotors+0x204>)
 8101b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b54:	4610      	mov	r0, r2
 8101b56:	4619      	mov	r1, r3
 8101b58:	f7ff f8ce 	bl	8100cf8 <__aeabi_d2f>
 8101b5c:	4603      	mov	r3, r0
 8101b5e:	eddf 0a35 	vldr	s1, [pc, #212]	; 8101c34 <stabilizeMotors+0x1fc>
 8101b62:	ee00 3a10 	vmov	s0, r3
 8101b66:	4836      	ldr	r0, [pc, #216]	; (8101c40 <stabilizeMotors+0x208>)
 8101b68:	f7ff fd3d 	bl	81015e6 <PID_Controller>
 8101b6c:	eef0 7a40 	vmov.f32	s15, s0
 8101b70:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	//Attiva PitchYaw solo se il drone si trova in un intorno di +-10° dalla posizione di equilibrio
	if (flag_control && (roll >= -12 && roll <= 12) && (pitch >= -12 && pitch <= 12))
 8101b74:	4b2b      	ldr	r3, [pc, #172]	; (8101c24 <stabilizeMotors+0x1ec>)
 8101b76:	681b      	ldr	r3, [r3, #0]
 8101b78:	2b00      	cmp	r3, #0
 8101b7a:	d069      	beq.n	8101c50 <stabilizeMotors+0x218>
 8101b7c:	4b2c      	ldr	r3, [pc, #176]	; (8101c30 <stabilizeMotors+0x1f8>)
 8101b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101b82:	f04f 0200 	mov.w	r2, #0
 8101b86:	4b2f      	ldr	r3, [pc, #188]	; (8101c44 <stabilizeMotors+0x20c>)
 8101b88:	f7ff f844 	bl	8100c14 <__aeabi_dcmpge>
 8101b8c:	4603      	mov	r3, r0
 8101b8e:	2b00      	cmp	r3, #0
 8101b90:	d05e      	beq.n	8101c50 <stabilizeMotors+0x218>
 8101b92:	4b27      	ldr	r3, [pc, #156]	; (8101c30 <stabilizeMotors+0x1f8>)
 8101b94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101b98:	f04f 0200 	mov.w	r2, #0
 8101b9c:	4b2a      	ldr	r3, [pc, #168]	; (8101c48 <stabilizeMotors+0x210>)
 8101b9e:	f7ff f82f 	bl	8100c00 <__aeabi_dcmple>
 8101ba2:	4603      	mov	r3, r0
 8101ba4:	2b00      	cmp	r3, #0
 8101ba6:	d053      	beq.n	8101c50 <stabilizeMotors+0x218>
 8101ba8:	4b24      	ldr	r3, [pc, #144]	; (8101c3c <stabilizeMotors+0x204>)
 8101baa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101bae:	f04f 0200 	mov.w	r2, #0
 8101bb2:	4b24      	ldr	r3, [pc, #144]	; (8101c44 <stabilizeMotors+0x20c>)
 8101bb4:	f7ff f82e 	bl	8100c14 <__aeabi_dcmpge>
 8101bb8:	4603      	mov	r3, r0
 8101bba:	2b00      	cmp	r3, #0
 8101bbc:	d048      	beq.n	8101c50 <stabilizeMotors+0x218>
 8101bbe:	4b1f      	ldr	r3, [pc, #124]	; (8101c3c <stabilizeMotors+0x204>)
 8101bc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8101bc4:	f04f 0200 	mov.w	r2, #0
 8101bc8:	4b1f      	ldr	r3, [pc, #124]	; (8101c48 <stabilizeMotors+0x210>)
 8101bca:	f7ff f819 	bl	8100c00 <__aeabi_dcmple>
 8101bce:	4603      	mov	r3, r0
 8101bd0:	2b00      	cmp	r3, #0
 8101bd2:	d03d      	beq.n	8101c50 <stabilizeMotors+0x218>
	{
		virtualInputs[3] = PID_Controller(&YawPID, yaw, yaw_setpoint);
 8101bd4:	4b0f      	ldr	r3, [pc, #60]	; (8101c14 <stabilizeMotors+0x1dc>)
 8101bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bda:	4610      	mov	r0, r2
 8101bdc:	4619      	mov	r1, r3
 8101bde:	f7ff f88b 	bl	8100cf8 <__aeabi_d2f>
 8101be2:	4604      	mov	r4, r0
 8101be4:	4b0d      	ldr	r3, [pc, #52]	; (8101c1c <stabilizeMotors+0x1e4>)
 8101be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bea:	4610      	mov	r0, r2
 8101bec:	4619      	mov	r1, r3
 8101bee:	f7ff f883 	bl	8100cf8 <__aeabi_d2f>
 8101bf2:	4603      	mov	r3, r0
 8101bf4:	ee00 3a90 	vmov	s1, r3
 8101bf8:	ee00 4a10 	vmov	s0, r4
 8101bfc:	4813      	ldr	r0, [pc, #76]	; (8101c4c <stabilizeMotors+0x214>)
 8101bfe:	f7ff fcf2 	bl	81015e6 <PID_Controller>
 8101c02:	eef0 7a40 	vmov.f32	s15, s0
 8101c06:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8101c0a:	e024      	b.n	8101c56 <stabilizeMotors+0x21e>
 8101c0c:	100004b4 	.word	0x100004b4
 8101c10:	10000558 	.word	0x10000558
 8101c14:	100004c8 	.word	0x100004c8
 8101c18:	10000548 	.word	0x10000548
 8101c1c:	10000550 	.word	0x10000550
 8101c20:	40768000 	.word	0x40768000
 8101c24:	1000055c 	.word	0x1000055c
 8101c28:	3ff00000 	.word	0x3ff00000
 8101c2c:	41100000 	.word	0x41100000
 8101c30:	100004b8 	.word	0x100004b8
 8101c34:	00000000 	.word	0x00000000
 8101c38:	100004f4 	.word	0x100004f4
 8101c3c:	100004c0 	.word	0x100004c0
 8101c40:	100004d0 	.word	0x100004d0
 8101c44:	c0280000 	.word	0xc0280000
 8101c48:	40280000 	.word	0x40280000
 8101c4c:	10000518 	.word	0x10000518
	}
	else
	{
		virtualInputs[3] = 0;
 8101c50:	f04f 0300 	mov.w	r3, #0
 8101c54:	65bb      	str	r3, [r7, #88]	; 0x58
	}

	//virtualInputs[3] = (flag_control) ? PID_Controller(&YawPID, yaw, yaw_setpoint) : 0;

	float* Speeds;
	Speeds = SpeedCompute(virtualInputs);
 8101c56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101c5a:	4618      	mov	r0, r3
 8101c5c:	f7ff fd3c 	bl	81016d8 <SpeedCompute>
 8101c60:	66f8      	str	r0, [r7, #108]	; 0x6c

	//Sono stati messi degli offset nel tentativo di bilanciare se spinte dei due motori
	float avgMotor1 = map(*(Speeds+0)); //+ 0.04+ 0.019;
 8101c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101c64:	edd3 7a00 	vldr	s15, [r3]
 8101c68:	eeb0 0a67 	vmov.f32	s0, s15
 8101c6c:	f000 fff4 	bl	8102c58 <map>
 8101c70:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
	float avgMotor2 = map(*(Speeds+1)); //+ 0.0295;
 8101c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101c76:	3304      	adds	r3, #4
 8101c78:	edd3 7a00 	vldr	s15, [r3]
 8101c7c:	eeb0 0a67 	vmov.f32	s0, s15
 8101c80:	f000 ffea 	bl	8102c58 <map>
 8101c84:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
	float avgMotor3 = map(*(Speeds+2)); //- 0.0295;
 8101c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101c8a:	3308      	adds	r3, #8
 8101c8c:	edd3 7a00 	vldr	s15, [r3]
 8101c90:	eeb0 0a67 	vmov.f32	s0, s15
 8101c94:	f000 ffe0 	bl	8102c58 <map>
 8101c98:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
	float avgMotor4 = map(*(Speeds+3)); //- 0.0295;
 8101c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101c9e:	330c      	adds	r3, #12
 8101ca0:	edd3 7a00 	vldr	s15, [r3]
 8101ca4:	eeb0 0a67 	vmov.f32	s0, s15
 8101ca8:	f000 ffd6 	bl	8102c58 <map>
 8101cac:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

	if(flag_print)
 8101cb0:	4b54      	ldr	r3, [pc, #336]	; (8101e04 <stabilizeMotors+0x3cc>)
 8101cb2:	681b      	ldr	r3, [r3, #0]
 8101cb4:	2b00      	cmp	r3, #0
 8101cb6:	f000 8093 	beq.w	8101de0 <stabilizeMotors+0x3a8>
	{
	  printf("avgMotor1: %.2f\r\n"
 8101cba:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8101cbc:	f7fe fccc 	bl	8100658 <__aeabi_f2d>
 8101cc0:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8101cc4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8101cc6:	f7fe fcc7 	bl	8100658 <__aeabi_f2d>
 8101cca:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8101cce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8101cd0:	f7fe fcc2 	bl	8100658 <__aeabi_f2d>
 8101cd4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8101cd8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8101cda:	f7fe fcbd 	bl	8100658 <__aeabi_f2d>
 8101cde:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			  "yaw: %f\r\n"
			  "rif_yaw: %d\r\n"
			  "yaw_setpoint: %.2f\r\n"
			  "flag_control: %d\r\n"
			  "Virtual Inputs: %f, %f, %f, %f\r\n\n",
			  avgMotor1, avgMotor2, avgMotor3, avgMotor4, Speeds[0], Speeds[1], Speeds[2], Speeds[3],
 8101ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101ce4:	681b      	ldr	r3, [r3, #0]
	  printf("avgMotor1: %.2f\r\n"
 8101ce6:	4618      	mov	r0, r3
 8101ce8:	f7fe fcb6 	bl	8100658 <__aeabi_f2d>
 8101cec:	e9c7 0108 	strd	r0, r1, [r7, #32]
			  avgMotor1, avgMotor2, avgMotor3, avgMotor4, Speeds[0], Speeds[1], Speeds[2], Speeds[3],
 8101cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101cf2:	3304      	adds	r3, #4
 8101cf4:	681b      	ldr	r3, [r3, #0]
	  printf("avgMotor1: %.2f\r\n"
 8101cf6:	4618      	mov	r0, r3
 8101cf8:	f7fe fcae 	bl	8100658 <__aeabi_f2d>
 8101cfc:	e9c7 0106 	strd	r0, r1, [r7, #24]
			  avgMotor1, avgMotor2, avgMotor3, avgMotor4, Speeds[0], Speeds[1], Speeds[2], Speeds[3],
 8101d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101d02:	3308      	adds	r3, #8
 8101d04:	681b      	ldr	r3, [r3, #0]
	  printf("avgMotor1: %.2f\r\n"
 8101d06:	4618      	mov	r0, r3
 8101d08:	f7fe fca6 	bl	8100658 <__aeabi_f2d>
 8101d0c:	e9c7 0104 	strd	r0, r1, [r7, #16]
			  avgMotor1, avgMotor2, avgMotor3, avgMotor4, Speeds[0], Speeds[1], Speeds[2], Speeds[3],
 8101d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8101d12:	330c      	adds	r3, #12
 8101d14:	681b      	ldr	r3, [r3, #0]
	  printf("avgMotor1: %.2f\r\n"
 8101d16:	4618      	mov	r0, r3
 8101d18:	f7fe fc9e 	bl	8100658 <__aeabi_f2d>
 8101d1c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8101d20:	4b39      	ldr	r3, [pc, #228]	; (8101e08 <stabilizeMotors+0x3d0>)
 8101d22:	ed93 bb00 	vldr	d11, [r3]
 8101d26:	4b39      	ldr	r3, [pc, #228]	; (8101e0c <stabilizeMotors+0x3d4>)
 8101d28:	ed93 ab00 	vldr	d10, [r3]
 8101d2c:	4b38      	ldr	r3, [pc, #224]	; (8101e10 <stabilizeMotors+0x3d8>)
 8101d2e:	ed93 9b00 	vldr	d9, [r3]
 8101d32:	4b38      	ldr	r3, [pc, #224]	; (8101e14 <stabilizeMotors+0x3dc>)
 8101d34:	681b      	ldr	r3, [r3, #0]
 8101d36:	607b      	str	r3, [r7, #4]
 8101d38:	4b37      	ldr	r3, [pc, #220]	; (8101e18 <stabilizeMotors+0x3e0>)
 8101d3a:	ed93 8b00 	vldr	d8, [r3]
 8101d3e:	4b37      	ldr	r3, [pc, #220]	; (8101e1c <stabilizeMotors+0x3e4>)
 8101d40:	681e      	ldr	r6, [r3, #0]
			  roll, pitch, yaw, rif_yaw, yaw_setpoint, flag_control,
			  virtualInputs[0],virtualInputs[1],virtualInputs[2],virtualInputs[3]);
 8101d42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	  printf("avgMotor1: %.2f\r\n"
 8101d44:	4618      	mov	r0, r3
 8101d46:	f7fe fc87 	bl	8100658 <__aeabi_f2d>
 8101d4a:	4682      	mov	sl, r0
 8101d4c:	468b      	mov	fp, r1
			  virtualInputs[0],virtualInputs[1],virtualInputs[2],virtualInputs[3]);
 8101d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
	  printf("avgMotor1: %.2f\r\n"
 8101d50:	4618      	mov	r0, r3
 8101d52:	f7fe fc81 	bl	8100658 <__aeabi_f2d>
 8101d56:	4680      	mov	r8, r0
 8101d58:	4689      	mov	r9, r1
			  virtualInputs[0],virtualInputs[1],virtualInputs[2],virtualInputs[3]);
 8101d5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	  printf("avgMotor1: %.2f\r\n"
 8101d5c:	4618      	mov	r0, r3
 8101d5e:	f7fe fc7b 	bl	8100658 <__aeabi_f2d>
 8101d62:	4604      	mov	r4, r0
 8101d64:	460d      	mov	r5, r1
			  virtualInputs[0],virtualInputs[1],virtualInputs[2],virtualInputs[3]);
 8101d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
	  printf("avgMotor1: %.2f\r\n"
 8101d68:	4618      	mov	r0, r3
 8101d6a:	f7fe fc75 	bl	8100658 <__aeabi_f2d>
 8101d6e:	4602      	mov	r2, r0
 8101d70:	460b      	mov	r3, r1
 8101d72:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8101d76:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8101d7a:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
 8101d7e:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 8101d82:	9618      	str	r6, [sp, #96]	; 0x60
 8101d84:	ed8d 8b16 	vstr	d8, [sp, #88]	; 0x58
 8101d88:	687b      	ldr	r3, [r7, #4]
 8101d8a:	9314      	str	r3, [sp, #80]	; 0x50
 8101d8c:	ed8d 9b12 	vstr	d9, [sp, #72]	; 0x48
 8101d90:	ed8d ab10 	vstr	d10, [sp, #64]	; 0x40
 8101d94:	ed8d bb0e 	vstr	d11, [sp, #56]	; 0x38
 8101d98:	ed97 7b02 	vldr	d7, [r7, #8]
 8101d9c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8101da0:	ed97 7b04 	vldr	d7, [r7, #16]
 8101da4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8101da8:	ed97 7b06 	vldr	d7, [r7, #24]
 8101dac:	ed8d 7b08 	vstr	d7, [sp, #32]
 8101db0:	ed97 7b08 	vldr	d7, [r7, #32]
 8101db4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8101db8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8101dbc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8101dc0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8101dc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8101dc8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8101dcc:	ed8d 7b00 	vstr	d7, [sp]
 8101dd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8101dd4:	4812      	ldr	r0, [pc, #72]	; (8101e20 <stabilizeMotors+0x3e8>)
 8101dd6:	f008 fe99 	bl	810ab0c <iprintf>
	  flag_print=0;
 8101dda:	4b0a      	ldr	r3, [pc, #40]	; (8101e04 <stabilizeMotors+0x3cc>)
 8101ddc:	2200      	movs	r2, #0
 8101dde:	601a      	str	r2, [r3, #0]
	}

	setPwm(avgMotor1, avgMotor2, avgMotor3, avgMotor4);
 8101de0:	edd7 1a17 	vldr	s3, [r7, #92]	; 0x5c
 8101de4:	ed97 1a18 	vldr	s2, [r7, #96]	; 0x60
 8101de8:	edd7 0a19 	vldr	s1, [r7, #100]	; 0x64
 8101dec:	ed97 0a1a 	vldr	s0, [r7, #104]	; 0x68
 8101df0:	f000 fdc2 	bl	8102978 <setPwm>
}
 8101df4:	bf00      	nop
 8101df6:	3774      	adds	r7, #116	; 0x74
 8101df8:	46bd      	mov	sp, r7
 8101dfa:	ecbd 8b08 	vpop	{d8-d11}
 8101dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8101e02:	bf00      	nop
 8101e04:	100004a8 	.word	0x100004a8
 8101e08:	100004b8 	.word	0x100004b8
 8101e0c:	100004c0 	.word	0x100004c0
 8101e10:	100004c8 	.word	0x100004c8
 8101e14:	100004b4 	.word	0x100004b4
 8101e18:	10000550 	.word	0x10000550
 8101e1c:	1000055c 	.word	0x1000055c
 8101e20:	0810e72c 	.word	0x0810e72c

08101e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101e24:	b5b0      	push	{r4, r5, r7, lr}
 8101e26:	b082      	sub	sp, #8
 8101e28:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101e2a:	4ba9      	ldr	r3, [pc, #676]	; (81020d0 <main+0x2ac>)
 8101e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e30:	4aa7      	ldr	r2, [pc, #668]	; (81020d0 <main+0x2ac>)
 8101e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8101e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101e3a:	4ba5      	ldr	r3, [pc, #660]	; (81020d0 <main+0x2ac>)
 8101e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8101e44:	607b      	str	r3, [r7, #4]
 8101e46:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e48:	2001      	movs	r0, #1
 8101e4a:	f001 feb5 	bl	8103bb8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101e4e:	f002 fd63 	bl	8104918 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101e52:	2201      	movs	r2, #1
 8101e54:	2102      	movs	r1, #2
 8101e56:	2000      	movs	r0, #0
 8101e58:	f002 fce4 	bl	8104824 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101e5c:	4b9d      	ldr	r3, [pc, #628]	; (81020d4 <main+0x2b0>)
 8101e5e:	681b      	ldr	r3, [r3, #0]
 8101e60:	091b      	lsrs	r3, r3, #4
 8101e62:	f003 030f 	and.w	r3, r3, #15
 8101e66:	2b07      	cmp	r3, #7
 8101e68:	d108      	bne.n	8101e7c <main+0x58>
 8101e6a:	4b9b      	ldr	r3, [pc, #620]	; (81020d8 <main+0x2b4>)
 8101e6c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8101e70:	4a99      	ldr	r2, [pc, #612]	; (81020d8 <main+0x2b4>)
 8101e72:	f043 0301 	orr.w	r3, r3, #1
 8101e76:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8101e7a:	e007      	b.n	8101e8c <main+0x68>
 8101e7c:	4b96      	ldr	r3, [pc, #600]	; (81020d8 <main+0x2b4>)
 8101e7e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8101e82:	4a95      	ldr	r2, [pc, #596]	; (81020d8 <main+0x2b4>)
 8101e84:	f043 0301 	orr.w	r3, r3, #1
 8101e88:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101e8c:	f001 face 	bl	810342c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8101e90:	f000 fc0a 	bl	81026a8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8101e94:	f000 f994 	bl	81021c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8101e98:	f000 fa84 	bl	81023a4 <MX_TIM3_Init>
  MX_TIM2_Init();
 8101e9c:	f000 f9e4 	bl	8102268 <MX_TIM2_Init>
  MX_TIM5_Init();
 8101ea0:	f000 fb18 	bl	81024d4 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8101ea4:	f000 fbb4 	bl	8102610 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8101ea8:	f000 f94a 	bl	8102140 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8101eac:	488b      	ldr	r0, [pc, #556]	; (81020dc <main+0x2b8>)
 8101eae:	f004 fd9d 	bl	81069ec <HAL_TIM_Base_Start_IT>

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8101eb2:	2100      	movs	r1, #0
 8101eb4:	488a      	ldr	r0, [pc, #552]	; (81020e0 <main+0x2bc>)
 8101eb6:	f005 f8e7 	bl	8107088 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8101eba:	2104      	movs	r1, #4
 8101ebc:	4888      	ldr	r0, [pc, #544]	; (81020e0 <main+0x2bc>)
 8101ebe:	f004 ffdf 	bl	8106e80 <HAL_TIM_IC_Start>

  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8101ec2:	2100      	movs	r1, #0
 8101ec4:	4887      	ldr	r0, [pc, #540]	; (81020e4 <main+0x2c0>)
 8101ec6:	f004 fe6b 	bl	8106ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8101eca:	2104      	movs	r1, #4
 8101ecc:	4885      	ldr	r0, [pc, #532]	; (81020e4 <main+0x2c0>)
 8101ece:	f004 fe67 	bl	8106ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8101ed2:	2108      	movs	r1, #8
 8101ed4:	4883      	ldr	r0, [pc, #524]	; (81020e4 <main+0x2c0>)
 8101ed6:	f004 fe63 	bl	8106ba0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_4);
 8101eda:	210c      	movs	r1, #12
 8101edc:	4881      	ldr	r0, [pc, #516]	; (81020e4 <main+0x2c0>)
 8101ede:	f004 fe5f 	bl	8106ba0 <HAL_TIM_PWM_Start>

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_1);
 8101ee2:	2100      	movs	r1, #0
 8101ee4:	4880      	ldr	r0, [pc, #512]	; (81020e8 <main+0x2c4>)
 8101ee6:	f005 f8cf 	bl	8107088 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_2);
 8101eea:	2104      	movs	r1, #4
 8101eec:	487e      	ldr	r0, [pc, #504]	; (81020e8 <main+0x2c4>)
 8101eee:	f004 ffc7 	bl	8106e80 <HAL_TIM_IC_Start>

  bno055_assignI2C(&hi2c1);
 8101ef2:	487e      	ldr	r0, [pc, #504]	; (81020ec <main+0x2c8>)
 8101ef4:	f7ff f91c 	bl	8101130 <bno055_assignI2C>
  bno055_init();
 8101ef8:	f7ff f9d0 	bl	810129c <bno055_init>
  bno055_setOperationModeNDOF();
 8101efc:	f7ff f9c7 	bl	810128e <bno055_setOperationModeNDOF>

  PID_Init(&PitchPID, kpp, kip, kdp, dt, -1.3, 1.3);
 8101f00:	4b7b      	ldr	r3, [pc, #492]	; (81020f0 <main+0x2cc>)
 8101f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f06:	4610      	mov	r0, r2
 8101f08:	4619      	mov	r1, r3
 8101f0a:	f7fe fef5 	bl	8100cf8 <__aeabi_d2f>
 8101f0e:	4604      	mov	r4, r0
 8101f10:	4b78      	ldr	r3, [pc, #480]	; (81020f4 <main+0x2d0>)
 8101f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f16:	4610      	mov	r0, r2
 8101f18:	4619      	mov	r1, r3
 8101f1a:	f7fe feed 	bl	8100cf8 <__aeabi_d2f>
 8101f1e:	4605      	mov	r5, r0
 8101f20:	4b75      	ldr	r3, [pc, #468]	; (81020f8 <main+0x2d4>)
 8101f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f26:	4610      	mov	r0, r2
 8101f28:	4619      	mov	r1, r3
 8101f2a:	f7fe fee5 	bl	8100cf8 <__aeabi_d2f>
 8101f2e:	4602      	mov	r2, r0
 8101f30:	4b72      	ldr	r3, [pc, #456]	; (81020fc <main+0x2d8>)
 8101f32:	edd3 7a00 	vldr	s15, [r3]
 8101f36:	eddf 2a72 	vldr	s5, [pc, #456]	; 8102100 <main+0x2dc>
 8101f3a:	ed9f 2a72 	vldr	s4, [pc, #456]	; 8102104 <main+0x2e0>
 8101f3e:	eef0 1a67 	vmov.f32	s3, s15
 8101f42:	ee01 2a10 	vmov	s2, r2
 8101f46:	ee00 5a90 	vmov	s1, r5
 8101f4a:	ee00 4a10 	vmov	s0, r4
 8101f4e:	486e      	ldr	r0, [pc, #440]	; (8102108 <main+0x2e4>)
 8101f50:	f7ff fb15 	bl	810157e <PID_Init>
  PID_Init(&RollPID, kpr, kir, kdr, dt, -1.3, 1.3);
 8101f54:	4b6d      	ldr	r3, [pc, #436]	; (810210c <main+0x2e8>)
 8101f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f5a:	4610      	mov	r0, r2
 8101f5c:	4619      	mov	r1, r3
 8101f5e:	f7fe fecb 	bl	8100cf8 <__aeabi_d2f>
 8101f62:	4604      	mov	r4, r0
 8101f64:	4b6a      	ldr	r3, [pc, #424]	; (8102110 <main+0x2ec>)
 8101f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f6a:	4610      	mov	r0, r2
 8101f6c:	4619      	mov	r1, r3
 8101f6e:	f7fe fec3 	bl	8100cf8 <__aeabi_d2f>
 8101f72:	4605      	mov	r5, r0
 8101f74:	4b67      	ldr	r3, [pc, #412]	; (8102114 <main+0x2f0>)
 8101f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101f7a:	4610      	mov	r0, r2
 8101f7c:	4619      	mov	r1, r3
 8101f7e:	f7fe febb 	bl	8100cf8 <__aeabi_d2f>
 8101f82:	4602      	mov	r2, r0
 8101f84:	4b5d      	ldr	r3, [pc, #372]	; (81020fc <main+0x2d8>)
 8101f86:	edd3 7a00 	vldr	s15, [r3]
 8101f8a:	eddf 2a5d 	vldr	s5, [pc, #372]	; 8102100 <main+0x2dc>
 8101f8e:	ed9f 2a5d 	vldr	s4, [pc, #372]	; 8102104 <main+0x2e0>
 8101f92:	eef0 1a67 	vmov.f32	s3, s15
 8101f96:	ee01 2a10 	vmov	s2, r2
 8101f9a:	ee00 5a90 	vmov	s1, r5
 8101f9e:	ee00 4a10 	vmov	s0, r4
 8101fa2:	485d      	ldr	r0, [pc, #372]	; (8102118 <main+0x2f4>)
 8101fa4:	f7ff faeb 	bl	810157e <PID_Init>
  PID_Init(&YawPID, kpy, kiy, kpy, dt, -1.3, 1.3); //Valori di prova
 8101fa8:	4b5c      	ldr	r3, [pc, #368]	; (810211c <main+0x2f8>)
 8101faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fae:	4610      	mov	r0, r2
 8101fb0:	4619      	mov	r1, r3
 8101fb2:	f7fe fea1 	bl	8100cf8 <__aeabi_d2f>
 8101fb6:	4604      	mov	r4, r0
 8101fb8:	4b59      	ldr	r3, [pc, #356]	; (8102120 <main+0x2fc>)
 8101fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fbe:	4610      	mov	r0, r2
 8101fc0:	4619      	mov	r1, r3
 8101fc2:	f7fe fe99 	bl	8100cf8 <__aeabi_d2f>
 8101fc6:	4605      	mov	r5, r0
 8101fc8:	4b54      	ldr	r3, [pc, #336]	; (810211c <main+0x2f8>)
 8101fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fce:	4610      	mov	r0, r2
 8101fd0:	4619      	mov	r1, r3
 8101fd2:	f7fe fe91 	bl	8100cf8 <__aeabi_d2f>
 8101fd6:	4602      	mov	r2, r0
 8101fd8:	4b48      	ldr	r3, [pc, #288]	; (81020fc <main+0x2d8>)
 8101fda:	edd3 7a00 	vldr	s15, [r3]
 8101fde:	eddf 2a48 	vldr	s5, [pc, #288]	; 8102100 <main+0x2dc>
 8101fe2:	ed9f 2a48 	vldr	s4, [pc, #288]	; 8102104 <main+0x2e0>
 8101fe6:	eef0 1a67 	vmov.f32	s3, s15
 8101fea:	ee01 2a10 	vmov	s2, r2
 8101fee:	ee00 5a90 	vmov	s1, r5
 8101ff2:	ee00 4a10 	vmov	s0, r4
 8101ff6:	484b      	ldr	r0, [pc, #300]	; (8102124 <main+0x300>)
 8101ff8:	f7ff fac1 	bl	810157e <PID_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flagTim1)
 8101ffc:	4b4a      	ldr	r3, [pc, #296]	; (8102128 <main+0x304>)
 8101ffe:	681b      	ldr	r3, [r3, #0]
 8102000:	2b00      	cmp	r3, #0
 8102002:	d0fb      	beq.n	8101ffc <main+0x1d8>
	  {
		if(calibrateFlag)
 8102004:	4b49      	ldr	r3, [pc, #292]	; (810212c <main+0x308>)
 8102006:	681b      	ldr	r3, [r3, #0]
 8102008:	2b00      	cmp	r3, #0
 810200a:	d004      	beq.n	8102016 <main+0x1f2>
		{
			calibrateFlag = 0;
 810200c:	4b47      	ldr	r3, [pc, #284]	; (810212c <main+0x308>)
 810200e:	2200      	movs	r2, #0
 8102010:	601a      	str	r2, [r3, #0]
			ESC_Calibrate(); //ATTACCA LA BATTERIA DOPO AVER SETTATO IL PWM PER GLI ESC = LIMIT_DUTY
 8102012:	f000 fdf7 	bl	8102c04 <ESC_Calibrate>
		}

		if(final)
 8102016:	4b46      	ldr	r3, [pc, #280]	; (8102130 <main+0x30c>)
 8102018:	681b      	ldr	r3, [r3, #0]
 810201a:	2b00      	cmp	r3, #0
 810201c:	d0ee      	beq.n	8101ffc <main+0x1d8>
		{
			switch (i) //Vedere come mettere più istruzioni in un singolo case dello switch
 810201e:	4b45      	ldr	r3, [pc, #276]	; (8102134 <main+0x310>)
 8102020:	681b      	ldr	r3, [r3, #0]
 8102022:	2b02      	cmp	r3, #2
 8102024:	d02c      	beq.n	8102080 <main+0x25c>
 8102026:	2b02      	cmp	r3, #2
 8102028:	dc3d      	bgt.n	81020a6 <main+0x282>
 810202a:	2b00      	cmp	r3, #0
 810202c:	d002      	beq.n	8102034 <main+0x210>
 810202e:	2b01      	cmp	r3, #1
 8102030:	d013      	beq.n	810205a <main+0x236>
 8102032:	e038      	b.n	81020a6 <main+0x282>
			{
				case 0: // Stato 0: Motore spento
					stopMotors();
 8102034:	f000 fe84 	bl	8102d40 <stopMotors>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //Led verde
 8102038:	2200      	movs	r2, #0
 810203a:	2101      	movs	r1, #1
 810203c:	483e      	ldr	r0, [pc, #248]	; (8102138 <main+0x314>)
 810203e:	f001 fda1 	bl	8103b84 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET); //Led giallo
 8102042:	2200      	movs	r2, #0
 8102044:	2102      	movs	r1, #2
 8102046:	483d      	ldr	r0, [pc, #244]	; (810213c <main+0x318>)
 8102048:	f001 fd9c 	bl	8103b84 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Led rosso
 810204c:	2201      	movs	r2, #1
 810204e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8102052:	4839      	ldr	r0, [pc, #228]	; (8102138 <main+0x314>)
 8102054:	f001 fd96 	bl	8103b84 <HAL_GPIO_WritePin>
					break;
 8102058:	e038      	b.n	81020cc <main+0x2a8>

				case 1: // Stato 1: Motore in armamento
					armMotors();
 810205a:	f000 fe61 	bl	8102d20 <armMotors>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //Led verde
 810205e:	2200      	movs	r2, #0
 8102060:	2101      	movs	r1, #1
 8102062:	4835      	ldr	r0, [pc, #212]	; (8102138 <main+0x314>)
 8102064:	f001 fd8e 	bl	8103b84 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_SET); //Led giallo
 8102068:	2201      	movs	r2, #1
 810206a:	2102      	movs	r1, #2
 810206c:	4833      	ldr	r0, [pc, #204]	; (810213c <main+0x318>)
 810206e:	f001 fd89 	bl	8103b84 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Led rosso
 8102072:	2200      	movs	r2, #0
 8102074:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8102078:	482f      	ldr	r0, [pc, #188]	; (8102138 <main+0x314>)
 810207a:	f001 fd83 	bl	8103b84 <HAL_GPIO_WritePin>
					break;
 810207e:	e025      	b.n	81020cc <main+0x2a8>

				case 2: // Stato 2: Motore in esecuzione
					stabilizeMotors();
 8102080:	f7ff fcda 	bl	8101a38 <stabilizeMotors>
					  printf("Speed13: %.2f\r\n", dutyMinYaw);
					  flag_print=0;
					}
					*/

					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Led verde
 8102084:	2201      	movs	r2, #1
 8102086:	2101      	movs	r1, #1
 8102088:	482b      	ldr	r0, [pc, #172]	; (8102138 <main+0x314>)
 810208a:	f001 fd7b 	bl	8103b84 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET); //Led giallo
 810208e:	2200      	movs	r2, #0
 8102090:	2102      	movs	r1, #2
 8102092:	482a      	ldr	r0, [pc, #168]	; (810213c <main+0x318>)
 8102094:	f001 fd76 	bl	8103b84 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET); //Led rosso
 8102098:	2200      	movs	r2, #0
 810209a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 810209e:	4826      	ldr	r0, [pc, #152]	; (8102138 <main+0x314>)
 81020a0:	f001 fd70 	bl	8103b84 <HAL_GPIO_WritePin>
					break;
 81020a4:	e012      	b.n	81020cc <main+0x2a8>

				default: // Motori fermi
					stopMotors();
 81020a6:	f000 fe4b 	bl	8102d40 <stopMotors>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); //Led verde
 81020aa:	2200      	movs	r2, #0
 81020ac:	2101      	movs	r1, #1
 81020ae:	4822      	ldr	r0, [pc, #136]	; (8102138 <main+0x314>)
 81020b0:	f001 fd68 	bl	8103b84 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET); //Led giallo
 81020b4:	2200      	movs	r2, #0
 81020b6:	2102      	movs	r1, #2
 81020b8:	4820      	ldr	r0, [pc, #128]	; (810213c <main+0x318>)
 81020ba:	f001 fd63 	bl	8103b84 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET); //Led rosso
 81020be:	2201      	movs	r2, #1
 81020c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 81020c4:	481c      	ldr	r0, [pc, #112]	; (8102138 <main+0x314>)
 81020c6:	f001 fd5d 	bl	8103b84 <HAL_GPIO_WritePin>
					break;
 81020ca:	bf00      	nop
	  if(flagTim1)
 81020cc:	e796      	b.n	8101ffc <main+0x1d8>
 81020ce:	bf00      	nop
 81020d0:	58024400 	.word	0x58024400
 81020d4:	e000ed00 	.word	0xe000ed00
 81020d8:	58026400 	.word	0x58026400
 81020dc:	100002dc 	.word	0x100002dc
 81020e0:	10000328 	.word	0x10000328
 81020e4:	10000374 	.word	0x10000374
 81020e8:	100003c0 	.word	0x100003c0
 81020ec:	10000288 	.word	0x10000288
 81020f0:	10000048 	.word	0x10000048
 81020f4:	10000050 	.word	0x10000050
 81020f8:	10000058 	.word	0x10000058
 81020fc:	1000002c 	.word	0x1000002c
 8102100:	3fa66666 	.word	0x3fa66666
 8102104:	bfa66666 	.word	0xbfa66666
 8102108:	100004d0 	.word	0x100004d0
 810210c:	10000030 	.word	0x10000030
 8102110:	10000038 	.word	0x10000038
 8102114:	10000040 	.word	0x10000040
 8102118:	100004f4 	.word	0x100004f4
 810211c:	10000060 	.word	0x10000060
 8102120:	10000540 	.word	0x10000540
 8102124:	10000518 	.word	0x10000518
 8102128:	100004a4 	.word	0x100004a4
 810212c:	100004a0 	.word	0x100004a0
 8102130:	10000028 	.word	0x10000028
 8102134:	100004b0 	.word	0x100004b0
 8102138:	58020400 	.word	0x58020400
 810213c:	58021000 	.word	0x58021000

08102140 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8102140:	b580      	push	{r7, lr}
 8102142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8102144:	4b1b      	ldr	r3, [pc, #108]	; (81021b4 <MX_I2C1_Init+0x74>)
 8102146:	4a1c      	ldr	r2, [pc, #112]	; (81021b8 <MX_I2C1_Init+0x78>)
 8102148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 810214a:	4b1a      	ldr	r3, [pc, #104]	; (81021b4 <MX_I2C1_Init+0x74>)
 810214c:	4a1b      	ldr	r2, [pc, #108]	; (81021bc <MX_I2C1_Init+0x7c>)
 810214e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8102150:	4b18      	ldr	r3, [pc, #96]	; (81021b4 <MX_I2C1_Init+0x74>)
 8102152:	2200      	movs	r2, #0
 8102154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8102156:	4b17      	ldr	r3, [pc, #92]	; (81021b4 <MX_I2C1_Init+0x74>)
 8102158:	2201      	movs	r2, #1
 810215a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 810215c:	4b15      	ldr	r3, [pc, #84]	; (81021b4 <MX_I2C1_Init+0x74>)
 810215e:	2200      	movs	r2, #0
 8102160:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8102162:	4b14      	ldr	r3, [pc, #80]	; (81021b4 <MX_I2C1_Init+0x74>)
 8102164:	2200      	movs	r2, #0
 8102166:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8102168:	4b12      	ldr	r3, [pc, #72]	; (81021b4 <MX_I2C1_Init+0x74>)
 810216a:	2200      	movs	r2, #0
 810216c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 810216e:	4b11      	ldr	r3, [pc, #68]	; (81021b4 <MX_I2C1_Init+0x74>)
 8102170:	2200      	movs	r2, #0
 8102172:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8102174:	4b0f      	ldr	r3, [pc, #60]	; (81021b4 <MX_I2C1_Init+0x74>)
 8102176:	2200      	movs	r2, #0
 8102178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 810217a:	480e      	ldr	r0, [pc, #56]	; (81021b4 <MX_I2C1_Init+0x74>)
 810217c:	f001 fd2e 	bl	8103bdc <HAL_I2C_Init>
 8102180:	4603      	mov	r3, r0
 8102182:	2b00      	cmp	r3, #0
 8102184:	d001      	beq.n	810218a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8102186:	f000 fbef 	bl	8102968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 810218a:	2100      	movs	r1, #0
 810218c:	4809      	ldr	r0, [pc, #36]	; (81021b4 <MX_I2C1_Init+0x74>)
 810218e:	f002 fab1 	bl	81046f4 <HAL_I2CEx_ConfigAnalogFilter>
 8102192:	4603      	mov	r3, r0
 8102194:	2b00      	cmp	r3, #0
 8102196:	d001      	beq.n	810219c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8102198:	f000 fbe6 	bl	8102968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 810219c:	2100      	movs	r1, #0
 810219e:	4805      	ldr	r0, [pc, #20]	; (81021b4 <MX_I2C1_Init+0x74>)
 81021a0:	f002 faf3 	bl	810478a <HAL_I2CEx_ConfigDigitalFilter>
 81021a4:	4603      	mov	r3, r0
 81021a6:	2b00      	cmp	r3, #0
 81021a8:	d001      	beq.n	81021ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 81021aa:	f000 fbdd 	bl	8102968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 81021ae:	bf00      	nop
 81021b0:	bd80      	pop	{r7, pc}
 81021b2:	bf00      	nop
 81021b4:	10000288 	.word	0x10000288
 81021b8:	40005400 	.word	0x40005400
 81021bc:	00707cbb 	.word	0x00707cbb

081021c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 81021c0:	b580      	push	{r7, lr}
 81021c2:	b088      	sub	sp, #32
 81021c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81021c6:	f107 0310 	add.w	r3, r7, #16
 81021ca:	2200      	movs	r2, #0
 81021cc:	601a      	str	r2, [r3, #0]
 81021ce:	605a      	str	r2, [r3, #4]
 81021d0:	609a      	str	r2, [r3, #8]
 81021d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81021d4:	1d3b      	adds	r3, r7, #4
 81021d6:	2200      	movs	r2, #0
 81021d8:	601a      	str	r2, [r3, #0]
 81021da:	605a      	str	r2, [r3, #4]
 81021dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 81021de:	4b20      	ldr	r3, [pc, #128]	; (8102260 <MX_TIM1_Init+0xa0>)
 81021e0:	4a20      	ldr	r2, [pc, #128]	; (8102264 <MX_TIM1_Init+0xa4>)
 81021e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 81021e4:	4b1e      	ldr	r3, [pc, #120]	; (8102260 <MX_TIM1_Init+0xa0>)
 81021e6:	223f      	movs	r2, #63	; 0x3f
 81021e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 81021ea:	4b1d      	ldr	r3, [pc, #116]	; (8102260 <MX_TIM1_Init+0xa0>)
 81021ec:	2200      	movs	r2, #0
 81021ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 81021f0:	4b1b      	ldr	r3, [pc, #108]	; (8102260 <MX_TIM1_Init+0xa0>)
 81021f2:	f242 720f 	movw	r2, #9999	; 0x270f
 81021f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81021f8:	4b19      	ldr	r3, [pc, #100]	; (8102260 <MX_TIM1_Init+0xa0>)
 81021fa:	2200      	movs	r2, #0
 81021fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 81021fe:	4b18      	ldr	r3, [pc, #96]	; (8102260 <MX_TIM1_Init+0xa0>)
 8102200:	2200      	movs	r2, #0
 8102202:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102204:	4b16      	ldr	r3, [pc, #88]	; (8102260 <MX_TIM1_Init+0xa0>)
 8102206:	2200      	movs	r2, #0
 8102208:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 810220a:	4815      	ldr	r0, [pc, #84]	; (8102260 <MX_TIM1_Init+0xa0>)
 810220c:	f004 fb96 	bl	810693c <HAL_TIM_Base_Init>
 8102210:	4603      	mov	r3, r0
 8102212:	2b00      	cmp	r3, #0
 8102214:	d001      	beq.n	810221a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8102216:	f000 fba7 	bl	8102968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810221a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810221e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8102220:	f107 0310 	add.w	r3, r7, #16
 8102224:	4619      	mov	r1, r3
 8102226:	480e      	ldr	r0, [pc, #56]	; (8102260 <MX_TIM1_Init+0xa0>)
 8102228:	f005 fb36 	bl	8107898 <HAL_TIM_ConfigClockSource>
 810222c:	4603      	mov	r3, r0
 810222e:	2b00      	cmp	r3, #0
 8102230:	d001      	beq.n	8102236 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8102232:	f000 fb99 	bl	8102968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102236:	2300      	movs	r3, #0
 8102238:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 810223a:	2300      	movs	r3, #0
 810223c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810223e:	2300      	movs	r3, #0
 8102240:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8102242:	1d3b      	adds	r3, r7, #4
 8102244:	4619      	mov	r1, r3
 8102246:	4806      	ldr	r0, [pc, #24]	; (8102260 <MX_TIM1_Init+0xa0>)
 8102248:	f006 fb14 	bl	8108874 <HAL_TIMEx_MasterConfigSynchronization>
 810224c:	4603      	mov	r3, r0
 810224e:	2b00      	cmp	r3, #0
 8102250:	d001      	beq.n	8102256 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8102252:	f000 fb89 	bl	8102968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8102256:	bf00      	nop
 8102258:	3720      	adds	r7, #32
 810225a:	46bd      	mov	sp, r7
 810225c:	bd80      	pop	{r7, pc}
 810225e:	bf00      	nop
 8102260:	100002dc 	.word	0x100002dc
 8102264:	40010000 	.word	0x40010000

08102268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8102268:	b580      	push	{r7, lr}
 810226a:	b090      	sub	sp, #64	; 0x40
 810226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810226e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8102272:	2200      	movs	r2, #0
 8102274:	601a      	str	r2, [r3, #0]
 8102276:	605a      	str	r2, [r3, #4]
 8102278:	609a      	str	r2, [r3, #8]
 810227a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 810227c:	f107 031c 	add.w	r3, r7, #28
 8102280:	2200      	movs	r2, #0
 8102282:	601a      	str	r2, [r3, #0]
 8102284:	605a      	str	r2, [r3, #4]
 8102286:	609a      	str	r2, [r3, #8]
 8102288:	60da      	str	r2, [r3, #12]
 810228a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 810228c:	f107 030c 	add.w	r3, r7, #12
 8102290:	2200      	movs	r2, #0
 8102292:	601a      	str	r2, [r3, #0]
 8102294:	605a      	str	r2, [r3, #4]
 8102296:	609a      	str	r2, [r3, #8]
 8102298:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810229a:	463b      	mov	r3, r7
 810229c:	2200      	movs	r2, #0
 810229e:	601a      	str	r2, [r3, #0]
 81022a0:	605a      	str	r2, [r3, #4]
 81022a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 81022a4:	4b3e      	ldr	r3, [pc, #248]	; (81023a0 <MX_TIM2_Init+0x138>)
 81022a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81022aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64-1;
 81022ac:	4b3c      	ldr	r3, [pc, #240]	; (81023a0 <MX_TIM2_Init+0x138>)
 81022ae:	223f      	movs	r2, #63	; 0x3f
 81022b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81022b2:	4b3b      	ldr	r3, [pc, #236]	; (81023a0 <MX_TIM2_Init+0x138>)
 81022b4:	2200      	movs	r2, #0
 81022b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 81022b8:	4b39      	ldr	r3, [pc, #228]	; (81023a0 <MX_TIM2_Init+0x138>)
 81022ba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 81022be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81022c0:	4b37      	ldr	r3, [pc, #220]	; (81023a0 <MX_TIM2_Init+0x138>)
 81022c2:	2200      	movs	r2, #0
 81022c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81022c6:	4b36      	ldr	r3, [pc, #216]	; (81023a0 <MX_TIM2_Init+0x138>)
 81022c8:	2200      	movs	r2, #0
 81022ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 81022cc:	4834      	ldr	r0, [pc, #208]	; (81023a0 <MX_TIM2_Init+0x138>)
 81022ce:	f004 fb35 	bl	810693c <HAL_TIM_Base_Init>
 81022d2:	4603      	mov	r3, r0
 81022d4:	2b00      	cmp	r3, #0
 81022d6:	d001      	beq.n	81022dc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 81022d8:	f000 fb46 	bl	8102968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81022dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81022e0:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 81022e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81022e6:	4619      	mov	r1, r3
 81022e8:	482d      	ldr	r0, [pc, #180]	; (81023a0 <MX_TIM2_Init+0x138>)
 81022ea:	f005 fad5 	bl	8107898 <HAL_TIM_ConfigClockSource>
 81022ee:	4603      	mov	r3, r0
 81022f0:	2b00      	cmp	r3, #0
 81022f2:	d001      	beq.n	81022f8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 81022f4:	f000 fb38 	bl	8102968 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 81022f8:	4829      	ldr	r0, [pc, #164]	; (81023a0 <MX_TIM2_Init+0x138>)
 81022fa:	f004 fd5f 	bl	8106dbc <HAL_TIM_IC_Init>
 81022fe:	4603      	mov	r3, r0
 8102300:	2b00      	cmp	r3, #0
 8102302:	d001      	beq.n	8102308 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8102304:	f000 fb30 	bl	8102968 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8102308:	2304      	movs	r3, #4
 810230a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 810230c:	2350      	movs	r3, #80	; 0x50
 810230e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8102310:	2300      	movs	r3, #0
 8102312:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8102314:	2300      	movs	r3, #0
 8102316:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8102318:	2300      	movs	r3, #0
 810231a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 810231c:	f107 031c 	add.w	r3, r7, #28
 8102320:	4619      	mov	r1, r3
 8102322:	481f      	ldr	r0, [pc, #124]	; (81023a0 <MX_TIM2_Init+0x138>)
 8102324:	f005 fbb0 	bl	8107a88 <HAL_TIM_SlaveConfigSynchro>
 8102328:	4603      	mov	r3, r0
 810232a:	2b00      	cmp	r3, #0
 810232c:	d001      	beq.n	8102332 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 810232e:	f000 fb1b 	bl	8102968 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8102332:	2300      	movs	r3, #0
 8102334:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8102336:	2301      	movs	r3, #1
 8102338:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 810233a:	2300      	movs	r3, #0
 810233c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 810233e:	2300      	movs	r3, #0
 8102340:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8102342:	f107 030c 	add.w	r3, r7, #12
 8102346:	2200      	movs	r2, #0
 8102348:	4619      	mov	r1, r3
 810234a:	4815      	ldr	r0, [pc, #84]	; (81023a0 <MX_TIM2_Init+0x138>)
 810234c:	f005 f8f3 	bl	8107536 <HAL_TIM_IC_ConfigChannel>
 8102350:	4603      	mov	r3, r0
 8102352:	2b00      	cmp	r3, #0
 8102354:	d001      	beq.n	810235a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8102356:	f000 fb07 	bl	8102968 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 810235a:	2302      	movs	r3, #2
 810235c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 810235e:	2302      	movs	r3, #2
 8102360:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8102362:	f107 030c 	add.w	r3, r7, #12
 8102366:	2204      	movs	r2, #4
 8102368:	4619      	mov	r1, r3
 810236a:	480d      	ldr	r0, [pc, #52]	; (81023a0 <MX_TIM2_Init+0x138>)
 810236c:	f005 f8e3 	bl	8107536 <HAL_TIM_IC_ConfigChannel>
 8102370:	4603      	mov	r3, r0
 8102372:	2b00      	cmp	r3, #0
 8102374:	d001      	beq.n	810237a <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8102376:	f000 faf7 	bl	8102968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 810237a:	2300      	movs	r3, #0
 810237c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810237e:	2300      	movs	r3, #0
 8102380:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8102382:	463b      	mov	r3, r7
 8102384:	4619      	mov	r1, r3
 8102386:	4806      	ldr	r0, [pc, #24]	; (81023a0 <MX_TIM2_Init+0x138>)
 8102388:	f006 fa74 	bl	8108874 <HAL_TIMEx_MasterConfigSynchronization>
 810238c:	4603      	mov	r3, r0
 810238e:	2b00      	cmp	r3, #0
 8102390:	d001      	beq.n	8102396 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8102392:	f000 fae9 	bl	8102968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8102396:	bf00      	nop
 8102398:	3740      	adds	r7, #64	; 0x40
 810239a:	46bd      	mov	sp, r7
 810239c:	bd80      	pop	{r7, pc}
 810239e:	bf00      	nop
 81023a0:	10000328 	.word	0x10000328

081023a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 81023a4:	b580      	push	{r7, lr}
 81023a6:	b08e      	sub	sp, #56	; 0x38
 81023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81023aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 81023ae:	2200      	movs	r2, #0
 81023b0:	601a      	str	r2, [r3, #0]
 81023b2:	605a      	str	r2, [r3, #4]
 81023b4:	609a      	str	r2, [r3, #8]
 81023b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81023b8:	f107 031c 	add.w	r3, r7, #28
 81023bc:	2200      	movs	r2, #0
 81023be:	601a      	str	r2, [r3, #0]
 81023c0:	605a      	str	r2, [r3, #4]
 81023c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 81023c4:	463b      	mov	r3, r7
 81023c6:	2200      	movs	r2, #0
 81023c8:	601a      	str	r2, [r3, #0]
 81023ca:	605a      	str	r2, [r3, #4]
 81023cc:	609a      	str	r2, [r3, #8]
 81023ce:	60da      	str	r2, [r3, #12]
 81023d0:	611a      	str	r2, [r3, #16]
 81023d2:	615a      	str	r2, [r3, #20]
 81023d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 81023d6:	4b3d      	ldr	r3, [pc, #244]	; (81024cc <MX_TIM3_Init+0x128>)
 81023d8:	4a3d      	ldr	r2, [pc, #244]	; (81024d0 <MX_TIM3_Init+0x12c>)
 81023da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64-1;
 81023dc:	4b3b      	ldr	r3, [pc, #236]	; (81024cc <MX_TIM3_Init+0x128>)
 81023de:	223f      	movs	r2, #63	; 0x3f
 81023e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 81023e2:	4b3a      	ldr	r3, [pc, #232]	; (81024cc <MX_TIM3_Init+0x128>)
 81023e4:	2200      	movs	r2, #0
 81023e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 81023e8:	4b38      	ldr	r3, [pc, #224]	; (81024cc <MX_TIM3_Init+0x128>)
 81023ea:	f644 621f 	movw	r2, #19999	; 0x4e1f
 81023ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81023f0:	4b36      	ldr	r3, [pc, #216]	; (81024cc <MX_TIM3_Init+0x128>)
 81023f2:	2200      	movs	r2, #0
 81023f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81023f6:	4b35      	ldr	r3, [pc, #212]	; (81024cc <MX_TIM3_Init+0x128>)
 81023f8:	2200      	movs	r2, #0
 81023fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 81023fc:	4833      	ldr	r0, [pc, #204]	; (81024cc <MX_TIM3_Init+0x128>)
 81023fe:	f004 fa9d 	bl	810693c <HAL_TIM_Base_Init>
 8102402:	4603      	mov	r3, r0
 8102404:	2b00      	cmp	r3, #0
 8102406:	d001      	beq.n	810240c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8102408:	f000 faae 	bl	8102968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810240c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8102410:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8102412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8102416:	4619      	mov	r1, r3
 8102418:	482c      	ldr	r0, [pc, #176]	; (81024cc <MX_TIM3_Init+0x128>)
 810241a:	f005 fa3d 	bl	8107898 <HAL_TIM_ConfigClockSource>
 810241e:	4603      	mov	r3, r0
 8102420:	2b00      	cmp	r3, #0
 8102422:	d001      	beq.n	8102428 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8102424:	f000 faa0 	bl	8102968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8102428:	4828      	ldr	r0, [pc, #160]	; (81024cc <MX_TIM3_Init+0x128>)
 810242a:	f004 fb57 	bl	8106adc <HAL_TIM_PWM_Init>
 810242e:	4603      	mov	r3, r0
 8102430:	2b00      	cmp	r3, #0
 8102432:	d001      	beq.n	8102438 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8102434:	f000 fa98 	bl	8102968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8102438:	2300      	movs	r3, #0
 810243a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810243c:	2300      	movs	r3, #0
 810243e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8102440:	f107 031c 	add.w	r3, r7, #28
 8102444:	4619      	mov	r1, r3
 8102446:	4821      	ldr	r0, [pc, #132]	; (81024cc <MX_TIM3_Init+0x128>)
 8102448:	f006 fa14 	bl	8108874 <HAL_TIMEx_MasterConfigSynchronization>
 810244c:	4603      	mov	r3, r0
 810244e:	2b00      	cmp	r3, #0
 8102450:	d001      	beq.n	8102456 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8102452:	f000 fa89 	bl	8102968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8102456:	2360      	movs	r3, #96	; 0x60
 8102458:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 810245a:	2300      	movs	r3, #0
 810245c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 810245e:	2300      	movs	r3, #0
 8102460:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8102462:	2300      	movs	r3, #0
 8102464:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8102466:	463b      	mov	r3, r7
 8102468:	2200      	movs	r2, #0
 810246a:	4619      	mov	r1, r3
 810246c:	4817      	ldr	r0, [pc, #92]	; (81024cc <MX_TIM3_Init+0x128>)
 810246e:	f005 f8ff 	bl	8107670 <HAL_TIM_PWM_ConfigChannel>
 8102472:	4603      	mov	r3, r0
 8102474:	2b00      	cmp	r3, #0
 8102476:	d001      	beq.n	810247c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8102478:	f000 fa76 	bl	8102968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 810247c:	463b      	mov	r3, r7
 810247e:	2204      	movs	r2, #4
 8102480:	4619      	mov	r1, r3
 8102482:	4812      	ldr	r0, [pc, #72]	; (81024cc <MX_TIM3_Init+0x128>)
 8102484:	f005 f8f4 	bl	8107670 <HAL_TIM_PWM_ConfigChannel>
 8102488:	4603      	mov	r3, r0
 810248a:	2b00      	cmp	r3, #0
 810248c:	d001      	beq.n	8102492 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 810248e:	f000 fa6b 	bl	8102968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8102492:	463b      	mov	r3, r7
 8102494:	2208      	movs	r2, #8
 8102496:	4619      	mov	r1, r3
 8102498:	480c      	ldr	r0, [pc, #48]	; (81024cc <MX_TIM3_Init+0x128>)
 810249a:	f005 f8e9 	bl	8107670 <HAL_TIM_PWM_ConfigChannel>
 810249e:	4603      	mov	r3, r0
 81024a0:	2b00      	cmp	r3, #0
 81024a2:	d001      	beq.n	81024a8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 81024a4:	f000 fa60 	bl	8102968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 81024a8:	463b      	mov	r3, r7
 81024aa:	220c      	movs	r2, #12
 81024ac:	4619      	mov	r1, r3
 81024ae:	4807      	ldr	r0, [pc, #28]	; (81024cc <MX_TIM3_Init+0x128>)
 81024b0:	f005 f8de 	bl	8107670 <HAL_TIM_PWM_ConfigChannel>
 81024b4:	4603      	mov	r3, r0
 81024b6:	2b00      	cmp	r3, #0
 81024b8:	d001      	beq.n	81024be <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 81024ba:	f000 fa55 	bl	8102968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 81024be:	4803      	ldr	r0, [pc, #12]	; (81024cc <MX_TIM3_Init+0x128>)
 81024c0:	f000 fd92 	bl	8102fe8 <HAL_TIM_MspPostInit>

}
 81024c4:	bf00      	nop
 81024c6:	3738      	adds	r7, #56	; 0x38
 81024c8:	46bd      	mov	sp, r7
 81024ca:	bd80      	pop	{r7, pc}
 81024cc:	10000374 	.word	0x10000374
 81024d0:	40000400 	.word	0x40000400

081024d4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 81024d4:	b580      	push	{r7, lr}
 81024d6:	b090      	sub	sp, #64	; 0x40
 81024d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 81024da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 81024de:	2200      	movs	r2, #0
 81024e0:	601a      	str	r2, [r3, #0]
 81024e2:	605a      	str	r2, [r3, #4]
 81024e4:	609a      	str	r2, [r3, #8]
 81024e6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 81024e8:	f107 031c 	add.w	r3, r7, #28
 81024ec:	2200      	movs	r2, #0
 81024ee:	601a      	str	r2, [r3, #0]
 81024f0:	605a      	str	r2, [r3, #4]
 81024f2:	609a      	str	r2, [r3, #8]
 81024f4:	60da      	str	r2, [r3, #12]
 81024f6:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 81024f8:	f107 030c 	add.w	r3, r7, #12
 81024fc:	2200      	movs	r2, #0
 81024fe:	601a      	str	r2, [r3, #0]
 8102500:	605a      	str	r2, [r3, #4]
 8102502:	609a      	str	r2, [r3, #8]
 8102504:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8102506:	463b      	mov	r3, r7
 8102508:	2200      	movs	r2, #0
 810250a:	601a      	str	r2, [r3, #0]
 810250c:	605a      	str	r2, [r3, #4]
 810250e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8102510:	4b3d      	ldr	r3, [pc, #244]	; (8102608 <MX_TIM5_Init+0x134>)
 8102512:	4a3e      	ldr	r2, [pc, #248]	; (810260c <MX_TIM5_Init+0x138>)
 8102514:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 64-1;
 8102516:	4b3c      	ldr	r3, [pc, #240]	; (8102608 <MX_TIM5_Init+0x134>)
 8102518:	223f      	movs	r2, #63	; 0x3f
 810251a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 810251c:	4b3a      	ldr	r3, [pc, #232]	; (8102608 <MX_TIM5_Init+0x134>)
 810251e:	2200      	movs	r2, #0
 8102520:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000-1;
 8102522:	4b39      	ldr	r3, [pc, #228]	; (8102608 <MX_TIM5_Init+0x134>)
 8102524:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8102528:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 810252a:	4b37      	ldr	r3, [pc, #220]	; (8102608 <MX_TIM5_Init+0x134>)
 810252c:	2200      	movs	r2, #0
 810252e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8102530:	4b35      	ldr	r3, [pc, #212]	; (8102608 <MX_TIM5_Init+0x134>)
 8102532:	2200      	movs	r2, #0
 8102534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8102536:	4834      	ldr	r0, [pc, #208]	; (8102608 <MX_TIM5_Init+0x134>)
 8102538:	f004 fa00 	bl	810693c <HAL_TIM_Base_Init>
 810253c:	4603      	mov	r3, r0
 810253e:	2b00      	cmp	r3, #0
 8102540:	d001      	beq.n	8102546 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8102542:	f000 fa11 	bl	8102968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8102546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 810254a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 810254c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8102550:	4619      	mov	r1, r3
 8102552:	482d      	ldr	r0, [pc, #180]	; (8102608 <MX_TIM5_Init+0x134>)
 8102554:	f005 f9a0 	bl	8107898 <HAL_TIM_ConfigClockSource>
 8102558:	4603      	mov	r3, r0
 810255a:	2b00      	cmp	r3, #0
 810255c:	d001      	beq.n	8102562 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 810255e:	f000 fa03 	bl	8102968 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8102562:	4829      	ldr	r0, [pc, #164]	; (8102608 <MX_TIM5_Init+0x134>)
 8102564:	f004 fc2a 	bl	8106dbc <HAL_TIM_IC_Init>
 8102568:	4603      	mov	r3, r0
 810256a:	2b00      	cmp	r3, #0
 810256c:	d001      	beq.n	8102572 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 810256e:	f000 f9fb 	bl	8102968 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8102572:	2304      	movs	r3, #4
 8102574:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8102576:	2350      	movs	r3, #80	; 0x50
 8102578:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 810257a:	2300      	movs	r3, #0
 810257c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 810257e:	2300      	movs	r3, #0
 8102580:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8102582:	2300      	movs	r3, #0
 8102584:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8102586:	f107 031c 	add.w	r3, r7, #28
 810258a:	4619      	mov	r1, r3
 810258c:	481e      	ldr	r0, [pc, #120]	; (8102608 <MX_TIM5_Init+0x134>)
 810258e:	f005 fa7b 	bl	8107a88 <HAL_TIM_SlaveConfigSynchro>
 8102592:	4603      	mov	r3, r0
 8102594:	2b00      	cmp	r3, #0
 8102596:	d001      	beq.n	810259c <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8102598:	f000 f9e6 	bl	8102968 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 810259c:	2300      	movs	r3, #0
 810259e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 81025a0:	2301      	movs	r3, #1
 81025a2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 81025a4:	2300      	movs	r3, #0
 81025a6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 81025a8:	2300      	movs	r3, #0
 81025aa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 81025ac:	f107 030c 	add.w	r3, r7, #12
 81025b0:	2200      	movs	r2, #0
 81025b2:	4619      	mov	r1, r3
 81025b4:	4814      	ldr	r0, [pc, #80]	; (8102608 <MX_TIM5_Init+0x134>)
 81025b6:	f004 ffbe 	bl	8107536 <HAL_TIM_IC_ConfigChannel>
 81025ba:	4603      	mov	r3, r0
 81025bc:	2b00      	cmp	r3, #0
 81025be:	d001      	beq.n	81025c4 <MX_TIM5_Init+0xf0>
  {
    Error_Handler();
 81025c0:	f000 f9d2 	bl	8102968 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 81025c4:	2302      	movs	r3, #2
 81025c6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 81025c8:	2302      	movs	r3, #2
 81025ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 81025cc:	f107 030c 	add.w	r3, r7, #12
 81025d0:	2204      	movs	r2, #4
 81025d2:	4619      	mov	r1, r3
 81025d4:	480c      	ldr	r0, [pc, #48]	; (8102608 <MX_TIM5_Init+0x134>)
 81025d6:	f004 ffae 	bl	8107536 <HAL_TIM_IC_ConfigChannel>
 81025da:	4603      	mov	r3, r0
 81025dc:	2b00      	cmp	r3, #0
 81025de:	d001      	beq.n	81025e4 <MX_TIM5_Init+0x110>
  {
    Error_Handler();
 81025e0:	f000 f9c2 	bl	8102968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81025e4:	2300      	movs	r3, #0
 81025e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81025e8:	2300      	movs	r3, #0
 81025ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 81025ec:	463b      	mov	r3, r7
 81025ee:	4619      	mov	r1, r3
 81025f0:	4805      	ldr	r0, [pc, #20]	; (8102608 <MX_TIM5_Init+0x134>)
 81025f2:	f006 f93f 	bl	8108874 <HAL_TIMEx_MasterConfigSynchronization>
 81025f6:	4603      	mov	r3, r0
 81025f8:	2b00      	cmp	r3, #0
 81025fa:	d001      	beq.n	8102600 <MX_TIM5_Init+0x12c>
  {
    Error_Handler();
 81025fc:	f000 f9b4 	bl	8102968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8102600:	bf00      	nop
 8102602:	3740      	adds	r7, #64	; 0x40
 8102604:	46bd      	mov	sp, r7
 8102606:	bd80      	pop	{r7, pc}
 8102608:	100003c0 	.word	0x100003c0
 810260c:	40000c00 	.word	0x40000c00

08102610 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8102610:	b580      	push	{r7, lr}
 8102612:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8102614:	4b22      	ldr	r3, [pc, #136]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 8102616:	4a23      	ldr	r2, [pc, #140]	; (81026a4 <MX_USART3_UART_Init+0x94>)
 8102618:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 810261a:	4b21      	ldr	r3, [pc, #132]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 810261c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8102620:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8102622:	4b1f      	ldr	r3, [pc, #124]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 8102624:	2200      	movs	r2, #0
 8102626:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8102628:	4b1d      	ldr	r3, [pc, #116]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 810262a:	2200      	movs	r2, #0
 810262c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 810262e:	4b1c      	ldr	r3, [pc, #112]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 8102630:	2200      	movs	r2, #0
 8102632:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8102634:	4b1a      	ldr	r3, [pc, #104]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 8102636:	220c      	movs	r2, #12
 8102638:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 810263a:	4b19      	ldr	r3, [pc, #100]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 810263c:	2200      	movs	r2, #0
 810263e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8102640:	4b17      	ldr	r3, [pc, #92]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 8102642:	2200      	movs	r2, #0
 8102644:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8102646:	4b16      	ldr	r3, [pc, #88]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 8102648:	2200      	movs	r2, #0
 810264a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 810264c:	4b14      	ldr	r3, [pc, #80]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 810264e:	2200      	movs	r2, #0
 8102650:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8102652:	4b13      	ldr	r3, [pc, #76]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 8102654:	2200      	movs	r2, #0
 8102656:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8102658:	4811      	ldr	r0, [pc, #68]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 810265a:	f006 f9b7 	bl	81089cc <HAL_UART_Init>
 810265e:	4603      	mov	r3, r0
 8102660:	2b00      	cmp	r3, #0
 8102662:	d001      	beq.n	8102668 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8102664:	f000 f980 	bl	8102968 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8102668:	2100      	movs	r1, #0
 810266a:	480d      	ldr	r0, [pc, #52]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 810266c:	f007 fa4c 	bl	8109b08 <HAL_UARTEx_SetTxFifoThreshold>
 8102670:	4603      	mov	r3, r0
 8102672:	2b00      	cmp	r3, #0
 8102674:	d001      	beq.n	810267a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8102676:	f000 f977 	bl	8102968 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810267a:	2100      	movs	r1, #0
 810267c:	4808      	ldr	r0, [pc, #32]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 810267e:	f007 fa81 	bl	8109b84 <HAL_UARTEx_SetRxFifoThreshold>
 8102682:	4603      	mov	r3, r0
 8102684:	2b00      	cmp	r3, #0
 8102686:	d001      	beq.n	810268c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8102688:	f000 f96e 	bl	8102968 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 810268c:	4804      	ldr	r0, [pc, #16]	; (81026a0 <MX_USART3_UART_Init+0x90>)
 810268e:	f007 fa02 	bl	8109a96 <HAL_UARTEx_DisableFifoMode>
 8102692:	4603      	mov	r3, r0
 8102694:	2b00      	cmp	r3, #0
 8102696:	d001      	beq.n	810269c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8102698:	f000 f966 	bl	8102968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 810269c:	bf00      	nop
 810269e:	bd80      	pop	{r7, pc}
 81026a0:	1000040c 	.word	0x1000040c
 81026a4:	40004800 	.word	0x40004800

081026a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81026a8:	b580      	push	{r7, lr}
 81026aa:	b08a      	sub	sp, #40	; 0x28
 81026ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81026ae:	f107 0314 	add.w	r3, r7, #20
 81026b2:	2200      	movs	r2, #0
 81026b4:	601a      	str	r2, [r3, #0]
 81026b6:	605a      	str	r2, [r3, #4]
 81026b8:	609a      	str	r2, [r3, #8]
 81026ba:	60da      	str	r2, [r3, #12]
 81026bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81026be:	4b46      	ldr	r3, [pc, #280]	; (81027d8 <MX_GPIO_Init+0x130>)
 81026c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026c4:	4a44      	ldr	r2, [pc, #272]	; (81027d8 <MX_GPIO_Init+0x130>)
 81026c6:	f043 0301 	orr.w	r3, r3, #1
 81026ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81026ce:	4b42      	ldr	r3, [pc, #264]	; (81027d8 <MX_GPIO_Init+0x130>)
 81026d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026d4:	f003 0301 	and.w	r3, r3, #1
 81026d8:	613b      	str	r3, [r7, #16]
 81026da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81026dc:	4b3e      	ldr	r3, [pc, #248]	; (81027d8 <MX_GPIO_Init+0x130>)
 81026de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026e2:	4a3d      	ldr	r2, [pc, #244]	; (81027d8 <MX_GPIO_Init+0x130>)
 81026e4:	f043 0302 	orr.w	r3, r3, #2
 81026e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81026ec:	4b3a      	ldr	r3, [pc, #232]	; (81027d8 <MX_GPIO_Init+0x130>)
 81026ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81026f2:	f003 0302 	and.w	r3, r3, #2
 81026f6:	60fb      	str	r3, [r7, #12]
 81026f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81026fa:	4b37      	ldr	r3, [pc, #220]	; (81027d8 <MX_GPIO_Init+0x130>)
 81026fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102700:	4a35      	ldr	r2, [pc, #212]	; (81027d8 <MX_GPIO_Init+0x130>)
 8102702:	f043 0308 	orr.w	r3, r3, #8
 8102706:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810270a:	4b33      	ldr	r3, [pc, #204]	; (81027d8 <MX_GPIO_Init+0x130>)
 810270c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102710:	f003 0308 	and.w	r3, r3, #8
 8102714:	60bb      	str	r3, [r7, #8]
 8102716:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8102718:	4b2f      	ldr	r3, [pc, #188]	; (81027d8 <MX_GPIO_Init+0x130>)
 810271a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810271e:	4a2e      	ldr	r2, [pc, #184]	; (81027d8 <MX_GPIO_Init+0x130>)
 8102720:	f043 0304 	orr.w	r3, r3, #4
 8102724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102728:	4b2b      	ldr	r3, [pc, #172]	; (81027d8 <MX_GPIO_Init+0x130>)
 810272a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810272e:	f003 0304 	and.w	r3, r3, #4
 8102732:	607b      	str	r3, [r7, #4]
 8102734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8102736:	4b28      	ldr	r3, [pc, #160]	; (81027d8 <MX_GPIO_Init+0x130>)
 8102738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810273c:	4a26      	ldr	r2, [pc, #152]	; (81027d8 <MX_GPIO_Init+0x130>)
 810273e:	f043 0310 	orr.w	r3, r3, #16
 8102742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102746:	4b24      	ldr	r3, [pc, #144]	; (81027d8 <MX_GPIO_Init+0x130>)
 8102748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810274c:	f003 0310 	and.w	r3, r3, #16
 8102750:	603b      	str	r3, [r7, #0]
 8102752:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8102754:	2200      	movs	r2, #0
 8102756:	f244 0101 	movw	r1, #16385	; 0x4001
 810275a:	4820      	ldr	r0, [pc, #128]	; (81027dc <MX_GPIO_Init+0x134>)
 810275c:	f001 fa12 	bl	8103b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8102760:	2200      	movs	r2, #0
 8102762:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8102766:	481e      	ldr	r0, [pc, #120]	; (81027e0 <MX_GPIO_Init+0x138>)
 8102768:	f001 fa0c 	bl	8103b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 810276c:	2200      	movs	r2, #0
 810276e:	2102      	movs	r1, #2
 8102770:	481c      	ldr	r0, [pc, #112]	; (81027e4 <MX_GPIO_Init+0x13c>)
 8102772:	f001 fa07 	bl	8103b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8102776:	f244 0301 	movw	r3, #16385	; 0x4001
 810277a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810277c:	2301      	movs	r3, #1
 810277e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102780:	2300      	movs	r3, #0
 8102782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102784:	2300      	movs	r3, #0
 8102786:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102788:	f107 0314 	add.w	r3, r7, #20
 810278c:	4619      	mov	r1, r3
 810278e:	4813      	ldr	r0, [pc, #76]	; (81027dc <MX_GPIO_Init+0x134>)
 8102790:	f001 f848 	bl	8103824 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8102794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8102798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810279a:	2301      	movs	r3, #1
 810279c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810279e:	2300      	movs	r3, #0
 81027a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81027a2:	2300      	movs	r3, #0
 81027a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 81027a6:	f107 0314 	add.w	r3, r7, #20
 81027aa:	4619      	mov	r1, r3
 81027ac:	480c      	ldr	r0, [pc, #48]	; (81027e0 <MX_GPIO_Init+0x138>)
 81027ae:	f001 f839 	bl	8103824 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 81027b2:	2302      	movs	r3, #2
 81027b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 81027b6:	2301      	movs	r3, #1
 81027b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027ba:	2300      	movs	r3, #0
 81027bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81027be:	2300      	movs	r3, #0
 81027c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 81027c2:	f107 0314 	add.w	r3, r7, #20
 81027c6:	4619      	mov	r1, r3
 81027c8:	4806      	ldr	r0, [pc, #24]	; (81027e4 <MX_GPIO_Init+0x13c>)
 81027ca:	f001 f82b 	bl	8103824 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81027ce:	bf00      	nop
 81027d0:	3728      	adds	r7, #40	; 0x28
 81027d2:	46bd      	mov	sp, r7
 81027d4:	bd80      	pop	{r7, pc}
 81027d6:	bf00      	nop
 81027d8:	58024400 	.word	0x58024400
 81027dc:	58020400 	.word	0x58020400
 81027e0:	58020c00 	.word	0x58020c00
 81027e4:	58021000 	.word	0x58021000

081027e8 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch) //Function to redirect stdout
{
 81027e8:	b580      	push	{r7, lr}
 81027ea:	b082      	sub	sp, #8
 81027ec:	af00      	add	r7, sp, #0
 81027ee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 0xffff); //0xFFFF is the Max Timeout in hexadecimal
 81027f0:	1d39      	adds	r1, r7, #4
 81027f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81027f6:	2201      	movs	r2, #1
 81027f8:	4803      	ldr	r0, [pc, #12]	; (8102808 <__io_putchar+0x20>)
 81027fa:	f006 f937 	bl	8108a6c <HAL_UART_Transmit>
	return ch;
 81027fe:	687b      	ldr	r3, [r7, #4]
}
 8102800:	4618      	mov	r0, r3
 8102802:	3708      	adds	r7, #8
 8102804:	46bd      	mov	sp, r7
 8102806:	bd80      	pop	{r7, pc}
 8102808:	1000040c 	.word	0x1000040c

0810280c <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 810280c:	b480      	push	{r7}
 810280e:	b083      	sub	sp, #12
 8102810:	af00      	add	r7, sp, #0
 8102812:	6078      	str	r0, [r7, #4]
	flagTim1 = 1; //Flag per far partire la prima volta in assoluto il codice nel while
 8102814:	4b0e      	ldr	r3, [pc, #56]	; (8102850 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8102816:	2201      	movs	r2, #1
 8102818:	601a      	str	r2, [r3, #0]
	if(htim == &htim1)
 810281a:	687b      	ldr	r3, [r7, #4]
 810281c:	4a0d      	ldr	r2, [pc, #52]	; (8102854 <HAL_TIM_PeriodElapsedCallback+0x48>)
 810281e:	4293      	cmp	r3, r2
 8102820:	d10f      	bne.n	8102842 <HAL_TIM_PeriodElapsedCallback+0x36>
	{
		//Tutto questo codice serve per definire la velocità di stampa del printf che è 10 volte minore del periodo di TIM1
		// periodo TIM1 = 10ms, periodo di stampa di 1 singolo carattere = 100ms
		if(cont == 10)
 8102822:	4b0d      	ldr	r3, [pc, #52]	; (8102858 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102824:	681b      	ldr	r3, [r3, #0]
 8102826:	2b0a      	cmp	r3, #10
 8102828:	d106      	bne.n	8102838 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			cont = 0; //riazzera il contatore dopo aver stampato un singolo carattere nel while(1)
 810282a:	4b0b      	ldr	r3, [pc, #44]	; (8102858 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 810282c:	2200      	movs	r2, #0
 810282e:	601a      	str	r2, [r3, #0]
			flag_print = 1;
 8102830:	4b0a      	ldr	r3, [pc, #40]	; (810285c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8102832:	2201      	movs	r2, #1
 8102834:	601a      	str	r2, [r3, #0]
		}
		else
			cont++;
	}
}
 8102836:	e004      	b.n	8102842 <HAL_TIM_PeriodElapsedCallback+0x36>
			cont++;
 8102838:	4b07      	ldr	r3, [pc, #28]	; (8102858 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 810283a:	681b      	ldr	r3, [r3, #0]
 810283c:	3301      	adds	r3, #1
 810283e:	4a06      	ldr	r2, [pc, #24]	; (8102858 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8102840:	6013      	str	r3, [r2, #0]
}
 8102842:	bf00      	nop
 8102844:	370c      	adds	r7, #12
 8102846:	46bd      	mov	sp, r7
 8102848:	f85d 7b04 	ldr.w	r7, [sp], #4
 810284c:	4770      	bx	lr
 810284e:	bf00      	nop
 8102850:	100004a4 	.word	0x100004a4
 8102854:	100002dc 	.word	0x100002dc
 8102858:	100004ac 	.word	0x100004ac
 810285c:	100004a8 	.word	0x100004a8

08102860 <HAL_TIM_IC_CaptureCallback>:



//Radiocomando
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8102860:	b580      	push	{r7, lr}
 8102862:	b086      	sub	sp, #24
 8102864:	af00      	add	r7, sp, #0
 8102866:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	4a38      	ldr	r2, [pc, #224]	; (810294c <HAL_TIM_IC_CaptureCallback+0xec>)
 810286c:	4293      	cmp	r3, r2
 810286e:	d128      	bne.n	81028c2 <HAL_TIM_IC_CaptureCallback+0x62>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 8102870:	687b      	ldr	r3, [r7, #4]
 8102872:	7f1b      	ldrb	r3, [r3, #28]
 8102874:	2b01      	cmp	r3, #1
 8102876:	d124      	bne.n	81028c2 <HAL_TIM_IC_CaptureCallback+0x62>
		{
			// Read the IC value
			uint32_t ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8102878:	2100      	movs	r1, #0
 810287a:	6878      	ldr	r0, [r7, #4]
 810287c:	f005 f946 	bl	8107b0c <HAL_TIM_ReadCapturedValue>
 8102880:	6178      	str	r0, [r7, #20]

			if (ICValue != 0)
 8102882:	697b      	ldr	r3, [r7, #20]
 8102884:	2b00      	cmp	r3, #0
 8102886:	d01c      	beq.n	81028c2 <HAL_TIM_IC_CaptureCallback+0x62>
			{
				// calculate the Duty Cycle
				uint32_t duty_received = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 8102888:	2104      	movs	r1, #4
 810288a:	6878      	ldr	r0, [r7, #4]
 810288c:	f005 f93e 	bl	8107b0c <HAL_TIM_ReadCapturedValue>
 8102890:	4603      	mov	r3, r0
 8102892:	2264      	movs	r2, #100	; 0x64
 8102894:	fb03 f202 	mul.w	r2, r3, r2
 8102898:	697b      	ldr	r3, [r7, #20]
 810289a:	fbb2 f3f3 	udiv	r3, r2, r3
 810289e:	613b      	str	r3, [r7, #16]

				if(duty_received >= 11)
 81028a0:	693b      	ldr	r3, [r7, #16]
 81028a2:	2b0a      	cmp	r3, #10
 81028a4:	d903      	bls.n	81028ae <HAL_TIM_IC_CaptureCallback+0x4e>
					i = 0;
 81028a6:	4b2a      	ldr	r3, [pc, #168]	; (8102950 <HAL_TIM_IC_CaptureCallback+0xf0>)
 81028a8:	2200      	movs	r2, #0
 81028aa:	601a      	str	r2, [r3, #0]
 81028ac:	e009      	b.n	81028c2 <HAL_TIM_IC_CaptureCallback+0x62>
				else if (duty_received <= 8)
 81028ae:	693b      	ldr	r3, [r7, #16]
 81028b0:	2b08      	cmp	r3, #8
 81028b2:	d803      	bhi.n	81028bc <HAL_TIM_IC_CaptureCallback+0x5c>
					i = 2;
 81028b4:	4b26      	ldr	r3, [pc, #152]	; (8102950 <HAL_TIM_IC_CaptureCallback+0xf0>)
 81028b6:	2202      	movs	r2, #2
 81028b8:	601a      	str	r2, [r3, #0]
 81028ba:	e002      	b.n	81028c2 <HAL_TIM_IC_CaptureCallback+0x62>
				else
					i = 1;
 81028bc:	4b24      	ldr	r3, [pc, #144]	; (8102950 <HAL_TIM_IC_CaptureCallback+0xf0>)
 81028be:	2201      	movs	r2, #1
 81028c0:	601a      	str	r2, [r3, #0]
			}
		}
	}


	if(htim == &htim2)
 81028c2:	687b      	ldr	r3, [r7, #4]
 81028c4:	4a23      	ldr	r2, [pc, #140]	; (8102954 <HAL_TIM_IC_CaptureCallback+0xf4>)
 81028c6:	4293      	cmp	r3, r2
 81028c8:	d13c      	bne.n	8102944 <HAL_TIM_IC_CaptureCallback+0xe4>
	{
		if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 81028ca:	687b      	ldr	r3, [r7, #4]
 81028cc:	7f1b      	ldrb	r3, [r3, #28]
 81028ce:	2b01      	cmp	r3, #1
 81028d0:	d138      	bne.n	8102944 <HAL_TIM_IC_CaptureCallback+0xe4>
		{
			// Read the IC value
			uint32_t ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 81028d2:	2100      	movs	r1, #0
 81028d4:	6878      	ldr	r0, [r7, #4]
 81028d6:	f005 f919 	bl	8107b0c <HAL_TIM_ReadCapturedValue>
 81028da:	60f8      	str	r0, [r7, #12]

			if (ICValue != 0)
 81028dc:	68fb      	ldr	r3, [r7, #12]
 81028de:	2b00      	cmp	r3, #0
 81028e0:	d030      	beq.n	8102944 <HAL_TIM_IC_CaptureCallback+0xe4>
			{
				// calculate the Duty Cycle
				uint32_t duty_received = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 81028e2:	2104      	movs	r1, #4
 81028e4:	6878      	ldr	r0, [r7, #4]
 81028e6:	f005 f911 	bl	8107b0c <HAL_TIM_ReadCapturedValue>
 81028ea:	4603      	mov	r3, r0
 81028ec:	2264      	movs	r2, #100	; 0x64
 81028ee:	fb03 f202 	mul.w	r2, r3, r2
 81028f2:	68fb      	ldr	r3, [r7, #12]
 81028f4:	fbb2 f3f3 	udiv	r3, r2, r3
 81028f8:	60bb      	str	r3, [r7, #8]

				if(duty_received >= 14)
 81028fa:	68bb      	ldr	r3, [r7, #8]
 81028fc:	2b0d      	cmp	r3, #13
 81028fe:	d909      	bls.n	8102914 <HAL_TIM_IC_CaptureCallback+0xb4>
				{
					rif_yaw = 1;
 8102900:	4b15      	ldr	r3, [pc, #84]	; (8102958 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8102902:	2201      	movs	r2, #1
 8102904:	601a      	str	r2, [r3, #0]
					yaw_angolo = 20; //In sostituzione a rif_yaw
 8102906:	4915      	ldr	r1, [pc, #84]	; (810295c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8102908:	f04f 0200 	mov.w	r2, #0
 810290c:	4b14      	ldr	r3, [pc, #80]	; (8102960 <HAL_TIM_IC_CaptureCallback+0x100>)
 810290e:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
		}
	}

}
 8102912:	e017      	b.n	8102944 <HAL_TIM_IC_CaptureCallback+0xe4>
				else if (duty_received <= 7)
 8102914:	68bb      	ldr	r3, [r7, #8]
 8102916:	2b07      	cmp	r3, #7
 8102918:	d80a      	bhi.n	8102930 <HAL_TIM_IC_CaptureCallback+0xd0>
					rif_yaw = -1;
 810291a:	4b0f      	ldr	r3, [pc, #60]	; (8102958 <HAL_TIM_IC_CaptureCallback+0xf8>)
 810291c:	f04f 32ff 	mov.w	r2, #4294967295
 8102920:	601a      	str	r2, [r3, #0]
					yaw_angolo = -20;
 8102922:	490e      	ldr	r1, [pc, #56]	; (810295c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8102924:	f04f 0200 	mov.w	r2, #0
 8102928:	4b0e      	ldr	r3, [pc, #56]	; (8102964 <HAL_TIM_IC_CaptureCallback+0x104>)
 810292a:	e9c1 2300 	strd	r2, r3, [r1]
}
 810292e:	e009      	b.n	8102944 <HAL_TIM_IC_CaptureCallback+0xe4>
					rif_yaw = 0;
 8102930:	4b09      	ldr	r3, [pc, #36]	; (8102958 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8102932:	2200      	movs	r2, #0
 8102934:	601a      	str	r2, [r3, #0]
					yaw_angolo = 0;
 8102936:	4909      	ldr	r1, [pc, #36]	; (810295c <HAL_TIM_IC_CaptureCallback+0xfc>)
 8102938:	f04f 0200 	mov.w	r2, #0
 810293c:	f04f 0300 	mov.w	r3, #0
 8102940:	e9c1 2300 	strd	r2, r3, [r1]
}
 8102944:	bf00      	nop
 8102946:	3718      	adds	r7, #24
 8102948:	46bd      	mov	sp, r7
 810294a:	bd80      	pop	{r7, pc}
 810294c:	100003c0 	.word	0x100003c0
 8102950:	100004b0 	.word	0x100004b0
 8102954:	10000328 	.word	0x10000328
 8102958:	100004b4 	.word	0x100004b4
 810295c:	10000548 	.word	0x10000548
 8102960:	40340000 	.word	0x40340000
 8102964:	c0340000 	.word	0xc0340000

08102968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102968:	b480      	push	{r7}
 810296a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810296c:	b672      	cpsid	i
}
 810296e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102970:	e7fe      	b.n	8102970 <Error_Handler+0x8>
 8102972:	0000      	movs	r0, r0
 8102974:	0000      	movs	r0, r0
	...

08102978 <setPwm>:
#include "IMU.h"
#include "PID.h"

//Funzione che dati i duty cycle per ogni canale del timer associa i 4 rispettivi valori ai registri CCR per creare i segnali PWM
void setPwm(float pwm1, float pwm2, float pwm3, float pwm4)
{
 8102978:	b580      	push	{r7, lr}
 810297a:	b084      	sub	sp, #16
 810297c:	af00      	add	r7, sp, #0
 810297e:	ed87 0a03 	vstr	s0, [r7, #12]
 8102982:	edc7 0a02 	vstr	s1, [r7, #8]
 8102986:	ed87 1a01 	vstr	s2, [r7, #4]
 810298a:	edc7 1a00 	vstr	s3, [r7]
	//pwmX è un duty cycle in percentuale
	pwm1 = pwm1 > MAX_DUTY ? MAX_DUTY : pwm1 < MIN_DUTY ? MIN_DUTY : pwm1; //Condizione con operatore ternario
 810298e:	68f8      	ldr	r0, [r7, #12]
 8102990:	f7fd fe62 	bl	8100658 <__aeabi_f2d>
 8102994:	a362      	add	r3, pc, #392	; (adr r3, 8102b20 <setPwm+0x1a8>)
 8102996:	e9d3 2300 	ldrd	r2, r3, [r3]
 810299a:	f7fe f945 	bl	8100c28 <__aeabi_dcmpgt>
 810299e:	4603      	mov	r3, r0
 81029a0:	2b00      	cmp	r3, #0
 81029a2:	d001      	beq.n	81029a8 <setPwm+0x30>
 81029a4:	4b60      	ldr	r3, [pc, #384]	; (8102b28 <setPwm+0x1b0>)
 81029a6:	e00d      	b.n	81029c4 <setPwm+0x4c>
 81029a8:	68f8      	ldr	r0, [r7, #12]
 81029aa:	f7fd fe55 	bl	8100658 <__aeabi_f2d>
 81029ae:	a35a      	add	r3, pc, #360	; (adr r3, 8102b18 <setPwm+0x1a0>)
 81029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029b4:	f7fe f91a 	bl	8100bec <__aeabi_dcmplt>
 81029b8:	4603      	mov	r3, r0
 81029ba:	2b00      	cmp	r3, #0
 81029bc:	d001      	beq.n	81029c2 <setPwm+0x4a>
 81029be:	4b5b      	ldr	r3, [pc, #364]	; (8102b2c <setPwm+0x1b4>)
 81029c0:	e000      	b.n	81029c4 <setPwm+0x4c>
 81029c2:	68fb      	ldr	r3, [r7, #12]
 81029c4:	60fb      	str	r3, [r7, #12]
	pwm2 = pwm2 > MAX_DUTY ? MAX_DUTY : pwm2 < MIN_DUTY ? MIN_DUTY : pwm2;
 81029c6:	68b8      	ldr	r0, [r7, #8]
 81029c8:	f7fd fe46 	bl	8100658 <__aeabi_f2d>
 81029cc:	a354      	add	r3, pc, #336	; (adr r3, 8102b20 <setPwm+0x1a8>)
 81029ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029d2:	f7fe f929 	bl	8100c28 <__aeabi_dcmpgt>
 81029d6:	4603      	mov	r3, r0
 81029d8:	2b00      	cmp	r3, #0
 81029da:	d001      	beq.n	81029e0 <setPwm+0x68>
 81029dc:	4b52      	ldr	r3, [pc, #328]	; (8102b28 <setPwm+0x1b0>)
 81029de:	e00d      	b.n	81029fc <setPwm+0x84>
 81029e0:	68b8      	ldr	r0, [r7, #8]
 81029e2:	f7fd fe39 	bl	8100658 <__aeabi_f2d>
 81029e6:	a34c      	add	r3, pc, #304	; (adr r3, 8102b18 <setPwm+0x1a0>)
 81029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81029ec:	f7fe f8fe 	bl	8100bec <__aeabi_dcmplt>
 81029f0:	4603      	mov	r3, r0
 81029f2:	2b00      	cmp	r3, #0
 81029f4:	d001      	beq.n	81029fa <setPwm+0x82>
 81029f6:	4b4d      	ldr	r3, [pc, #308]	; (8102b2c <setPwm+0x1b4>)
 81029f8:	e000      	b.n	81029fc <setPwm+0x84>
 81029fa:	68bb      	ldr	r3, [r7, #8]
 81029fc:	60bb      	str	r3, [r7, #8]
	pwm3 = pwm3 > MAX_DUTY ? MAX_DUTY : pwm3 < MIN_DUTY ? MIN_DUTY : pwm3;
 81029fe:	6878      	ldr	r0, [r7, #4]
 8102a00:	f7fd fe2a 	bl	8100658 <__aeabi_f2d>
 8102a04:	a346      	add	r3, pc, #280	; (adr r3, 8102b20 <setPwm+0x1a8>)
 8102a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a0a:	f7fe f90d 	bl	8100c28 <__aeabi_dcmpgt>
 8102a0e:	4603      	mov	r3, r0
 8102a10:	2b00      	cmp	r3, #0
 8102a12:	d001      	beq.n	8102a18 <setPwm+0xa0>
 8102a14:	4b44      	ldr	r3, [pc, #272]	; (8102b28 <setPwm+0x1b0>)
 8102a16:	e00d      	b.n	8102a34 <setPwm+0xbc>
 8102a18:	6878      	ldr	r0, [r7, #4]
 8102a1a:	f7fd fe1d 	bl	8100658 <__aeabi_f2d>
 8102a1e:	a33e      	add	r3, pc, #248	; (adr r3, 8102b18 <setPwm+0x1a0>)
 8102a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a24:	f7fe f8e2 	bl	8100bec <__aeabi_dcmplt>
 8102a28:	4603      	mov	r3, r0
 8102a2a:	2b00      	cmp	r3, #0
 8102a2c:	d001      	beq.n	8102a32 <setPwm+0xba>
 8102a2e:	4b3f      	ldr	r3, [pc, #252]	; (8102b2c <setPwm+0x1b4>)
 8102a30:	e000      	b.n	8102a34 <setPwm+0xbc>
 8102a32:	687b      	ldr	r3, [r7, #4]
 8102a34:	607b      	str	r3, [r7, #4]
	pwm4 = pwm4 > MAX_DUTY ? MAX_DUTY : pwm4 < MIN_DUTY ? MIN_DUTY : pwm4;
 8102a36:	6838      	ldr	r0, [r7, #0]
 8102a38:	f7fd fe0e 	bl	8100658 <__aeabi_f2d>
 8102a3c:	a338      	add	r3, pc, #224	; (adr r3, 8102b20 <setPwm+0x1a8>)
 8102a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a42:	f7fe f8f1 	bl	8100c28 <__aeabi_dcmpgt>
 8102a46:	4603      	mov	r3, r0
 8102a48:	2b00      	cmp	r3, #0
 8102a4a:	d001      	beq.n	8102a50 <setPwm+0xd8>
 8102a4c:	4b36      	ldr	r3, [pc, #216]	; (8102b28 <setPwm+0x1b0>)
 8102a4e:	e00d      	b.n	8102a6c <setPwm+0xf4>
 8102a50:	6838      	ldr	r0, [r7, #0]
 8102a52:	f7fd fe01 	bl	8100658 <__aeabi_f2d>
 8102a56:	a330      	add	r3, pc, #192	; (adr r3, 8102b18 <setPwm+0x1a0>)
 8102a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a5c:	f7fe f8c6 	bl	8100bec <__aeabi_dcmplt>
 8102a60:	4603      	mov	r3, r0
 8102a62:	2b00      	cmp	r3, #0
 8102a64:	d001      	beq.n	8102a6a <setPwm+0xf2>
 8102a66:	4b31      	ldr	r3, [pc, #196]	; (8102b2c <setPwm+0x1b4>)
 8102a68:	e000      	b.n	8102a6c <setPwm+0xf4>
 8102a6a:	683b      	ldr	r3, [r7, #0]
 8102a6c:	603b      	str	r3, [r7, #0]

	TIM3->CCR1 = (uint32_t)(TIM3->ARR * pwm1/100);
 8102a6e:	4b30      	ldr	r3, [pc, #192]	; (8102b30 <setPwm+0x1b8>)
 8102a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a72:	ee07 3a90 	vmov	s15, r3
 8102a76:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102a7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8102a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102a82:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8102b34 <setPwm+0x1bc>
 8102a86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102a8a:	4b29      	ldr	r3, [pc, #164]	; (8102b30 <setPwm+0x1b8>)
 8102a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102a90:	ee17 2a90 	vmov	r2, s15
 8102a94:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint32_t)(TIM3->ARR * pwm2/100);
 8102a96:	4b26      	ldr	r3, [pc, #152]	; (8102b30 <setPwm+0x1b8>)
 8102a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102a9a:	ee07 3a90 	vmov	s15, r3
 8102a9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102aa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8102aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102aaa:	eddf 6a22 	vldr	s13, [pc, #136]	; 8102b34 <setPwm+0x1bc>
 8102aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102ab2:	4b1f      	ldr	r3, [pc, #124]	; (8102b30 <setPwm+0x1b8>)
 8102ab4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ab8:	ee17 2a90 	vmov	r2, s15
 8102abc:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = (uint32_t)(TIM3->ARR * pwm3/100);
 8102abe:	4b1c      	ldr	r3, [pc, #112]	; (8102b30 <setPwm+0x1b8>)
 8102ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ac2:	ee07 3a90 	vmov	s15, r3
 8102ac6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8102ace:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102ad2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8102b34 <setPwm+0x1bc>
 8102ad6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102ada:	4b15      	ldr	r3, [pc, #84]	; (8102b30 <setPwm+0x1b8>)
 8102adc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102ae0:	ee17 2a90 	vmov	r2, s15
 8102ae4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = (uint32_t)(TIM3->ARR * pwm4/100);
 8102ae6:	4b12      	ldr	r3, [pc, #72]	; (8102b30 <setPwm+0x1b8>)
 8102ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102aea:	ee07 3a90 	vmov	s15, r3
 8102aee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102af2:	edd7 7a00 	vldr	s15, [r7]
 8102af6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102afa:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8102b34 <setPwm+0x1bc>
 8102afe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102b02:	4b0b      	ldr	r3, [pc, #44]	; (8102b30 <setPwm+0x1b8>)
 8102b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102b08:	ee17 2a90 	vmov	r2, s15
 8102b0c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8102b0e:	bf00      	nop
 8102b10:	3710      	adds	r7, #16
 8102b12:	46bd      	mov	sp, r7
 8102b14:	bd80      	pop	{r7, pc}
 8102b16:	bf00      	nop
 8102b18:	9999999a 	.word	0x9999999a
 8102b1c:	40159999 	.word	0x40159999
 8102b20:	66666666 	.word	0x66666666
 8102b24:	401a6666 	.word	0x401a6666
 8102b28:	40d33333 	.word	0x40d33333
 8102b2c:	40accccd 	.word	0x40accccd
 8102b30:	40000400 	.word	0x40000400
 8102b34:	42c80000 	.word	0x42c80000

08102b38 <setPwmNoControl>:

//Stessa funzione di prima, senza il controllo, per calibrare correttamente i motori
void setPwmNoControl(float pwm1, float pwm2, float pwm3, float pwm4)
{
 8102b38:	b480      	push	{r7}
 8102b3a:	b085      	sub	sp, #20
 8102b3c:	af00      	add	r7, sp, #0
 8102b3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8102b42:	edc7 0a02 	vstr	s1, [r7, #8]
 8102b46:	ed87 1a01 	vstr	s2, [r7, #4]
 8102b4a:	edc7 1a00 	vstr	s3, [r7]
	TIM3->CCR1 = (uint32_t)(TIM3->ARR * pwm1/100);
 8102b4e:	4b2b      	ldr	r3, [pc, #172]	; (8102bfc <setPwmNoControl+0xc4>)
 8102b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b52:	ee07 3a90 	vmov	s15, r3
 8102b56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102b5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8102b5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102b62:	eddf 6a27 	vldr	s13, [pc, #156]	; 8102c00 <setPwmNoControl+0xc8>
 8102b66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102b6a:	4b24      	ldr	r3, [pc, #144]	; (8102bfc <setPwmNoControl+0xc4>)
 8102b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102b70:	ee17 2a90 	vmov	r2, s15
 8102b74:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = (uint32_t)(TIM3->ARR * pwm2/100);
 8102b76:	4b21      	ldr	r3, [pc, #132]	; (8102bfc <setPwmNoControl+0xc4>)
 8102b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102b7a:	ee07 3a90 	vmov	s15, r3
 8102b7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102b82:	edd7 7a02 	vldr	s15, [r7, #8]
 8102b86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102b8a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8102c00 <setPwmNoControl+0xc8>
 8102b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102b92:	4b1a      	ldr	r3, [pc, #104]	; (8102bfc <setPwmNoControl+0xc4>)
 8102b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102b98:	ee17 2a90 	vmov	r2, s15
 8102b9c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = (uint32_t)(TIM3->ARR * pwm3/100);
 8102b9e:	4b17      	ldr	r3, [pc, #92]	; (8102bfc <setPwmNoControl+0xc4>)
 8102ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102ba2:	ee07 3a90 	vmov	s15, r3
 8102ba6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102baa:	edd7 7a01 	vldr	s15, [r7, #4]
 8102bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102bb2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8102c00 <setPwmNoControl+0xc8>
 8102bb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102bba:	4b10      	ldr	r3, [pc, #64]	; (8102bfc <setPwmNoControl+0xc4>)
 8102bbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102bc0:	ee17 2a90 	vmov	r2, s15
 8102bc4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = (uint32_t)(TIM3->ARR * pwm4/100);
 8102bc6:	4b0d      	ldr	r3, [pc, #52]	; (8102bfc <setPwmNoControl+0xc4>)
 8102bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bca:	ee07 3a90 	vmov	s15, r3
 8102bce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102bd2:	edd7 7a00 	vldr	s15, [r7]
 8102bd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8102bda:	eddf 6a09 	vldr	s13, [pc, #36]	; 8102c00 <setPwmNoControl+0xc8>
 8102bde:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8102be2:	4b06      	ldr	r3, [pc, #24]	; (8102bfc <setPwmNoControl+0xc4>)
 8102be4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102be8:	ee17 2a90 	vmov	r2, s15
 8102bec:	641a      	str	r2, [r3, #64]	; 0x40
}
 8102bee:	bf00      	nop
 8102bf0:	3714      	adds	r7, #20
 8102bf2:	46bd      	mov	sp, r7
 8102bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bf8:	4770      	bx	lr
 8102bfa:	bf00      	nop
 8102bfc:	40000400 	.word	0x40000400
 8102c00:	42c80000 	.word	0x42c80000

08102c04 <ESC_Calibrate>:

void ESC_Calibrate()
{
 8102c04:	b580      	push	{r7, lr}
 8102c06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); //Led verde
 8102c08:	2201      	movs	r2, #1
 8102c0a:	2101      	movs	r1, #1
 8102c0c:	4810      	ldr	r0, [pc, #64]	; (8102c50 <ESC_Calibrate+0x4c>)
 8102c0e:	f000 ffb9 	bl	8103b84 <HAL_GPIO_WritePin>
	setPwmNoControl(MAX_CALIB_DUTY, MAX_CALIB_DUTY, MAX_CALIB_DUTY, MAX_CALIB_DUTY); //10
 8102c12:	eef2 1a04 	vmov.f32	s3, #36	; 0x41200000  10.0
 8102c16:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8102c1a:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8102c1e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8102c22:	f7ff ff89 	bl	8102b38 <setPwmNoControl>
	HAL_Delay(3000); //ATTACCARE BATTERIA PRIMA CHE SI SPENGA IL LED VERDE
 8102c26:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8102c2a:	f000 fcb3 	bl	8103594 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8102c2e:	2200      	movs	r2, #0
 8102c30:	2101      	movs	r1, #1
 8102c32:	4807      	ldr	r0, [pc, #28]	; (8102c50 <ESC_Calibrate+0x4c>)
 8102c34:	f000 ffa6 	bl	8103b84 <HAL_GPIO_WritePin>
	setPwmNoControl(MIN_CALIB_DUTY, MIN_CALIB_DUTY, MIN_CALIB_DUTY, MIN_CALIB_DUTY); //5
 8102c38:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8102c3c:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8102c40:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8102c44:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8102c48:	f7ff ff76 	bl	8102b38 <setPwmNoControl>
}
 8102c4c:	bf00      	nop
 8102c4e:	bd80      	pop	{r7, pc}
 8102c50:	58020400 	.word	0x58020400
 8102c54:	00000000 	.word	0x00000000

08102c58 <map>:

float map(float val)
{
 8102c58:	b580      	push	{r7, lr}
 8102c5a:	b084      	sub	sp, #16
 8102c5c:	af00      	add	r7, sp, #0
 8102c5e:	ed87 0a01 	vstr	s0, [r7, #4]
	float duty = (((MAX_DUTY - MIN_DUTY)*val) + ((MIN_DUTY * MAX_SPEED)-(MAX_DUTY * MIN_SPEED)))/(MAX_SPEED - MIN_SPEED);
 8102c62:	6878      	ldr	r0, [r7, #4]
 8102c64:	f7fd fcf8 	bl	8100658 <__aeabi_f2d>
 8102c68:	a325      	add	r3, pc, #148	; (adr r3, 8102d00 <map+0xa8>)
 8102c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c6e:	f7fd fd4b 	bl	8100708 <__aeabi_dmul>
 8102c72:	4602      	mov	r2, r0
 8102c74:	460b      	mov	r3, r1
 8102c76:	4610      	mov	r0, r2
 8102c78:	4619      	mov	r1, r3
 8102c7a:	a323      	add	r3, pc, #140	; (adr r3, 8102d08 <map+0xb0>)
 8102c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c80:	f7fd fb8c 	bl	810039c <__adddf3>
 8102c84:	4602      	mov	r2, r0
 8102c86:	460b      	mov	r3, r1
 8102c88:	4610      	mov	r0, r2
 8102c8a:	4619      	mov	r1, r3
 8102c8c:	a320      	add	r3, pc, #128	; (adr r3, 8102d10 <map+0xb8>)
 8102c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c92:	f7fd fe63 	bl	810095c <__aeabi_ddiv>
 8102c96:	4602      	mov	r2, r0
 8102c98:	460b      	mov	r3, r1
 8102c9a:	4610      	mov	r0, r2
 8102c9c:	4619      	mov	r1, r3
 8102c9e:	f7fe f82b 	bl	8100cf8 <__aeabi_d2f>
 8102ca2:	4603      	mov	r3, r0
 8102ca4:	60fb      	str	r3, [r7, #12]

	if (duty < MIN_DUTY) duty = MIN_DUTY;
 8102ca6:	68f8      	ldr	r0, [r7, #12]
 8102ca8:	f7fd fcd6 	bl	8100658 <__aeabi_f2d>
 8102cac:	a31a      	add	r3, pc, #104	; (adr r3, 8102d18 <map+0xc0>)
 8102cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cb2:	f7fd ff9b 	bl	8100bec <__aeabi_dcmplt>
 8102cb6:	4603      	mov	r3, r0
 8102cb8:	2b00      	cmp	r3, #0
 8102cba:	d002      	beq.n	8102cc2 <map+0x6a>
 8102cbc:	4b0e      	ldr	r3, [pc, #56]	; (8102cf8 <map+0xa0>)
 8102cbe:	60fb      	str	r3, [r7, #12]
 8102cc0:	e00c      	b.n	8102cdc <map+0x84>
	else if (duty > MAX_DUTY) duty = MAX_DUTY;
 8102cc2:	68f8      	ldr	r0, [r7, #12]
 8102cc4:	f7fd fcc8 	bl	8100658 <__aeabi_f2d>
 8102cc8:	a309      	add	r3, pc, #36	; (adr r3, 8102cf0 <map+0x98>)
 8102cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cce:	f7fd ffab 	bl	8100c28 <__aeabi_dcmpgt>
 8102cd2:	4603      	mov	r3, r0
 8102cd4:	2b00      	cmp	r3, #0
 8102cd6:	d001      	beq.n	8102cdc <map+0x84>
 8102cd8:	4b08      	ldr	r3, [pc, #32]	; (8102cfc <map+0xa4>)
 8102cda:	60fb      	str	r3, [r7, #12]
	return duty;
 8102cdc:	68fb      	ldr	r3, [r7, #12]
 8102cde:	ee07 3a90 	vmov	s15, r3
}
 8102ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8102ce6:	3710      	adds	r7, #16
 8102ce8:	46bd      	mov	sp, r7
 8102cea:	bd80      	pop	{r7, pc}
 8102cec:	f3af 8000 	nop.w
 8102cf0:	66666666 	.word	0x66666666
 8102cf4:	401a6666 	.word	0x401a6666
 8102cf8:	40accccd 	.word	0x40accccd
 8102cfc:	40d33333 	.word	0x40d33333
 8102d00:	33333330 	.word	0x33333330
 8102d04:	3ff33333 	.word	0x3ff33333
 8102d08:	9999999a 	.word	0x9999999a
 8102d0c:	409dc199 	.word	0x409dc199
 8102d10:	00000000 	.word	0x00000000
 8102d14:	407b2000 	.word	0x407b2000
 8102d18:	9999999a 	.word	0x9999999a
 8102d1c:	40159999 	.word	0x40159999

08102d20 <armMotors>:

void armMotors()
{
 8102d20:	b580      	push	{r7, lr}
 8102d22:	af00      	add	r7, sp, #0
	setPwmNoControl(ARM_DUTY, ARM_DUTY, ARM_DUTY, ARM_DUTY);
 8102d24:	eddf 1a05 	vldr	s3, [pc, #20]	; 8102d3c <armMotors+0x1c>
 8102d28:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8102d3c <armMotors+0x1c>
 8102d2c:	eddf 0a03 	vldr	s1, [pc, #12]	; 8102d3c <armMotors+0x1c>
 8102d30:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8102d3c <armMotors+0x1c>
 8102d34:	f7ff ff00 	bl	8102b38 <setPwmNoControl>
}
 8102d38:	bf00      	nop
 8102d3a:	bd80      	pop	{r7, pc}
 8102d3c:	40a9999a 	.word	0x40a9999a

08102d40 <stopMotors>:


void stopMotors()
{
 8102d40:	b580      	push	{r7, lr}
 8102d42:	af00      	add	r7, sp, #0
	setPwmNoControl(MIN_CALIB_DUTY, MIN_CALIB_DUTY, MIN_CALIB_DUTY, MIN_CALIB_DUTY);
 8102d44:	eef1 1a04 	vmov.f32	s3, #20	; 0x40a00000  5.0
 8102d48:	eeb1 1a04 	vmov.f32	s2, #20	; 0x40a00000  5.0
 8102d4c:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8102d50:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8102d54:	f7ff fef0 	bl	8102b38 <setPwmNoControl>
}
 8102d58:	bf00      	nop
 8102d5a:	bd80      	pop	{r7, pc}

08102d5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102d5c:	b480      	push	{r7}
 8102d5e:	b083      	sub	sp, #12
 8102d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102d62:	4b0a      	ldr	r3, [pc, #40]	; (8102d8c <HAL_MspInit+0x30>)
 8102d64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102d68:	4a08      	ldr	r2, [pc, #32]	; (8102d8c <HAL_MspInit+0x30>)
 8102d6a:	f043 0302 	orr.w	r3, r3, #2
 8102d6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102d72:	4b06      	ldr	r3, [pc, #24]	; (8102d8c <HAL_MspInit+0x30>)
 8102d74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8102d78:	f003 0302 	and.w	r3, r3, #2
 8102d7c:	607b      	str	r3, [r7, #4]
 8102d7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102d80:	bf00      	nop
 8102d82:	370c      	adds	r7, #12
 8102d84:	46bd      	mov	sp, r7
 8102d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d8a:	4770      	bx	lr
 8102d8c:	58024400 	.word	0x58024400

08102d90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8102d90:	b580      	push	{r7, lr}
 8102d92:	b0ba      	sub	sp, #232	; 0xe8
 8102d94:	af00      	add	r7, sp, #0
 8102d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102d98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102d9c:	2200      	movs	r2, #0
 8102d9e:	601a      	str	r2, [r3, #0]
 8102da0:	605a      	str	r2, [r3, #4]
 8102da2:	609a      	str	r2, [r3, #8]
 8102da4:	60da      	str	r2, [r3, #12]
 8102da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102da8:	f107 0310 	add.w	r3, r7, #16
 8102dac:	22c0      	movs	r2, #192	; 0xc0
 8102dae:	2100      	movs	r1, #0
 8102db0:	4618      	mov	r0, r3
 8102db2:	f007 ff20 	bl	810abf6 <memset>
  if(hi2c->Instance==I2C1)
 8102db6:	687b      	ldr	r3, [r7, #4]
 8102db8:	681b      	ldr	r3, [r3, #0]
 8102dba:	4a26      	ldr	r2, [pc, #152]	; (8102e54 <HAL_I2C_MspInit+0xc4>)
 8102dbc:	4293      	cmp	r3, r2
 8102dbe:	d145      	bne.n	8102e4c <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8102dc0:	f04f 0208 	mov.w	r2, #8
 8102dc4:	f04f 0300 	mov.w	r3, #0
 8102dc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8102dcc:	2300      	movs	r3, #0
 8102dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102dd2:	f107 0310 	add.w	r3, r7, #16
 8102dd6:	4618      	mov	r0, r3
 8102dd8:	f001 ff84 	bl	8104ce4 <HAL_RCCEx_PeriphCLKConfig>
 8102ddc:	4603      	mov	r3, r0
 8102dde:	2b00      	cmp	r3, #0
 8102de0:	d001      	beq.n	8102de6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8102de2:	f7ff fdc1 	bl	8102968 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102de6:	4b1c      	ldr	r3, [pc, #112]	; (8102e58 <HAL_I2C_MspInit+0xc8>)
 8102de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102dec:	4a1a      	ldr	r2, [pc, #104]	; (8102e58 <HAL_I2C_MspInit+0xc8>)
 8102dee:	f043 0302 	orr.w	r3, r3, #2
 8102df2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102df6:	4b18      	ldr	r3, [pc, #96]	; (8102e58 <HAL_I2C_MspInit+0xc8>)
 8102df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102dfc:	f003 0302 	and.w	r3, r3, #2
 8102e00:	60fb      	str	r3, [r7, #12]
 8102e02:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8102e04:	23c0      	movs	r3, #192	; 0xc0
 8102e06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8102e0a:	2312      	movs	r3, #18
 8102e0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102e10:	2300      	movs	r3, #0
 8102e12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102e16:	2300      	movs	r3, #0
 8102e18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8102e1c:	2304      	movs	r3, #4
 8102e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102e22:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8102e26:	4619      	mov	r1, r3
 8102e28:	480c      	ldr	r0, [pc, #48]	; (8102e5c <HAL_I2C_MspInit+0xcc>)
 8102e2a:	f000 fcfb 	bl	8103824 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8102e2e:	4b0a      	ldr	r3, [pc, #40]	; (8102e58 <HAL_I2C_MspInit+0xc8>)
 8102e30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102e34:	4a08      	ldr	r2, [pc, #32]	; (8102e58 <HAL_I2C_MspInit+0xc8>)
 8102e36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8102e3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102e3e:	4b06      	ldr	r3, [pc, #24]	; (8102e58 <HAL_I2C_MspInit+0xc8>)
 8102e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102e48:	60bb      	str	r3, [r7, #8]
 8102e4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8102e4c:	bf00      	nop
 8102e4e:	37e8      	adds	r7, #232	; 0xe8
 8102e50:	46bd      	mov	sp, r7
 8102e52:	bd80      	pop	{r7, pc}
 8102e54:	40005400 	.word	0x40005400
 8102e58:	58024400 	.word	0x58024400
 8102e5c:	58020400 	.word	0x58020400

08102e60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102e60:	b580      	push	{r7, lr}
 8102e62:	b08e      	sub	sp, #56	; 0x38
 8102e64:	af00      	add	r7, sp, #0
 8102e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8102e6c:	2200      	movs	r2, #0
 8102e6e:	601a      	str	r2, [r3, #0]
 8102e70:	605a      	str	r2, [r3, #4]
 8102e72:	609a      	str	r2, [r3, #8]
 8102e74:	60da      	str	r2, [r3, #12]
 8102e76:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8102e78:	687b      	ldr	r3, [r7, #4]
 8102e7a:	681b      	ldr	r3, [r3, #0]
 8102e7c:	4a55      	ldr	r2, [pc, #340]	; (8102fd4 <HAL_TIM_Base_MspInit+0x174>)
 8102e7e:	4293      	cmp	r3, r2
 8102e80:	d117      	bne.n	8102eb2 <HAL_TIM_Base_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8102e82:	4b55      	ldr	r3, [pc, #340]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102e88:	4a53      	ldr	r2, [pc, #332]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102e8a:	f043 0301 	orr.w	r3, r3, #1
 8102e8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8102e92:	4b51      	ldr	r3, [pc, #324]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102e94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8102e98:	f003 0301 	and.w	r3, r3, #1
 8102e9c:	623b      	str	r3, [r7, #32]
 8102e9e:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8102ea0:	2200      	movs	r2, #0
 8102ea2:	2100      	movs	r1, #0
 8102ea4:	2019      	movs	r0, #25
 8102ea6:	f000 fc74 	bl	8103792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8102eaa:	2019      	movs	r0, #25
 8102eac:	f000 fc8b 	bl	81037c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8102eb0:	e08b      	b.n	8102fca <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM2)
 8102eb2:	687b      	ldr	r3, [r7, #4]
 8102eb4:	681b      	ldr	r3, [r3, #0]
 8102eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102eba:	d136      	bne.n	8102f2a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8102ebc:	4b46      	ldr	r3, [pc, #280]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102ebe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102ec2:	4a45      	ldr	r2, [pc, #276]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102ec4:	f043 0301 	orr.w	r3, r3, #1
 8102ec8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102ecc:	4b42      	ldr	r3, [pc, #264]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102ece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102ed2:	f003 0301 	and.w	r3, r3, #1
 8102ed6:	61fb      	str	r3, [r7, #28]
 8102ed8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102eda:	4b3f      	ldr	r3, [pc, #252]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102ee0:	4a3d      	ldr	r2, [pc, #244]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102ee2:	f043 0301 	orr.w	r3, r3, #1
 8102ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102eea:	4b3b      	ldr	r3, [pc, #236]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102ef0:	f003 0301 	and.w	r3, r3, #1
 8102ef4:	61bb      	str	r3, [r7, #24]
 8102ef6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8102ef8:	2320      	movs	r3, #32
 8102efa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102efc:	2302      	movs	r3, #2
 8102efe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102f00:	2300      	movs	r3, #0
 8102f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102f04:	2300      	movs	r3, #0
 8102f06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8102f08:	2301      	movs	r3, #1
 8102f0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8102f10:	4619      	mov	r1, r3
 8102f12:	4832      	ldr	r0, [pc, #200]	; (8102fdc <HAL_TIM_Base_MspInit+0x17c>)
 8102f14:	f000 fc86 	bl	8103824 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8102f18:	2200      	movs	r2, #0
 8102f1a:	2100      	movs	r1, #0
 8102f1c:	201c      	movs	r0, #28
 8102f1e:	f000 fc38 	bl	8103792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8102f22:	201c      	movs	r0, #28
 8102f24:	f000 fc4f 	bl	81037c6 <HAL_NVIC_EnableIRQ>
}
 8102f28:	e04f      	b.n	8102fca <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM3)
 8102f2a:	687b      	ldr	r3, [r7, #4]
 8102f2c:	681b      	ldr	r3, [r3, #0]
 8102f2e:	4a2c      	ldr	r2, [pc, #176]	; (8102fe0 <HAL_TIM_Base_MspInit+0x180>)
 8102f30:	4293      	cmp	r3, r2
 8102f32:	d10f      	bne.n	8102f54 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8102f34:	4b28      	ldr	r3, [pc, #160]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102f36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102f3a:	4a27      	ldr	r2, [pc, #156]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102f3c:	f043 0302 	orr.w	r3, r3, #2
 8102f40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102f44:	4b24      	ldr	r3, [pc, #144]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102f46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102f4a:	f003 0302 	and.w	r3, r3, #2
 8102f4e:	617b      	str	r3, [r7, #20]
 8102f50:	697b      	ldr	r3, [r7, #20]
}
 8102f52:	e03a      	b.n	8102fca <HAL_TIM_Base_MspInit+0x16a>
  else if(htim_base->Instance==TIM5)
 8102f54:	687b      	ldr	r3, [r7, #4]
 8102f56:	681b      	ldr	r3, [r3, #0]
 8102f58:	4a22      	ldr	r2, [pc, #136]	; (8102fe4 <HAL_TIM_Base_MspInit+0x184>)
 8102f5a:	4293      	cmp	r3, r2
 8102f5c:	d135      	bne.n	8102fca <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8102f5e:	4b1e      	ldr	r3, [pc, #120]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102f64:	4a1c      	ldr	r2, [pc, #112]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102f66:	f043 0308 	orr.w	r3, r3, #8
 8102f6a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8102f6e:	4b1a      	ldr	r3, [pc, #104]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102f70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8102f74:	f003 0308 	and.w	r3, r3, #8
 8102f78:	613b      	str	r3, [r7, #16]
 8102f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102f7c:	4b16      	ldr	r3, [pc, #88]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102f82:	4a15      	ldr	r2, [pc, #84]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102f84:	f043 0301 	orr.w	r3, r3, #1
 8102f88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8102f8c:	4b12      	ldr	r3, [pc, #72]	; (8102fd8 <HAL_TIM_Base_MspInit+0x178>)
 8102f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8102f92:	f003 0301 	and.w	r3, r3, #1
 8102f96:	60fb      	str	r3, [r7, #12]
 8102f98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8102f9a:	2301      	movs	r3, #1
 8102f9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102f9e:	2302      	movs	r3, #2
 8102fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102fa2:	2300      	movs	r3, #0
 8102fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102fa6:	2300      	movs	r3, #0
 8102fa8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8102faa:	2302      	movs	r3, #2
 8102fac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8102fb2:	4619      	mov	r1, r3
 8102fb4:	4809      	ldr	r0, [pc, #36]	; (8102fdc <HAL_TIM_Base_MspInit+0x17c>)
 8102fb6:	f000 fc35 	bl	8103824 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8102fba:	2200      	movs	r2, #0
 8102fbc:	2100      	movs	r1, #0
 8102fbe:	2032      	movs	r0, #50	; 0x32
 8102fc0:	f000 fbe7 	bl	8103792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8102fc4:	2032      	movs	r0, #50	; 0x32
 8102fc6:	f000 fbfe 	bl	81037c6 <HAL_NVIC_EnableIRQ>
}
 8102fca:	bf00      	nop
 8102fcc:	3738      	adds	r7, #56	; 0x38
 8102fce:	46bd      	mov	sp, r7
 8102fd0:	bd80      	pop	{r7, pc}
 8102fd2:	bf00      	nop
 8102fd4:	40010000 	.word	0x40010000
 8102fd8:	58024400 	.word	0x58024400
 8102fdc:	58020000 	.word	0x58020000
 8102fe0:	40000400 	.word	0x40000400
 8102fe4:	40000c00 	.word	0x40000c00

08102fe8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102fe8:	b580      	push	{r7, lr}
 8102fea:	b08a      	sub	sp, #40	; 0x28
 8102fec:	af00      	add	r7, sp, #0
 8102fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102ff0:	f107 0314 	add.w	r3, r7, #20
 8102ff4:	2200      	movs	r2, #0
 8102ff6:	601a      	str	r2, [r3, #0]
 8102ff8:	605a      	str	r2, [r3, #4]
 8102ffa:	609a      	str	r2, [r3, #8]
 8102ffc:	60da      	str	r2, [r3, #12]
 8102ffe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	681b      	ldr	r3, [r3, #0]
 8103004:	4a32      	ldr	r2, [pc, #200]	; (81030d0 <HAL_TIM_MspPostInit+0xe8>)
 8103006:	4293      	cmp	r3, r2
 8103008:	d15d      	bne.n	81030c6 <HAL_TIM_MspPostInit+0xde>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810300a:	4b32      	ldr	r3, [pc, #200]	; (81030d4 <HAL_TIM_MspPostInit+0xec>)
 810300c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103010:	4a30      	ldr	r2, [pc, #192]	; (81030d4 <HAL_TIM_MspPostInit+0xec>)
 8103012:	f043 0301 	orr.w	r3, r3, #1
 8103016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810301a:	4b2e      	ldr	r3, [pc, #184]	; (81030d4 <HAL_TIM_MspPostInit+0xec>)
 810301c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8103020:	f003 0301 	and.w	r3, r3, #1
 8103024:	613b      	str	r3, [r7, #16]
 8103026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8103028:	4b2a      	ldr	r3, [pc, #168]	; (81030d4 <HAL_TIM_MspPostInit+0xec>)
 810302a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810302e:	4a29      	ldr	r2, [pc, #164]	; (81030d4 <HAL_TIM_MspPostInit+0xec>)
 8103030:	f043 0302 	orr.w	r3, r3, #2
 8103034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103038:	4b26      	ldr	r3, [pc, #152]	; (81030d4 <HAL_TIM_MspPostInit+0xec>)
 810303a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810303e:	f003 0302 	and.w	r3, r3, #2
 8103042:	60fb      	str	r3, [r7, #12]
 8103044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8103046:	4b23      	ldr	r3, [pc, #140]	; (81030d4 <HAL_TIM_MspPostInit+0xec>)
 8103048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810304c:	4a21      	ldr	r2, [pc, #132]	; (81030d4 <HAL_TIM_MspPostInit+0xec>)
 810304e:	f043 0304 	orr.w	r3, r3, #4
 8103052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103056:	4b1f      	ldr	r3, [pc, #124]	; (81030d4 <HAL_TIM_MspPostInit+0xec>)
 8103058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810305c:	f003 0304 	and.w	r3, r3, #4
 8103060:	60bb      	str	r3, [r7, #8]
 8103062:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PB1     ------> TIM3_CH4
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8103064:	2340      	movs	r3, #64	; 0x40
 8103066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103068:	2302      	movs	r3, #2
 810306a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810306c:	2300      	movs	r3, #0
 810306e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103070:	2300      	movs	r3, #0
 8103072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8103074:	2302      	movs	r3, #2
 8103076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8103078:	f107 0314 	add.w	r3, r7, #20
 810307c:	4619      	mov	r1, r3
 810307e:	4816      	ldr	r0, [pc, #88]	; (81030d8 <HAL_TIM_MspPostInit+0xf0>)
 8103080:	f000 fbd0 	bl	8103824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8103084:	2302      	movs	r3, #2
 8103086:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8103088:	2302      	movs	r3, #2
 810308a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810308c:	2300      	movs	r3, #0
 810308e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8103090:	2300      	movs	r3, #0
 8103092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8103094:	2302      	movs	r3, #2
 8103096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8103098:	f107 0314 	add.w	r3, r7, #20
 810309c:	4619      	mov	r1, r3
 810309e:	480f      	ldr	r0, [pc, #60]	; (81030dc <HAL_TIM_MspPostInit+0xf4>)
 81030a0:	f000 fbc0 	bl	8103824 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 81030a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 81030a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81030aa:	2302      	movs	r3, #2
 81030ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81030ae:	2300      	movs	r3, #0
 81030b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81030b2:	2300      	movs	r3, #0
 81030b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 81030b6:	2302      	movs	r3, #2
 81030b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81030ba:	f107 0314 	add.w	r3, r7, #20
 81030be:	4619      	mov	r1, r3
 81030c0:	4807      	ldr	r0, [pc, #28]	; (81030e0 <HAL_TIM_MspPostInit+0xf8>)
 81030c2:	f000 fbaf 	bl	8103824 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 81030c6:	bf00      	nop
 81030c8:	3728      	adds	r7, #40	; 0x28
 81030ca:	46bd      	mov	sp, r7
 81030cc:	bd80      	pop	{r7, pc}
 81030ce:	bf00      	nop
 81030d0:	40000400 	.word	0x40000400
 81030d4:	58024400 	.word	0x58024400
 81030d8:	58020000 	.word	0x58020000
 81030dc:	58020400 	.word	0x58020400
 81030e0:	58020800 	.word	0x58020800

081030e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81030e4:	b580      	push	{r7, lr}
 81030e6:	b0ba      	sub	sp, #232	; 0xe8
 81030e8:	af00      	add	r7, sp, #0
 81030ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81030ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81030f0:	2200      	movs	r2, #0
 81030f2:	601a      	str	r2, [r3, #0]
 81030f4:	605a      	str	r2, [r3, #4]
 81030f6:	609a      	str	r2, [r3, #8]
 81030f8:	60da      	str	r2, [r3, #12]
 81030fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81030fc:	f107 0310 	add.w	r3, r7, #16
 8103100:	22c0      	movs	r2, #192	; 0xc0
 8103102:	2100      	movs	r1, #0
 8103104:	4618      	mov	r0, r3
 8103106:	f007 fd76 	bl	810abf6 <memset>
  if(huart->Instance==USART3)
 810310a:	687b      	ldr	r3, [r7, #4]
 810310c:	681b      	ldr	r3, [r3, #0]
 810310e:	4a27      	ldr	r2, [pc, #156]	; (81031ac <HAL_UART_MspInit+0xc8>)
 8103110:	4293      	cmp	r3, r2
 8103112:	d146      	bne.n	81031a2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8103114:	f04f 0202 	mov.w	r2, #2
 8103118:	f04f 0300 	mov.w	r3, #0
 810311c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8103120:	2300      	movs	r3, #0
 8103122:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8103126:	f107 0310 	add.w	r3, r7, #16
 810312a:	4618      	mov	r0, r3
 810312c:	f001 fdda 	bl	8104ce4 <HAL_RCCEx_PeriphCLKConfig>
 8103130:	4603      	mov	r3, r0
 8103132:	2b00      	cmp	r3, #0
 8103134:	d001      	beq.n	810313a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8103136:	f7ff fc17 	bl	8102968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 810313a:	4b1d      	ldr	r3, [pc, #116]	; (81031b0 <HAL_UART_MspInit+0xcc>)
 810313c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103140:	4a1b      	ldr	r2, [pc, #108]	; (81031b0 <HAL_UART_MspInit+0xcc>)
 8103142:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8103146:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810314a:	4b19      	ldr	r3, [pc, #100]	; (81031b0 <HAL_UART_MspInit+0xcc>)
 810314c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8103150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8103154:	60fb      	str	r3, [r7, #12]
 8103156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8103158:	4b15      	ldr	r3, [pc, #84]	; (81031b0 <HAL_UART_MspInit+0xcc>)
 810315a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810315e:	4a14      	ldr	r2, [pc, #80]	; (81031b0 <HAL_UART_MspInit+0xcc>)
 8103160:	f043 0308 	orr.w	r3, r3, #8
 8103164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8103168:	4b11      	ldr	r3, [pc, #68]	; (81031b0 <HAL_UART_MspInit+0xcc>)
 810316a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 810316e:	f003 0308 	and.w	r3, r3, #8
 8103172:	60bb      	str	r3, [r7, #8]
 8103174:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8103176:	f44f 7340 	mov.w	r3, #768	; 0x300
 810317a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810317e:	2302      	movs	r3, #2
 8103180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8103184:	2300      	movs	r3, #0
 8103186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810318a:	2300      	movs	r3, #0
 810318c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8103190:	2307      	movs	r3, #7
 8103192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8103196:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810319a:	4619      	mov	r1, r3
 810319c:	4805      	ldr	r0, [pc, #20]	; (81031b4 <HAL_UART_MspInit+0xd0>)
 810319e:	f000 fb41 	bl	8103824 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 81031a2:	bf00      	nop
 81031a4:	37e8      	adds	r7, #232	; 0xe8
 81031a6:	46bd      	mov	sp, r7
 81031a8:	bd80      	pop	{r7, pc}
 81031aa:	bf00      	nop
 81031ac:	40004800 	.word	0x40004800
 81031b0:	58024400 	.word	0x58024400
 81031b4:	58020c00 	.word	0x58020c00

081031b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81031b8:	b480      	push	{r7}
 81031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81031bc:	e7fe      	b.n	81031bc <NMI_Handler+0x4>

081031be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81031be:	b480      	push	{r7}
 81031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81031c2:	e7fe      	b.n	81031c2 <HardFault_Handler+0x4>

081031c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81031c4:	b480      	push	{r7}
 81031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81031c8:	e7fe      	b.n	81031c8 <MemManage_Handler+0x4>

081031ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81031ca:	b480      	push	{r7}
 81031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81031ce:	e7fe      	b.n	81031ce <BusFault_Handler+0x4>

081031d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81031d0:	b480      	push	{r7}
 81031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81031d4:	e7fe      	b.n	81031d4 <UsageFault_Handler+0x4>

081031d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81031d6:	b480      	push	{r7}
 81031d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81031da:	bf00      	nop
 81031dc:	46bd      	mov	sp, r7
 81031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031e2:	4770      	bx	lr

081031e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81031e4:	b480      	push	{r7}
 81031e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81031e8:	bf00      	nop
 81031ea:	46bd      	mov	sp, r7
 81031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031f0:	4770      	bx	lr

081031f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81031f2:	b480      	push	{r7}
 81031f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81031f6:	bf00      	nop
 81031f8:	46bd      	mov	sp, r7
 81031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031fe:	4770      	bx	lr

08103200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8103200:	b580      	push	{r7, lr}
 8103202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8103204:	f000 f9a6 	bl	8103554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8103208:	bf00      	nop
 810320a:	bd80      	pop	{r7, pc}

0810320c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 810320c:	b580      	push	{r7, lr}
 810320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8103210:	4802      	ldr	r0, [pc, #8]	; (810321c <TIM1_UP_IRQHandler+0x10>)
 8103212:	f004 f889 	bl	8107328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8103216:	bf00      	nop
 8103218:	bd80      	pop	{r7, pc}
 810321a:	bf00      	nop
 810321c:	100002dc 	.word	0x100002dc

08103220 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8103220:	b580      	push	{r7, lr}
 8103222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8103224:	4802      	ldr	r0, [pc, #8]	; (8103230 <TIM2_IRQHandler+0x10>)
 8103226:	f004 f87f 	bl	8107328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810322a:	bf00      	nop
 810322c:	bd80      	pop	{r7, pc}
 810322e:	bf00      	nop
 8103230:	10000328 	.word	0x10000328

08103234 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8103234:	b580      	push	{r7, lr}
 8103236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8103238:	4802      	ldr	r0, [pc, #8]	; (8103244 <TIM5_IRQHandler+0x10>)
 810323a:	f004 f875 	bl	8107328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 810323e:	bf00      	nop
 8103240:	bd80      	pop	{r7, pc}
 8103242:	bf00      	nop
 8103244:	100003c0 	.word	0x100003c0

08103248 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8103248:	b480      	push	{r7}
 810324a:	af00      	add	r7, sp, #0
  return 1;
 810324c:	2301      	movs	r3, #1
}
 810324e:	4618      	mov	r0, r3
 8103250:	46bd      	mov	sp, r7
 8103252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103256:	4770      	bx	lr

08103258 <_kill>:

int _kill(int pid, int sig)
{
 8103258:	b580      	push	{r7, lr}
 810325a:	b082      	sub	sp, #8
 810325c:	af00      	add	r7, sp, #0
 810325e:	6078      	str	r0, [r7, #4]
 8103260:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8103262:	f007 fd1b 	bl	810ac9c <__errno>
 8103266:	4603      	mov	r3, r0
 8103268:	2216      	movs	r2, #22
 810326a:	601a      	str	r2, [r3, #0]
  return -1;
 810326c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8103270:	4618      	mov	r0, r3
 8103272:	3708      	adds	r7, #8
 8103274:	46bd      	mov	sp, r7
 8103276:	bd80      	pop	{r7, pc}

08103278 <_exit>:

void _exit (int status)
{
 8103278:	b580      	push	{r7, lr}
 810327a:	b082      	sub	sp, #8
 810327c:	af00      	add	r7, sp, #0
 810327e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8103280:	f04f 31ff 	mov.w	r1, #4294967295
 8103284:	6878      	ldr	r0, [r7, #4]
 8103286:	f7ff ffe7 	bl	8103258 <_kill>
  while (1) {}    /* Make sure we hang here */
 810328a:	e7fe      	b.n	810328a <_exit+0x12>

0810328c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 810328c:	b580      	push	{r7, lr}
 810328e:	b086      	sub	sp, #24
 8103290:	af00      	add	r7, sp, #0
 8103292:	60f8      	str	r0, [r7, #12]
 8103294:	60b9      	str	r1, [r7, #8]
 8103296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  len = 1;
 8103298:	2301      	movs	r3, #1
 810329a:	607b      	str	r3, [r7, #4]

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810329c:	2300      	movs	r3, #0
 810329e:	617b      	str	r3, [r7, #20]
 81032a0:	e00a      	b.n	81032b8 <_read+0x2c>
  {
    *ptr++ = __io_getchar();
 81032a2:	f3af 8000 	nop.w
 81032a6:	4601      	mov	r1, r0
 81032a8:	68bb      	ldr	r3, [r7, #8]
 81032aa:	1c5a      	adds	r2, r3, #1
 81032ac:	60ba      	str	r2, [r7, #8]
 81032ae:	b2ca      	uxtb	r2, r1
 81032b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81032b2:	697b      	ldr	r3, [r7, #20]
 81032b4:	3301      	adds	r3, #1
 81032b6:	617b      	str	r3, [r7, #20]
 81032b8:	697a      	ldr	r2, [r7, #20]
 81032ba:	687b      	ldr	r3, [r7, #4]
 81032bc:	429a      	cmp	r2, r3
 81032be:	dbf0      	blt.n	81032a2 <_read+0x16>
  }

  return len;
 81032c0:	687b      	ldr	r3, [r7, #4]
}
 81032c2:	4618      	mov	r0, r3
 81032c4:	3718      	adds	r7, #24
 81032c6:	46bd      	mov	sp, r7
 81032c8:	bd80      	pop	{r7, pc}

081032ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 81032ca:	b580      	push	{r7, lr}
 81032cc:	b086      	sub	sp, #24
 81032ce:	af00      	add	r7, sp, #0
 81032d0:	60f8      	str	r0, [r7, #12]
 81032d2:	60b9      	str	r1, [r7, #8]
 81032d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81032d6:	2300      	movs	r3, #0
 81032d8:	617b      	str	r3, [r7, #20]
 81032da:	e009      	b.n	81032f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 81032dc:	68bb      	ldr	r3, [r7, #8]
 81032de:	1c5a      	adds	r2, r3, #1
 81032e0:	60ba      	str	r2, [r7, #8]
 81032e2:	781b      	ldrb	r3, [r3, #0]
 81032e4:	4618      	mov	r0, r3
 81032e6:	f7ff fa7f 	bl	81027e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81032ea:	697b      	ldr	r3, [r7, #20]
 81032ec:	3301      	adds	r3, #1
 81032ee:	617b      	str	r3, [r7, #20]
 81032f0:	697a      	ldr	r2, [r7, #20]
 81032f2:	687b      	ldr	r3, [r7, #4]
 81032f4:	429a      	cmp	r2, r3
 81032f6:	dbf1      	blt.n	81032dc <_write+0x12>
  }
  return len;
 81032f8:	687b      	ldr	r3, [r7, #4]
}
 81032fa:	4618      	mov	r0, r3
 81032fc:	3718      	adds	r7, #24
 81032fe:	46bd      	mov	sp, r7
 8103300:	bd80      	pop	{r7, pc}

08103302 <_close>:

int _close(int file)
{
 8103302:	b480      	push	{r7}
 8103304:	b083      	sub	sp, #12
 8103306:	af00      	add	r7, sp, #0
 8103308:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 810330a:	f04f 33ff 	mov.w	r3, #4294967295
}
 810330e:	4618      	mov	r0, r3
 8103310:	370c      	adds	r7, #12
 8103312:	46bd      	mov	sp, r7
 8103314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103318:	4770      	bx	lr

0810331a <_fstat>:


int _fstat(int file, struct stat *st)
{
 810331a:	b480      	push	{r7}
 810331c:	b083      	sub	sp, #12
 810331e:	af00      	add	r7, sp, #0
 8103320:	6078      	str	r0, [r7, #4]
 8103322:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8103324:	683b      	ldr	r3, [r7, #0]
 8103326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810332a:	605a      	str	r2, [r3, #4]
  return 0;
 810332c:	2300      	movs	r3, #0
}
 810332e:	4618      	mov	r0, r3
 8103330:	370c      	adds	r7, #12
 8103332:	46bd      	mov	sp, r7
 8103334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103338:	4770      	bx	lr

0810333a <_isatty>:

int _isatty(int file)
{
 810333a:	b480      	push	{r7}
 810333c:	b083      	sub	sp, #12
 810333e:	af00      	add	r7, sp, #0
 8103340:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8103342:	2301      	movs	r3, #1
}
 8103344:	4618      	mov	r0, r3
 8103346:	370c      	adds	r7, #12
 8103348:	46bd      	mov	sp, r7
 810334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810334e:	4770      	bx	lr

08103350 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8103350:	b480      	push	{r7}
 8103352:	b085      	sub	sp, #20
 8103354:	af00      	add	r7, sp, #0
 8103356:	60f8      	str	r0, [r7, #12]
 8103358:	60b9      	str	r1, [r7, #8]
 810335a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 810335c:	2300      	movs	r3, #0
}
 810335e:	4618      	mov	r0, r3
 8103360:	3714      	adds	r7, #20
 8103362:	46bd      	mov	sp, r7
 8103364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103368:	4770      	bx	lr
	...

0810336c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 810336c:	b580      	push	{r7, lr}
 810336e:	b086      	sub	sp, #24
 8103370:	af00      	add	r7, sp, #0
 8103372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8103374:	4a14      	ldr	r2, [pc, #80]	; (81033c8 <_sbrk+0x5c>)
 8103376:	4b15      	ldr	r3, [pc, #84]	; (81033cc <_sbrk+0x60>)
 8103378:	1ad3      	subs	r3, r2, r3
 810337a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 810337c:	697b      	ldr	r3, [r7, #20]
 810337e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8103380:	4b13      	ldr	r3, [pc, #76]	; (81033d0 <_sbrk+0x64>)
 8103382:	681b      	ldr	r3, [r3, #0]
 8103384:	2b00      	cmp	r3, #0
 8103386:	d102      	bne.n	810338e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8103388:	4b11      	ldr	r3, [pc, #68]	; (81033d0 <_sbrk+0x64>)
 810338a:	4a12      	ldr	r2, [pc, #72]	; (81033d4 <_sbrk+0x68>)
 810338c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 810338e:	4b10      	ldr	r3, [pc, #64]	; (81033d0 <_sbrk+0x64>)
 8103390:	681a      	ldr	r2, [r3, #0]
 8103392:	687b      	ldr	r3, [r7, #4]
 8103394:	4413      	add	r3, r2
 8103396:	693a      	ldr	r2, [r7, #16]
 8103398:	429a      	cmp	r2, r3
 810339a:	d207      	bcs.n	81033ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 810339c:	f007 fc7e 	bl	810ac9c <__errno>
 81033a0:	4603      	mov	r3, r0
 81033a2:	220c      	movs	r2, #12
 81033a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81033a6:	f04f 33ff 	mov.w	r3, #4294967295
 81033aa:	e009      	b.n	81033c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81033ac:	4b08      	ldr	r3, [pc, #32]	; (81033d0 <_sbrk+0x64>)
 81033ae:	681b      	ldr	r3, [r3, #0]
 81033b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81033b2:	4b07      	ldr	r3, [pc, #28]	; (81033d0 <_sbrk+0x64>)
 81033b4:	681a      	ldr	r2, [r3, #0]
 81033b6:	687b      	ldr	r3, [r7, #4]
 81033b8:	4413      	add	r3, r2
 81033ba:	4a05      	ldr	r2, [pc, #20]	; (81033d0 <_sbrk+0x64>)
 81033bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81033be:	68fb      	ldr	r3, [r7, #12]
}
 81033c0:	4618      	mov	r0, r3
 81033c2:	3718      	adds	r7, #24
 81033c4:	46bd      	mov	sp, r7
 81033c6:	bd80      	pop	{r7, pc}
 81033c8:	10048000 	.word	0x10048000
 81033cc:	00000400 	.word	0x00000400
 81033d0:	10000560 	.word	0x10000560
 81033d4:	100006b8 	.word	0x100006b8

081033d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81033d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8103410 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81033dc:	f7fd fe90 	bl	8101100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81033e0:	480c      	ldr	r0, [pc, #48]	; (8103414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81033e2:	490d      	ldr	r1, [pc, #52]	; (8103418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81033e4:	4a0d      	ldr	r2, [pc, #52]	; (810341c <LoopFillZerobss+0x1a>)
  movs r3, #0
 81033e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81033e8:	e002      	b.n	81033f0 <LoopCopyDataInit>

081033ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81033ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81033ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81033ee:	3304      	adds	r3, #4

081033f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81033f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81033f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81033f4:	d3f9      	bcc.n	81033ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81033f6:	4a0a      	ldr	r2, [pc, #40]	; (8103420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81033f8:	4c0a      	ldr	r4, [pc, #40]	; (8103424 <LoopFillZerobss+0x22>)
  movs r3, #0
 81033fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 81033fc:	e001      	b.n	8103402 <LoopFillZerobss>

081033fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81033fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8103400:	3204      	adds	r2, #4

08103402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8103402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8103404:	d3fb      	bcc.n	81033fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8103406:	f007 fc4f 	bl	810aca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810340a:	f7fe fd0b 	bl	8101e24 <main>
  bx  lr
 810340e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8103410:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8103414:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8103418:	10000248 	.word	0x10000248
  ldr r2, =_sidata
 810341c:	0810eca8 	.word	0x0810eca8
  ldr r2, =_sbss
 8103420:	10000248 	.word	0x10000248
  ldr r4, =_ebss
 8103424:	100006b4 	.word	0x100006b4

08103428 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8103428:	e7fe      	b.n	8103428 <ADC3_IRQHandler>
	...

0810342c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810342c:	b580      	push	{r7, lr}
 810342e:	b082      	sub	sp, #8
 8103430:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8103432:	4b28      	ldr	r3, [pc, #160]	; (81034d4 <HAL_Init+0xa8>)
 8103434:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103438:	4a26      	ldr	r2, [pc, #152]	; (81034d4 <HAL_Init+0xa8>)
 810343a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810343e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8103442:	4b24      	ldr	r3, [pc, #144]	; (81034d4 <HAL_Init+0xa8>)
 8103444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8103448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810344c:	603b      	str	r3, [r7, #0]
 810344e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8103450:	4b21      	ldr	r3, [pc, #132]	; (81034d8 <HAL_Init+0xac>)
 8103452:	681b      	ldr	r3, [r3, #0]
 8103454:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8103458:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810345c:	4a1e      	ldr	r2, [pc, #120]	; (81034d8 <HAL_Init+0xac>)
 810345e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8103462:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8103464:	4b1c      	ldr	r3, [pc, #112]	; (81034d8 <HAL_Init+0xac>)
 8103466:	681b      	ldr	r3, [r3, #0]
 8103468:	4a1b      	ldr	r2, [pc, #108]	; (81034d8 <HAL_Init+0xac>)
 810346a:	f043 0301 	orr.w	r3, r3, #1
 810346e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8103470:	2003      	movs	r0, #3
 8103472:	f000 f983 	bl	810377c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8103476:	f001 fa5d 	bl	8104934 <HAL_RCC_GetSysClockFreq>
 810347a:	4602      	mov	r2, r0
 810347c:	4b15      	ldr	r3, [pc, #84]	; (81034d4 <HAL_Init+0xa8>)
 810347e:	699b      	ldr	r3, [r3, #24]
 8103480:	0a1b      	lsrs	r3, r3, #8
 8103482:	f003 030f 	and.w	r3, r3, #15
 8103486:	4915      	ldr	r1, [pc, #84]	; (81034dc <HAL_Init+0xb0>)
 8103488:	5ccb      	ldrb	r3, [r1, r3]
 810348a:	f003 031f 	and.w	r3, r3, #31
 810348e:	fa22 f303 	lsr.w	r3, r2, r3
 8103492:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103494:	4b0f      	ldr	r3, [pc, #60]	; (81034d4 <HAL_Init+0xa8>)
 8103496:	699b      	ldr	r3, [r3, #24]
 8103498:	f003 030f 	and.w	r3, r3, #15
 810349c:	4a0f      	ldr	r2, [pc, #60]	; (81034dc <HAL_Init+0xb0>)
 810349e:	5cd3      	ldrb	r3, [r2, r3]
 81034a0:	f003 031f 	and.w	r3, r3, #31
 81034a4:	687a      	ldr	r2, [r7, #4]
 81034a6:	fa22 f303 	lsr.w	r3, r2, r3
 81034aa:	4a0d      	ldr	r2, [pc, #52]	; (81034e0 <HAL_Init+0xb4>)
 81034ac:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81034ae:	4b0c      	ldr	r3, [pc, #48]	; (81034e0 <HAL_Init+0xb4>)
 81034b0:	681b      	ldr	r3, [r3, #0]
 81034b2:	4a0c      	ldr	r2, [pc, #48]	; (81034e4 <HAL_Init+0xb8>)
 81034b4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81034b6:	2000      	movs	r0, #0
 81034b8:	f000 f816 	bl	81034e8 <HAL_InitTick>
 81034bc:	4603      	mov	r3, r0
 81034be:	2b00      	cmp	r3, #0
 81034c0:	d001      	beq.n	81034c6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81034c2:	2301      	movs	r3, #1
 81034c4:	e002      	b.n	81034cc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81034c6:	f7ff fc49 	bl	8102d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81034ca:	2300      	movs	r3, #0
}
 81034cc:	4618      	mov	r0, r3
 81034ce:	3708      	adds	r7, #8
 81034d0:	46bd      	mov	sp, r7
 81034d2:	bd80      	pop	{r7, pc}
 81034d4:	58024400 	.word	0x58024400
 81034d8:	40024400 	.word	0x40024400
 81034dc:	0810e838 	.word	0x0810e838
 81034e0:	10000004 	.word	0x10000004
 81034e4:	10000000 	.word	0x10000000

081034e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81034e8:	b580      	push	{r7, lr}
 81034ea:	b082      	sub	sp, #8
 81034ec:	af00      	add	r7, sp, #0
 81034ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 81034f0:	4b15      	ldr	r3, [pc, #84]	; (8103548 <HAL_InitTick+0x60>)
 81034f2:	781b      	ldrb	r3, [r3, #0]
 81034f4:	2b00      	cmp	r3, #0
 81034f6:	d101      	bne.n	81034fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 81034f8:	2301      	movs	r3, #1
 81034fa:	e021      	b.n	8103540 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 81034fc:	4b13      	ldr	r3, [pc, #76]	; (810354c <HAL_InitTick+0x64>)
 81034fe:	681a      	ldr	r2, [r3, #0]
 8103500:	4b11      	ldr	r3, [pc, #68]	; (8103548 <HAL_InitTick+0x60>)
 8103502:	781b      	ldrb	r3, [r3, #0]
 8103504:	4619      	mov	r1, r3
 8103506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810350a:	fbb3 f3f1 	udiv	r3, r3, r1
 810350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103512:	4618      	mov	r0, r3
 8103514:	f000 f965 	bl	81037e2 <HAL_SYSTICK_Config>
 8103518:	4603      	mov	r3, r0
 810351a:	2b00      	cmp	r3, #0
 810351c:	d001      	beq.n	8103522 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810351e:	2301      	movs	r3, #1
 8103520:	e00e      	b.n	8103540 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8103522:	687b      	ldr	r3, [r7, #4]
 8103524:	2b0f      	cmp	r3, #15
 8103526:	d80a      	bhi.n	810353e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8103528:	2200      	movs	r2, #0
 810352a:	6879      	ldr	r1, [r7, #4]
 810352c:	f04f 30ff 	mov.w	r0, #4294967295
 8103530:	f000 f92f 	bl	8103792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8103534:	4a06      	ldr	r2, [pc, #24]	; (8103550 <HAL_InitTick+0x68>)
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810353a:	2300      	movs	r3, #0
 810353c:	e000      	b.n	8103540 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810353e:	2301      	movs	r3, #1
}
 8103540:	4618      	mov	r0, r3
 8103542:	3708      	adds	r7, #8
 8103544:	46bd      	mov	sp, r7
 8103546:	bd80      	pop	{r7, pc}
 8103548:	1000006c 	.word	0x1000006c
 810354c:	10000000 	.word	0x10000000
 8103550:	10000068 	.word	0x10000068

08103554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8103554:	b480      	push	{r7}
 8103556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8103558:	4b06      	ldr	r3, [pc, #24]	; (8103574 <HAL_IncTick+0x20>)
 810355a:	781b      	ldrb	r3, [r3, #0]
 810355c:	461a      	mov	r2, r3
 810355e:	4b06      	ldr	r3, [pc, #24]	; (8103578 <HAL_IncTick+0x24>)
 8103560:	681b      	ldr	r3, [r3, #0]
 8103562:	4413      	add	r3, r2
 8103564:	4a04      	ldr	r2, [pc, #16]	; (8103578 <HAL_IncTick+0x24>)
 8103566:	6013      	str	r3, [r2, #0]
}
 8103568:	bf00      	nop
 810356a:	46bd      	mov	sp, r7
 810356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103570:	4770      	bx	lr
 8103572:	bf00      	nop
 8103574:	1000006c 	.word	0x1000006c
 8103578:	10000564 	.word	0x10000564

0810357c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810357c:	b480      	push	{r7}
 810357e:	af00      	add	r7, sp, #0
  return uwTick;
 8103580:	4b03      	ldr	r3, [pc, #12]	; (8103590 <HAL_GetTick+0x14>)
 8103582:	681b      	ldr	r3, [r3, #0]
}
 8103584:	4618      	mov	r0, r3
 8103586:	46bd      	mov	sp, r7
 8103588:	f85d 7b04 	ldr.w	r7, [sp], #4
 810358c:	4770      	bx	lr
 810358e:	bf00      	nop
 8103590:	10000564 	.word	0x10000564

08103594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8103594:	b580      	push	{r7, lr}
 8103596:	b084      	sub	sp, #16
 8103598:	af00      	add	r7, sp, #0
 810359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810359c:	f7ff ffee 	bl	810357c <HAL_GetTick>
 81035a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81035a2:	687b      	ldr	r3, [r7, #4]
 81035a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81035a6:	68fb      	ldr	r3, [r7, #12]
 81035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 81035ac:	d005      	beq.n	81035ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81035ae:	4b0a      	ldr	r3, [pc, #40]	; (81035d8 <HAL_Delay+0x44>)
 81035b0:	781b      	ldrb	r3, [r3, #0]
 81035b2:	461a      	mov	r2, r3
 81035b4:	68fb      	ldr	r3, [r7, #12]
 81035b6:	4413      	add	r3, r2
 81035b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 81035ba:	bf00      	nop
 81035bc:	f7ff ffde 	bl	810357c <HAL_GetTick>
 81035c0:	4602      	mov	r2, r0
 81035c2:	68bb      	ldr	r3, [r7, #8]
 81035c4:	1ad3      	subs	r3, r2, r3
 81035c6:	68fa      	ldr	r2, [r7, #12]
 81035c8:	429a      	cmp	r2, r3
 81035ca:	d8f7      	bhi.n	81035bc <HAL_Delay+0x28>
  {
  }
}
 81035cc:	bf00      	nop
 81035ce:	bf00      	nop
 81035d0:	3710      	adds	r7, #16
 81035d2:	46bd      	mov	sp, r7
 81035d4:	bd80      	pop	{r7, pc}
 81035d6:	bf00      	nop
 81035d8:	1000006c 	.word	0x1000006c

081035dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81035dc:	b480      	push	{r7}
 81035de:	b085      	sub	sp, #20
 81035e0:	af00      	add	r7, sp, #0
 81035e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81035e4:	687b      	ldr	r3, [r7, #4]
 81035e6:	f003 0307 	and.w	r3, r3, #7
 81035ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81035ec:	4b0c      	ldr	r3, [pc, #48]	; (8103620 <__NVIC_SetPriorityGrouping+0x44>)
 81035ee:	68db      	ldr	r3, [r3, #12]
 81035f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81035f2:	68ba      	ldr	r2, [r7, #8]
 81035f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 81035f8:	4013      	ands	r3, r2
 81035fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81035fc:	68fb      	ldr	r3, [r7, #12]
 81035fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103600:	68bb      	ldr	r3, [r7, #8]
 8103602:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103604:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810360c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810360e:	4a04      	ldr	r2, [pc, #16]	; (8103620 <__NVIC_SetPriorityGrouping+0x44>)
 8103610:	68bb      	ldr	r3, [r7, #8]
 8103612:	60d3      	str	r3, [r2, #12]
}
 8103614:	bf00      	nop
 8103616:	3714      	adds	r7, #20
 8103618:	46bd      	mov	sp, r7
 810361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810361e:	4770      	bx	lr
 8103620:	e000ed00 	.word	0xe000ed00

08103624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8103624:	b480      	push	{r7}
 8103626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8103628:	4b04      	ldr	r3, [pc, #16]	; (810363c <__NVIC_GetPriorityGrouping+0x18>)
 810362a:	68db      	ldr	r3, [r3, #12]
 810362c:	0a1b      	lsrs	r3, r3, #8
 810362e:	f003 0307 	and.w	r3, r3, #7
}
 8103632:	4618      	mov	r0, r3
 8103634:	46bd      	mov	sp, r7
 8103636:	f85d 7b04 	ldr.w	r7, [sp], #4
 810363a:	4770      	bx	lr
 810363c:	e000ed00 	.word	0xe000ed00

08103640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103640:	b480      	push	{r7}
 8103642:	b083      	sub	sp, #12
 8103644:	af00      	add	r7, sp, #0
 8103646:	4603      	mov	r3, r0
 8103648:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810364a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810364e:	2b00      	cmp	r3, #0
 8103650:	db0b      	blt.n	810366a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8103652:	88fb      	ldrh	r3, [r7, #6]
 8103654:	f003 021f 	and.w	r2, r3, #31
 8103658:	4907      	ldr	r1, [pc, #28]	; (8103678 <__NVIC_EnableIRQ+0x38>)
 810365a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810365e:	095b      	lsrs	r3, r3, #5
 8103660:	2001      	movs	r0, #1
 8103662:	fa00 f202 	lsl.w	r2, r0, r2
 8103666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 810366a:	bf00      	nop
 810366c:	370c      	adds	r7, #12
 810366e:	46bd      	mov	sp, r7
 8103670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103674:	4770      	bx	lr
 8103676:	bf00      	nop
 8103678:	e000e100 	.word	0xe000e100

0810367c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810367c:	b480      	push	{r7}
 810367e:	b083      	sub	sp, #12
 8103680:	af00      	add	r7, sp, #0
 8103682:	4603      	mov	r3, r0
 8103684:	6039      	str	r1, [r7, #0]
 8103686:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103688:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810368c:	2b00      	cmp	r3, #0
 810368e:	db0a      	blt.n	81036a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103690:	683b      	ldr	r3, [r7, #0]
 8103692:	b2da      	uxtb	r2, r3
 8103694:	490c      	ldr	r1, [pc, #48]	; (81036c8 <__NVIC_SetPriority+0x4c>)
 8103696:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810369a:	0112      	lsls	r2, r2, #4
 810369c:	b2d2      	uxtb	r2, r2
 810369e:	440b      	add	r3, r1
 81036a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81036a4:	e00a      	b.n	81036bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81036a6:	683b      	ldr	r3, [r7, #0]
 81036a8:	b2da      	uxtb	r2, r3
 81036aa:	4908      	ldr	r1, [pc, #32]	; (81036cc <__NVIC_SetPriority+0x50>)
 81036ac:	88fb      	ldrh	r3, [r7, #6]
 81036ae:	f003 030f 	and.w	r3, r3, #15
 81036b2:	3b04      	subs	r3, #4
 81036b4:	0112      	lsls	r2, r2, #4
 81036b6:	b2d2      	uxtb	r2, r2
 81036b8:	440b      	add	r3, r1
 81036ba:	761a      	strb	r2, [r3, #24]
}
 81036bc:	bf00      	nop
 81036be:	370c      	adds	r7, #12
 81036c0:	46bd      	mov	sp, r7
 81036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81036c6:	4770      	bx	lr
 81036c8:	e000e100 	.word	0xe000e100
 81036cc:	e000ed00 	.word	0xe000ed00

081036d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81036d0:	b480      	push	{r7}
 81036d2:	b089      	sub	sp, #36	; 0x24
 81036d4:	af00      	add	r7, sp, #0
 81036d6:	60f8      	str	r0, [r7, #12]
 81036d8:	60b9      	str	r1, [r7, #8]
 81036da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81036dc:	68fb      	ldr	r3, [r7, #12]
 81036de:	f003 0307 	and.w	r3, r3, #7
 81036e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81036e4:	69fb      	ldr	r3, [r7, #28]
 81036e6:	f1c3 0307 	rsb	r3, r3, #7
 81036ea:	2b04      	cmp	r3, #4
 81036ec:	bf28      	it	cs
 81036ee:	2304      	movcs	r3, #4
 81036f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81036f2:	69fb      	ldr	r3, [r7, #28]
 81036f4:	3304      	adds	r3, #4
 81036f6:	2b06      	cmp	r3, #6
 81036f8:	d902      	bls.n	8103700 <NVIC_EncodePriority+0x30>
 81036fa:	69fb      	ldr	r3, [r7, #28]
 81036fc:	3b03      	subs	r3, #3
 81036fe:	e000      	b.n	8103702 <NVIC_EncodePriority+0x32>
 8103700:	2300      	movs	r3, #0
 8103702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103704:	f04f 32ff 	mov.w	r2, #4294967295
 8103708:	69bb      	ldr	r3, [r7, #24]
 810370a:	fa02 f303 	lsl.w	r3, r2, r3
 810370e:	43da      	mvns	r2, r3
 8103710:	68bb      	ldr	r3, [r7, #8]
 8103712:	401a      	ands	r2, r3
 8103714:	697b      	ldr	r3, [r7, #20]
 8103716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103718:	f04f 31ff 	mov.w	r1, #4294967295
 810371c:	697b      	ldr	r3, [r7, #20]
 810371e:	fa01 f303 	lsl.w	r3, r1, r3
 8103722:	43d9      	mvns	r1, r3
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103728:	4313      	orrs	r3, r2
         );
}
 810372a:	4618      	mov	r0, r3
 810372c:	3724      	adds	r7, #36	; 0x24
 810372e:	46bd      	mov	sp, r7
 8103730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103734:	4770      	bx	lr
	...

08103738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8103738:	b580      	push	{r7, lr}
 810373a:	b082      	sub	sp, #8
 810373c:	af00      	add	r7, sp, #0
 810373e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8103740:	687b      	ldr	r3, [r7, #4]
 8103742:	3b01      	subs	r3, #1
 8103744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103748:	d301      	bcc.n	810374e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810374a:	2301      	movs	r3, #1
 810374c:	e00f      	b.n	810376e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810374e:	4a0a      	ldr	r2, [pc, #40]	; (8103778 <SysTick_Config+0x40>)
 8103750:	687b      	ldr	r3, [r7, #4]
 8103752:	3b01      	subs	r3, #1
 8103754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8103756:	210f      	movs	r1, #15
 8103758:	f04f 30ff 	mov.w	r0, #4294967295
 810375c:	f7ff ff8e 	bl	810367c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8103760:	4b05      	ldr	r3, [pc, #20]	; (8103778 <SysTick_Config+0x40>)
 8103762:	2200      	movs	r2, #0
 8103764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8103766:	4b04      	ldr	r3, [pc, #16]	; (8103778 <SysTick_Config+0x40>)
 8103768:	2207      	movs	r2, #7
 810376a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 810376c:	2300      	movs	r3, #0
}
 810376e:	4618      	mov	r0, r3
 8103770:	3708      	adds	r7, #8
 8103772:	46bd      	mov	sp, r7
 8103774:	bd80      	pop	{r7, pc}
 8103776:	bf00      	nop
 8103778:	e000e010 	.word	0xe000e010

0810377c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810377c:	b580      	push	{r7, lr}
 810377e:	b082      	sub	sp, #8
 8103780:	af00      	add	r7, sp, #0
 8103782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103784:	6878      	ldr	r0, [r7, #4]
 8103786:	f7ff ff29 	bl	81035dc <__NVIC_SetPriorityGrouping>
}
 810378a:	bf00      	nop
 810378c:	3708      	adds	r7, #8
 810378e:	46bd      	mov	sp, r7
 8103790:	bd80      	pop	{r7, pc}

08103792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103792:	b580      	push	{r7, lr}
 8103794:	b086      	sub	sp, #24
 8103796:	af00      	add	r7, sp, #0
 8103798:	4603      	mov	r3, r0
 810379a:	60b9      	str	r1, [r7, #8]
 810379c:	607a      	str	r2, [r7, #4]
 810379e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81037a0:	f7ff ff40 	bl	8103624 <__NVIC_GetPriorityGrouping>
 81037a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81037a6:	687a      	ldr	r2, [r7, #4]
 81037a8:	68b9      	ldr	r1, [r7, #8]
 81037aa:	6978      	ldr	r0, [r7, #20]
 81037ac:	f7ff ff90 	bl	81036d0 <NVIC_EncodePriority>
 81037b0:	4602      	mov	r2, r0
 81037b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81037b6:	4611      	mov	r1, r2
 81037b8:	4618      	mov	r0, r3
 81037ba:	f7ff ff5f 	bl	810367c <__NVIC_SetPriority>
}
 81037be:	bf00      	nop
 81037c0:	3718      	adds	r7, #24
 81037c2:	46bd      	mov	sp, r7
 81037c4:	bd80      	pop	{r7, pc}

081037c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81037c6:	b580      	push	{r7, lr}
 81037c8:	b082      	sub	sp, #8
 81037ca:	af00      	add	r7, sp, #0
 81037cc:	4603      	mov	r3, r0
 81037ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81037d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81037d4:	4618      	mov	r0, r3
 81037d6:	f7ff ff33 	bl	8103640 <__NVIC_EnableIRQ>
}
 81037da:	bf00      	nop
 81037dc:	3708      	adds	r7, #8
 81037de:	46bd      	mov	sp, r7
 81037e0:	bd80      	pop	{r7, pc}

081037e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81037e2:	b580      	push	{r7, lr}
 81037e4:	b082      	sub	sp, #8
 81037e6:	af00      	add	r7, sp, #0
 81037e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81037ea:	6878      	ldr	r0, [r7, #4]
 81037ec:	f7ff ffa4 	bl	8103738 <SysTick_Config>
 81037f0:	4603      	mov	r3, r0
}
 81037f2:	4618      	mov	r0, r3
 81037f4:	3708      	adds	r7, #8
 81037f6:	46bd      	mov	sp, r7
 81037f8:	bd80      	pop	{r7, pc}
	...

081037fc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81037fc:	b480      	push	{r7}
 81037fe:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103800:	4b07      	ldr	r3, [pc, #28]	; (8103820 <HAL_GetCurrentCPUID+0x24>)
 8103802:	681b      	ldr	r3, [r3, #0]
 8103804:	091b      	lsrs	r3, r3, #4
 8103806:	f003 030f 	and.w	r3, r3, #15
 810380a:	2b07      	cmp	r3, #7
 810380c:	d101      	bne.n	8103812 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810380e:	2303      	movs	r3, #3
 8103810:	e000      	b.n	8103814 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103812:	2301      	movs	r3, #1
  }
}
 8103814:	4618      	mov	r0, r3
 8103816:	46bd      	mov	sp, r7
 8103818:	f85d 7b04 	ldr.w	r7, [sp], #4
 810381c:	4770      	bx	lr
 810381e:	bf00      	nop
 8103820:	e000ed00 	.word	0xe000ed00

08103824 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8103824:	b480      	push	{r7}
 8103826:	b089      	sub	sp, #36	; 0x24
 8103828:	af00      	add	r7, sp, #0
 810382a:	6078      	str	r0, [r7, #4]
 810382c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810382e:	2300      	movs	r3, #0
 8103830:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8103832:	4b89      	ldr	r3, [pc, #548]	; (8103a58 <HAL_GPIO_Init+0x234>)
 8103834:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103836:	e194      	b.n	8103b62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8103838:	683b      	ldr	r3, [r7, #0]
 810383a:	681a      	ldr	r2, [r3, #0]
 810383c:	2101      	movs	r1, #1
 810383e:	69fb      	ldr	r3, [r7, #28]
 8103840:	fa01 f303 	lsl.w	r3, r1, r3
 8103844:	4013      	ands	r3, r2
 8103846:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8103848:	693b      	ldr	r3, [r7, #16]
 810384a:	2b00      	cmp	r3, #0
 810384c:	f000 8186 	beq.w	8103b5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8103850:	683b      	ldr	r3, [r7, #0]
 8103852:	685b      	ldr	r3, [r3, #4]
 8103854:	f003 0303 	and.w	r3, r3, #3
 8103858:	2b01      	cmp	r3, #1
 810385a:	d005      	beq.n	8103868 <HAL_GPIO_Init+0x44>
 810385c:	683b      	ldr	r3, [r7, #0]
 810385e:	685b      	ldr	r3, [r3, #4]
 8103860:	f003 0303 	and.w	r3, r3, #3
 8103864:	2b02      	cmp	r3, #2
 8103866:	d130      	bne.n	81038ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8103868:	687b      	ldr	r3, [r7, #4]
 810386a:	689b      	ldr	r3, [r3, #8]
 810386c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810386e:	69fb      	ldr	r3, [r7, #28]
 8103870:	005b      	lsls	r3, r3, #1
 8103872:	2203      	movs	r2, #3
 8103874:	fa02 f303 	lsl.w	r3, r2, r3
 8103878:	43db      	mvns	r3, r3
 810387a:	69ba      	ldr	r2, [r7, #24]
 810387c:	4013      	ands	r3, r2
 810387e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103880:	683b      	ldr	r3, [r7, #0]
 8103882:	68da      	ldr	r2, [r3, #12]
 8103884:	69fb      	ldr	r3, [r7, #28]
 8103886:	005b      	lsls	r3, r3, #1
 8103888:	fa02 f303 	lsl.w	r3, r2, r3
 810388c:	69ba      	ldr	r2, [r7, #24]
 810388e:	4313      	orrs	r3, r2
 8103890:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	69ba      	ldr	r2, [r7, #24]
 8103896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103898:	687b      	ldr	r3, [r7, #4]
 810389a:	685b      	ldr	r3, [r3, #4]
 810389c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810389e:	2201      	movs	r2, #1
 81038a0:	69fb      	ldr	r3, [r7, #28]
 81038a2:	fa02 f303 	lsl.w	r3, r2, r3
 81038a6:	43db      	mvns	r3, r3
 81038a8:	69ba      	ldr	r2, [r7, #24]
 81038aa:	4013      	ands	r3, r2
 81038ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81038ae:	683b      	ldr	r3, [r7, #0]
 81038b0:	685b      	ldr	r3, [r3, #4]
 81038b2:	091b      	lsrs	r3, r3, #4
 81038b4:	f003 0201 	and.w	r2, r3, #1
 81038b8:	69fb      	ldr	r3, [r7, #28]
 81038ba:	fa02 f303 	lsl.w	r3, r2, r3
 81038be:	69ba      	ldr	r2, [r7, #24]
 81038c0:	4313      	orrs	r3, r2
 81038c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	69ba      	ldr	r2, [r7, #24]
 81038c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81038ca:	683b      	ldr	r3, [r7, #0]
 81038cc:	685b      	ldr	r3, [r3, #4]
 81038ce:	f003 0303 	and.w	r3, r3, #3
 81038d2:	2b03      	cmp	r3, #3
 81038d4:	d017      	beq.n	8103906 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81038d6:	687b      	ldr	r3, [r7, #4]
 81038d8:	68db      	ldr	r3, [r3, #12]
 81038da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81038dc:	69fb      	ldr	r3, [r7, #28]
 81038de:	005b      	lsls	r3, r3, #1
 81038e0:	2203      	movs	r2, #3
 81038e2:	fa02 f303 	lsl.w	r3, r2, r3
 81038e6:	43db      	mvns	r3, r3
 81038e8:	69ba      	ldr	r2, [r7, #24]
 81038ea:	4013      	ands	r3, r2
 81038ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81038ee:	683b      	ldr	r3, [r7, #0]
 81038f0:	689a      	ldr	r2, [r3, #8]
 81038f2:	69fb      	ldr	r3, [r7, #28]
 81038f4:	005b      	lsls	r3, r3, #1
 81038f6:	fa02 f303 	lsl.w	r3, r2, r3
 81038fa:	69ba      	ldr	r2, [r7, #24]
 81038fc:	4313      	orrs	r3, r2
 81038fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	69ba      	ldr	r2, [r7, #24]
 8103904:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8103906:	683b      	ldr	r3, [r7, #0]
 8103908:	685b      	ldr	r3, [r3, #4]
 810390a:	f003 0303 	and.w	r3, r3, #3
 810390e:	2b02      	cmp	r3, #2
 8103910:	d123      	bne.n	810395a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103912:	69fb      	ldr	r3, [r7, #28]
 8103914:	08da      	lsrs	r2, r3, #3
 8103916:	687b      	ldr	r3, [r7, #4]
 8103918:	3208      	adds	r2, #8
 810391a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810391e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8103920:	69fb      	ldr	r3, [r7, #28]
 8103922:	f003 0307 	and.w	r3, r3, #7
 8103926:	009b      	lsls	r3, r3, #2
 8103928:	220f      	movs	r2, #15
 810392a:	fa02 f303 	lsl.w	r3, r2, r3
 810392e:	43db      	mvns	r3, r3
 8103930:	69ba      	ldr	r2, [r7, #24]
 8103932:	4013      	ands	r3, r2
 8103934:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8103936:	683b      	ldr	r3, [r7, #0]
 8103938:	691a      	ldr	r2, [r3, #16]
 810393a:	69fb      	ldr	r3, [r7, #28]
 810393c:	f003 0307 	and.w	r3, r3, #7
 8103940:	009b      	lsls	r3, r3, #2
 8103942:	fa02 f303 	lsl.w	r3, r2, r3
 8103946:	69ba      	ldr	r2, [r7, #24]
 8103948:	4313      	orrs	r3, r2
 810394a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 810394c:	69fb      	ldr	r3, [r7, #28]
 810394e:	08da      	lsrs	r2, r3, #3
 8103950:	687b      	ldr	r3, [r7, #4]
 8103952:	3208      	adds	r2, #8
 8103954:	69b9      	ldr	r1, [r7, #24]
 8103956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810395a:	687b      	ldr	r3, [r7, #4]
 810395c:	681b      	ldr	r3, [r3, #0]
 810395e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8103960:	69fb      	ldr	r3, [r7, #28]
 8103962:	005b      	lsls	r3, r3, #1
 8103964:	2203      	movs	r2, #3
 8103966:	fa02 f303 	lsl.w	r3, r2, r3
 810396a:	43db      	mvns	r3, r3
 810396c:	69ba      	ldr	r2, [r7, #24]
 810396e:	4013      	ands	r3, r2
 8103970:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8103972:	683b      	ldr	r3, [r7, #0]
 8103974:	685b      	ldr	r3, [r3, #4]
 8103976:	f003 0203 	and.w	r2, r3, #3
 810397a:	69fb      	ldr	r3, [r7, #28]
 810397c:	005b      	lsls	r3, r3, #1
 810397e:	fa02 f303 	lsl.w	r3, r2, r3
 8103982:	69ba      	ldr	r2, [r7, #24]
 8103984:	4313      	orrs	r3, r2
 8103986:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103988:	687b      	ldr	r3, [r7, #4]
 810398a:	69ba      	ldr	r2, [r7, #24]
 810398c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810398e:	683b      	ldr	r3, [r7, #0]
 8103990:	685b      	ldr	r3, [r3, #4]
 8103992:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8103996:	2b00      	cmp	r3, #0
 8103998:	f000 80e0 	beq.w	8103b5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810399c:	4b2f      	ldr	r3, [pc, #188]	; (8103a5c <HAL_GPIO_Init+0x238>)
 810399e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81039a2:	4a2e      	ldr	r2, [pc, #184]	; (8103a5c <HAL_GPIO_Init+0x238>)
 81039a4:	f043 0302 	orr.w	r3, r3, #2
 81039a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81039ac:	4b2b      	ldr	r3, [pc, #172]	; (8103a5c <HAL_GPIO_Init+0x238>)
 81039ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81039b2:	f003 0302 	and.w	r3, r3, #2
 81039b6:	60fb      	str	r3, [r7, #12]
 81039b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81039ba:	4a29      	ldr	r2, [pc, #164]	; (8103a60 <HAL_GPIO_Init+0x23c>)
 81039bc:	69fb      	ldr	r3, [r7, #28]
 81039be:	089b      	lsrs	r3, r3, #2
 81039c0:	3302      	adds	r3, #2
 81039c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81039c8:	69fb      	ldr	r3, [r7, #28]
 81039ca:	f003 0303 	and.w	r3, r3, #3
 81039ce:	009b      	lsls	r3, r3, #2
 81039d0:	220f      	movs	r2, #15
 81039d2:	fa02 f303 	lsl.w	r3, r2, r3
 81039d6:	43db      	mvns	r3, r3
 81039d8:	69ba      	ldr	r2, [r7, #24]
 81039da:	4013      	ands	r3, r2
 81039dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81039de:	687b      	ldr	r3, [r7, #4]
 81039e0:	4a20      	ldr	r2, [pc, #128]	; (8103a64 <HAL_GPIO_Init+0x240>)
 81039e2:	4293      	cmp	r3, r2
 81039e4:	d052      	beq.n	8103a8c <HAL_GPIO_Init+0x268>
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	4a1f      	ldr	r2, [pc, #124]	; (8103a68 <HAL_GPIO_Init+0x244>)
 81039ea:	4293      	cmp	r3, r2
 81039ec:	d031      	beq.n	8103a52 <HAL_GPIO_Init+0x22e>
 81039ee:	687b      	ldr	r3, [r7, #4]
 81039f0:	4a1e      	ldr	r2, [pc, #120]	; (8103a6c <HAL_GPIO_Init+0x248>)
 81039f2:	4293      	cmp	r3, r2
 81039f4:	d02b      	beq.n	8103a4e <HAL_GPIO_Init+0x22a>
 81039f6:	687b      	ldr	r3, [r7, #4]
 81039f8:	4a1d      	ldr	r2, [pc, #116]	; (8103a70 <HAL_GPIO_Init+0x24c>)
 81039fa:	4293      	cmp	r3, r2
 81039fc:	d025      	beq.n	8103a4a <HAL_GPIO_Init+0x226>
 81039fe:	687b      	ldr	r3, [r7, #4]
 8103a00:	4a1c      	ldr	r2, [pc, #112]	; (8103a74 <HAL_GPIO_Init+0x250>)
 8103a02:	4293      	cmp	r3, r2
 8103a04:	d01f      	beq.n	8103a46 <HAL_GPIO_Init+0x222>
 8103a06:	687b      	ldr	r3, [r7, #4]
 8103a08:	4a1b      	ldr	r2, [pc, #108]	; (8103a78 <HAL_GPIO_Init+0x254>)
 8103a0a:	4293      	cmp	r3, r2
 8103a0c:	d019      	beq.n	8103a42 <HAL_GPIO_Init+0x21e>
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	4a1a      	ldr	r2, [pc, #104]	; (8103a7c <HAL_GPIO_Init+0x258>)
 8103a12:	4293      	cmp	r3, r2
 8103a14:	d013      	beq.n	8103a3e <HAL_GPIO_Init+0x21a>
 8103a16:	687b      	ldr	r3, [r7, #4]
 8103a18:	4a19      	ldr	r2, [pc, #100]	; (8103a80 <HAL_GPIO_Init+0x25c>)
 8103a1a:	4293      	cmp	r3, r2
 8103a1c:	d00d      	beq.n	8103a3a <HAL_GPIO_Init+0x216>
 8103a1e:	687b      	ldr	r3, [r7, #4]
 8103a20:	4a18      	ldr	r2, [pc, #96]	; (8103a84 <HAL_GPIO_Init+0x260>)
 8103a22:	4293      	cmp	r3, r2
 8103a24:	d007      	beq.n	8103a36 <HAL_GPIO_Init+0x212>
 8103a26:	687b      	ldr	r3, [r7, #4]
 8103a28:	4a17      	ldr	r2, [pc, #92]	; (8103a88 <HAL_GPIO_Init+0x264>)
 8103a2a:	4293      	cmp	r3, r2
 8103a2c:	d101      	bne.n	8103a32 <HAL_GPIO_Init+0x20e>
 8103a2e:	2309      	movs	r3, #9
 8103a30:	e02d      	b.n	8103a8e <HAL_GPIO_Init+0x26a>
 8103a32:	230a      	movs	r3, #10
 8103a34:	e02b      	b.n	8103a8e <HAL_GPIO_Init+0x26a>
 8103a36:	2308      	movs	r3, #8
 8103a38:	e029      	b.n	8103a8e <HAL_GPIO_Init+0x26a>
 8103a3a:	2307      	movs	r3, #7
 8103a3c:	e027      	b.n	8103a8e <HAL_GPIO_Init+0x26a>
 8103a3e:	2306      	movs	r3, #6
 8103a40:	e025      	b.n	8103a8e <HAL_GPIO_Init+0x26a>
 8103a42:	2305      	movs	r3, #5
 8103a44:	e023      	b.n	8103a8e <HAL_GPIO_Init+0x26a>
 8103a46:	2304      	movs	r3, #4
 8103a48:	e021      	b.n	8103a8e <HAL_GPIO_Init+0x26a>
 8103a4a:	2303      	movs	r3, #3
 8103a4c:	e01f      	b.n	8103a8e <HAL_GPIO_Init+0x26a>
 8103a4e:	2302      	movs	r3, #2
 8103a50:	e01d      	b.n	8103a8e <HAL_GPIO_Init+0x26a>
 8103a52:	2301      	movs	r3, #1
 8103a54:	e01b      	b.n	8103a8e <HAL_GPIO_Init+0x26a>
 8103a56:	bf00      	nop
 8103a58:	580000c0 	.word	0x580000c0
 8103a5c:	58024400 	.word	0x58024400
 8103a60:	58000400 	.word	0x58000400
 8103a64:	58020000 	.word	0x58020000
 8103a68:	58020400 	.word	0x58020400
 8103a6c:	58020800 	.word	0x58020800
 8103a70:	58020c00 	.word	0x58020c00
 8103a74:	58021000 	.word	0x58021000
 8103a78:	58021400 	.word	0x58021400
 8103a7c:	58021800 	.word	0x58021800
 8103a80:	58021c00 	.word	0x58021c00
 8103a84:	58022000 	.word	0x58022000
 8103a88:	58022400 	.word	0x58022400
 8103a8c:	2300      	movs	r3, #0
 8103a8e:	69fa      	ldr	r2, [r7, #28]
 8103a90:	f002 0203 	and.w	r2, r2, #3
 8103a94:	0092      	lsls	r2, r2, #2
 8103a96:	4093      	lsls	r3, r2
 8103a98:	69ba      	ldr	r2, [r7, #24]
 8103a9a:	4313      	orrs	r3, r2
 8103a9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8103a9e:	4938      	ldr	r1, [pc, #224]	; (8103b80 <HAL_GPIO_Init+0x35c>)
 8103aa0:	69fb      	ldr	r3, [r7, #28]
 8103aa2:	089b      	lsrs	r3, r3, #2
 8103aa4:	3302      	adds	r3, #2
 8103aa6:	69ba      	ldr	r2, [r7, #24]
 8103aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103ab0:	681b      	ldr	r3, [r3, #0]
 8103ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103ab4:	693b      	ldr	r3, [r7, #16]
 8103ab6:	43db      	mvns	r3, r3
 8103ab8:	69ba      	ldr	r2, [r7, #24]
 8103aba:	4013      	ands	r3, r2
 8103abc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8103abe:	683b      	ldr	r3, [r7, #0]
 8103ac0:	685b      	ldr	r3, [r3, #4]
 8103ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8103ac6:	2b00      	cmp	r3, #0
 8103ac8:	d003      	beq.n	8103ad2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8103aca:	69ba      	ldr	r2, [r7, #24]
 8103acc:	693b      	ldr	r3, [r7, #16]
 8103ace:	4313      	orrs	r3, r2
 8103ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8103ad2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103ad6:	69bb      	ldr	r3, [r7, #24]
 8103ad8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8103ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103ade:	685b      	ldr	r3, [r3, #4]
 8103ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103ae2:	693b      	ldr	r3, [r7, #16]
 8103ae4:	43db      	mvns	r3, r3
 8103ae6:	69ba      	ldr	r2, [r7, #24]
 8103ae8:	4013      	ands	r3, r2
 8103aea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8103aec:	683b      	ldr	r3, [r7, #0]
 8103aee:	685b      	ldr	r3, [r3, #4]
 8103af0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8103af4:	2b00      	cmp	r3, #0
 8103af6:	d003      	beq.n	8103b00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8103af8:	69ba      	ldr	r2, [r7, #24]
 8103afa:	693b      	ldr	r3, [r7, #16]
 8103afc:	4313      	orrs	r3, r2
 8103afe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8103b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8103b04:	69bb      	ldr	r3, [r7, #24]
 8103b06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8103b08:	697b      	ldr	r3, [r7, #20]
 8103b0a:	685b      	ldr	r3, [r3, #4]
 8103b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103b0e:	693b      	ldr	r3, [r7, #16]
 8103b10:	43db      	mvns	r3, r3
 8103b12:	69ba      	ldr	r2, [r7, #24]
 8103b14:	4013      	ands	r3, r2
 8103b16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8103b18:	683b      	ldr	r3, [r7, #0]
 8103b1a:	685b      	ldr	r3, [r3, #4]
 8103b1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8103b20:	2b00      	cmp	r3, #0
 8103b22:	d003      	beq.n	8103b2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8103b24:	69ba      	ldr	r2, [r7, #24]
 8103b26:	693b      	ldr	r3, [r7, #16]
 8103b28:	4313      	orrs	r3, r2
 8103b2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8103b2c:	697b      	ldr	r3, [r7, #20]
 8103b2e:	69ba      	ldr	r2, [r7, #24]
 8103b30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8103b32:	697b      	ldr	r3, [r7, #20]
 8103b34:	681b      	ldr	r3, [r3, #0]
 8103b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103b38:	693b      	ldr	r3, [r7, #16]
 8103b3a:	43db      	mvns	r3, r3
 8103b3c:	69ba      	ldr	r2, [r7, #24]
 8103b3e:	4013      	ands	r3, r2
 8103b40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8103b42:	683b      	ldr	r3, [r7, #0]
 8103b44:	685b      	ldr	r3, [r3, #4]
 8103b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103b4a:	2b00      	cmp	r3, #0
 8103b4c:	d003      	beq.n	8103b56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8103b4e:	69ba      	ldr	r2, [r7, #24]
 8103b50:	693b      	ldr	r3, [r7, #16]
 8103b52:	4313      	orrs	r3, r2
 8103b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103b56:	697b      	ldr	r3, [r7, #20]
 8103b58:	69ba      	ldr	r2, [r7, #24]
 8103b5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8103b5c:	69fb      	ldr	r3, [r7, #28]
 8103b5e:	3301      	adds	r3, #1
 8103b60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8103b62:	683b      	ldr	r3, [r7, #0]
 8103b64:	681a      	ldr	r2, [r3, #0]
 8103b66:	69fb      	ldr	r3, [r7, #28]
 8103b68:	fa22 f303 	lsr.w	r3, r2, r3
 8103b6c:	2b00      	cmp	r3, #0
 8103b6e:	f47f ae63 	bne.w	8103838 <HAL_GPIO_Init+0x14>
  }
}
 8103b72:	bf00      	nop
 8103b74:	bf00      	nop
 8103b76:	3724      	adds	r7, #36	; 0x24
 8103b78:	46bd      	mov	sp, r7
 8103b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103b7e:	4770      	bx	lr
 8103b80:	58000400 	.word	0x58000400

08103b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103b84:	b480      	push	{r7}
 8103b86:	b083      	sub	sp, #12
 8103b88:	af00      	add	r7, sp, #0
 8103b8a:	6078      	str	r0, [r7, #4]
 8103b8c:	460b      	mov	r3, r1
 8103b8e:	807b      	strh	r3, [r7, #2]
 8103b90:	4613      	mov	r3, r2
 8103b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103b94:	787b      	ldrb	r3, [r7, #1]
 8103b96:	2b00      	cmp	r3, #0
 8103b98:	d003      	beq.n	8103ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8103b9a:	887a      	ldrh	r2, [r7, #2]
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103ba0:	e003      	b.n	8103baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103ba2:	887b      	ldrh	r3, [r7, #2]
 8103ba4:	041a      	lsls	r2, r3, #16
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	619a      	str	r2, [r3, #24]
}
 8103baa:	bf00      	nop
 8103bac:	370c      	adds	r7, #12
 8103bae:	46bd      	mov	sp, r7
 8103bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bb4:	4770      	bx	lr
	...

08103bb8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103bb8:	b480      	push	{r7}
 8103bba:	b083      	sub	sp, #12
 8103bbc:	af00      	add	r7, sp, #0
 8103bbe:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103bc0:	4b05      	ldr	r3, [pc, #20]	; (8103bd8 <HAL_HSEM_ActivateNotification+0x20>)
 8103bc2:	681a      	ldr	r2, [r3, #0]
 8103bc4:	4904      	ldr	r1, [pc, #16]	; (8103bd8 <HAL_HSEM_ActivateNotification+0x20>)
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	4313      	orrs	r3, r2
 8103bca:	600b      	str	r3, [r1, #0]
#endif
}
 8103bcc:	bf00      	nop
 8103bce:	370c      	adds	r7, #12
 8103bd0:	46bd      	mov	sp, r7
 8103bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bd6:	4770      	bx	lr
 8103bd8:	58026510 	.word	0x58026510

08103bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8103bdc:	b580      	push	{r7, lr}
 8103bde:	b082      	sub	sp, #8
 8103be0:	af00      	add	r7, sp, #0
 8103be2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	2b00      	cmp	r3, #0
 8103be8:	d101      	bne.n	8103bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8103bea:	2301      	movs	r3, #1
 8103bec:	e08d      	b.n	8103d0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8103bee:	687b      	ldr	r3, [r7, #4]
 8103bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103bf4:	b2db      	uxtb	r3, r3
 8103bf6:	2b00      	cmp	r3, #0
 8103bf8:	d106      	bne.n	8103c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8103bfa:	687b      	ldr	r3, [r7, #4]
 8103bfc:	2200      	movs	r2, #0
 8103bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8103c02:	6878      	ldr	r0, [r7, #4]
 8103c04:	f7ff f8c4 	bl	8102d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8103c08:	687b      	ldr	r3, [r7, #4]
 8103c0a:	2224      	movs	r2, #36	; 0x24
 8103c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8103c10:	687b      	ldr	r3, [r7, #4]
 8103c12:	681b      	ldr	r3, [r3, #0]
 8103c14:	681a      	ldr	r2, [r3, #0]
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	681b      	ldr	r3, [r3, #0]
 8103c1a:	f022 0201 	bic.w	r2, r2, #1
 8103c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8103c20:	687b      	ldr	r3, [r7, #4]
 8103c22:	685a      	ldr	r2, [r3, #4]
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	681b      	ldr	r3, [r3, #0]
 8103c28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8103c2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8103c2e:	687b      	ldr	r3, [r7, #4]
 8103c30:	681b      	ldr	r3, [r3, #0]
 8103c32:	689a      	ldr	r2, [r3, #8]
 8103c34:	687b      	ldr	r3, [r7, #4]
 8103c36:	681b      	ldr	r3, [r3, #0]
 8103c38:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103c3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8103c3e:	687b      	ldr	r3, [r7, #4]
 8103c40:	68db      	ldr	r3, [r3, #12]
 8103c42:	2b01      	cmp	r3, #1
 8103c44:	d107      	bne.n	8103c56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8103c46:	687b      	ldr	r3, [r7, #4]
 8103c48:	689a      	ldr	r2, [r3, #8]
 8103c4a:	687b      	ldr	r3, [r7, #4]
 8103c4c:	681b      	ldr	r3, [r3, #0]
 8103c4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8103c52:	609a      	str	r2, [r3, #8]
 8103c54:	e006      	b.n	8103c64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8103c56:	687b      	ldr	r3, [r7, #4]
 8103c58:	689a      	ldr	r2, [r3, #8]
 8103c5a:	687b      	ldr	r3, [r7, #4]
 8103c5c:	681b      	ldr	r3, [r3, #0]
 8103c5e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8103c62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	68db      	ldr	r3, [r3, #12]
 8103c68:	2b02      	cmp	r3, #2
 8103c6a:	d108      	bne.n	8103c7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8103c6c:	687b      	ldr	r3, [r7, #4]
 8103c6e:	681b      	ldr	r3, [r3, #0]
 8103c70:	685a      	ldr	r2, [r3, #4]
 8103c72:	687b      	ldr	r3, [r7, #4]
 8103c74:	681b      	ldr	r3, [r3, #0]
 8103c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8103c7a:	605a      	str	r2, [r3, #4]
 8103c7c:	e007      	b.n	8103c8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8103c7e:	687b      	ldr	r3, [r7, #4]
 8103c80:	681b      	ldr	r3, [r3, #0]
 8103c82:	685a      	ldr	r2, [r3, #4]
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	681b      	ldr	r3, [r3, #0]
 8103c88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8103c8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	681b      	ldr	r3, [r3, #0]
 8103c92:	685b      	ldr	r3, [r3, #4]
 8103c94:	687a      	ldr	r2, [r7, #4]
 8103c96:	6812      	ldr	r2, [r2, #0]
 8103c98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8103c9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8103ca0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8103ca2:	687b      	ldr	r3, [r7, #4]
 8103ca4:	681b      	ldr	r3, [r3, #0]
 8103ca6:	68da      	ldr	r2, [r3, #12]
 8103ca8:	687b      	ldr	r3, [r7, #4]
 8103caa:	681b      	ldr	r3, [r3, #0]
 8103cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8103cb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	691a      	ldr	r2, [r3, #16]
 8103cb6:	687b      	ldr	r3, [r7, #4]
 8103cb8:	695b      	ldr	r3, [r3, #20]
 8103cba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8103cbe:	687b      	ldr	r3, [r7, #4]
 8103cc0:	699b      	ldr	r3, [r3, #24]
 8103cc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	681b      	ldr	r3, [r3, #0]
 8103cc8:	430a      	orrs	r2, r1
 8103cca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8103ccc:	687b      	ldr	r3, [r7, #4]
 8103cce:	69d9      	ldr	r1, [r3, #28]
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	6a1a      	ldr	r2, [r3, #32]
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	681b      	ldr	r3, [r3, #0]
 8103cd8:	430a      	orrs	r2, r1
 8103cda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	681b      	ldr	r3, [r3, #0]
 8103ce0:	681a      	ldr	r2, [r3, #0]
 8103ce2:	687b      	ldr	r3, [r7, #4]
 8103ce4:	681b      	ldr	r3, [r3, #0]
 8103ce6:	f042 0201 	orr.w	r2, r2, #1
 8103cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103cec:	687b      	ldr	r3, [r7, #4]
 8103cee:	2200      	movs	r2, #0
 8103cf0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8103cf2:	687b      	ldr	r3, [r7, #4]
 8103cf4:	2220      	movs	r2, #32
 8103cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8103cfa:	687b      	ldr	r3, [r7, #4]
 8103cfc:	2200      	movs	r2, #0
 8103cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8103d00:	687b      	ldr	r3, [r7, #4]
 8103d02:	2200      	movs	r2, #0
 8103d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8103d08:	2300      	movs	r3, #0
}
 8103d0a:	4618      	mov	r0, r3
 8103d0c:	3708      	adds	r7, #8
 8103d0e:	46bd      	mov	sp, r7
 8103d10:	bd80      	pop	{r7, pc}
	...

08103d14 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103d14:	b580      	push	{r7, lr}
 8103d16:	b088      	sub	sp, #32
 8103d18:	af02      	add	r7, sp, #8
 8103d1a:	60f8      	str	r0, [r7, #12]
 8103d1c:	4608      	mov	r0, r1
 8103d1e:	4611      	mov	r1, r2
 8103d20:	461a      	mov	r2, r3
 8103d22:	4603      	mov	r3, r0
 8103d24:	817b      	strh	r3, [r7, #10]
 8103d26:	460b      	mov	r3, r1
 8103d28:	813b      	strh	r3, [r7, #8]
 8103d2a:	4613      	mov	r3, r2
 8103d2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103d2e:	68fb      	ldr	r3, [r7, #12]
 8103d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103d34:	b2db      	uxtb	r3, r3
 8103d36:	2b20      	cmp	r3, #32
 8103d38:	f040 80f9 	bne.w	8103f2e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8103d3c:	6a3b      	ldr	r3, [r7, #32]
 8103d3e:	2b00      	cmp	r3, #0
 8103d40:	d002      	beq.n	8103d48 <HAL_I2C_Mem_Write+0x34>
 8103d42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103d44:	2b00      	cmp	r3, #0
 8103d46:	d105      	bne.n	8103d54 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103d48:	68fb      	ldr	r3, [r7, #12]
 8103d4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103d4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8103d50:	2301      	movs	r3, #1
 8103d52:	e0ed      	b.n	8103f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103d54:	68fb      	ldr	r3, [r7, #12]
 8103d56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103d5a:	2b01      	cmp	r3, #1
 8103d5c:	d101      	bne.n	8103d62 <HAL_I2C_Mem_Write+0x4e>
 8103d5e:	2302      	movs	r3, #2
 8103d60:	e0e6      	b.n	8103f30 <HAL_I2C_Mem_Write+0x21c>
 8103d62:	68fb      	ldr	r3, [r7, #12]
 8103d64:	2201      	movs	r2, #1
 8103d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103d6a:	f7ff fc07 	bl	810357c <HAL_GetTick>
 8103d6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103d70:	697b      	ldr	r3, [r7, #20]
 8103d72:	9300      	str	r3, [sp, #0]
 8103d74:	2319      	movs	r3, #25
 8103d76:	2201      	movs	r2, #1
 8103d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103d7c:	68f8      	ldr	r0, [r7, #12]
 8103d7e:	f000 fac3 	bl	8104308 <I2C_WaitOnFlagUntilTimeout>
 8103d82:	4603      	mov	r3, r0
 8103d84:	2b00      	cmp	r3, #0
 8103d86:	d001      	beq.n	8103d8c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8103d88:	2301      	movs	r3, #1
 8103d8a:	e0d1      	b.n	8103f30 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8103d8c:	68fb      	ldr	r3, [r7, #12]
 8103d8e:	2221      	movs	r2, #33	; 0x21
 8103d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8103d94:	68fb      	ldr	r3, [r7, #12]
 8103d96:	2240      	movs	r2, #64	; 0x40
 8103d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103d9c:	68fb      	ldr	r3, [r7, #12]
 8103d9e:	2200      	movs	r2, #0
 8103da0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103da2:	68fb      	ldr	r3, [r7, #12]
 8103da4:	6a3a      	ldr	r2, [r7, #32]
 8103da6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103da8:	68fb      	ldr	r3, [r7, #12]
 8103daa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8103dac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103dae:	68fb      	ldr	r3, [r7, #12]
 8103db0:	2200      	movs	r2, #0
 8103db2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8103db4:	88f8      	ldrh	r0, [r7, #6]
 8103db6:	893a      	ldrh	r2, [r7, #8]
 8103db8:	8979      	ldrh	r1, [r7, #10]
 8103dba:	697b      	ldr	r3, [r7, #20]
 8103dbc:	9301      	str	r3, [sp, #4]
 8103dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103dc0:	9300      	str	r3, [sp, #0]
 8103dc2:	4603      	mov	r3, r0
 8103dc4:	68f8      	ldr	r0, [r7, #12]
 8103dc6:	f000 f9d3 	bl	8104170 <I2C_RequestMemoryWrite>
 8103dca:	4603      	mov	r3, r0
 8103dcc:	2b00      	cmp	r3, #0
 8103dce:	d005      	beq.n	8103ddc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103dd0:	68fb      	ldr	r3, [r7, #12]
 8103dd2:	2200      	movs	r2, #0
 8103dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8103dd8:	2301      	movs	r3, #1
 8103dda:	e0a9      	b.n	8103f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103ddc:	68fb      	ldr	r3, [r7, #12]
 8103dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103de0:	b29b      	uxth	r3, r3
 8103de2:	2bff      	cmp	r3, #255	; 0xff
 8103de4:	d90e      	bls.n	8103e04 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8103de6:	68fb      	ldr	r3, [r7, #12]
 8103de8:	22ff      	movs	r2, #255	; 0xff
 8103dea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8103dec:	68fb      	ldr	r3, [r7, #12]
 8103dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103df0:	b2da      	uxtb	r2, r3
 8103df2:	8979      	ldrh	r1, [r7, #10]
 8103df4:	2300      	movs	r3, #0
 8103df6:	9300      	str	r3, [sp, #0]
 8103df8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103dfc:	68f8      	ldr	r0, [r7, #12]
 8103dfe:	f000 fc47 	bl	8104690 <I2C_TransferConfig>
 8103e02:	e00f      	b.n	8103e24 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8103e04:	68fb      	ldr	r3, [r7, #12]
 8103e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e08:	b29a      	uxth	r2, r3
 8103e0a:	68fb      	ldr	r3, [r7, #12]
 8103e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8103e0e:	68fb      	ldr	r3, [r7, #12]
 8103e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e12:	b2da      	uxtb	r2, r3
 8103e14:	8979      	ldrh	r1, [r7, #10]
 8103e16:	2300      	movs	r3, #0
 8103e18:	9300      	str	r3, [sp, #0]
 8103e1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103e1e:	68f8      	ldr	r0, [r7, #12]
 8103e20:	f000 fc36 	bl	8104690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103e24:	697a      	ldr	r2, [r7, #20]
 8103e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8103e28:	68f8      	ldr	r0, [r7, #12]
 8103e2a:	f000 fac6 	bl	81043ba <I2C_WaitOnTXISFlagUntilTimeout>
 8103e2e:	4603      	mov	r3, r0
 8103e30:	2b00      	cmp	r3, #0
 8103e32:	d001      	beq.n	8103e38 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8103e34:	2301      	movs	r3, #1
 8103e36:	e07b      	b.n	8103f30 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8103e38:	68fb      	ldr	r3, [r7, #12]
 8103e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e3c:	781a      	ldrb	r2, [r3, #0]
 8103e3e:	68fb      	ldr	r3, [r7, #12]
 8103e40:	681b      	ldr	r3, [r3, #0]
 8103e42:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8103e44:	68fb      	ldr	r3, [r7, #12]
 8103e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8103e48:	1c5a      	adds	r2, r3, #1
 8103e4a:	68fb      	ldr	r3, [r7, #12]
 8103e4c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8103e4e:	68fb      	ldr	r3, [r7, #12]
 8103e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e52:	b29b      	uxth	r3, r3
 8103e54:	3b01      	subs	r3, #1
 8103e56:	b29a      	uxth	r2, r3
 8103e58:	68fb      	ldr	r3, [r7, #12]
 8103e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e60:	3b01      	subs	r3, #1
 8103e62:	b29a      	uxth	r2, r3
 8103e64:	68fb      	ldr	r3, [r7, #12]
 8103e66:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8103e68:	68fb      	ldr	r3, [r7, #12]
 8103e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e6c:	b29b      	uxth	r3, r3
 8103e6e:	2b00      	cmp	r3, #0
 8103e70:	d034      	beq.n	8103edc <HAL_I2C_Mem_Write+0x1c8>
 8103e72:	68fb      	ldr	r3, [r7, #12]
 8103e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103e76:	2b00      	cmp	r3, #0
 8103e78:	d130      	bne.n	8103edc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8103e7a:	697b      	ldr	r3, [r7, #20]
 8103e7c:	9300      	str	r3, [sp, #0]
 8103e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103e80:	2200      	movs	r2, #0
 8103e82:	2180      	movs	r1, #128	; 0x80
 8103e84:	68f8      	ldr	r0, [r7, #12]
 8103e86:	f000 fa3f 	bl	8104308 <I2C_WaitOnFlagUntilTimeout>
 8103e8a:	4603      	mov	r3, r0
 8103e8c:	2b00      	cmp	r3, #0
 8103e8e:	d001      	beq.n	8103e94 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8103e90:	2301      	movs	r3, #1
 8103e92:	e04d      	b.n	8103f30 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8103e94:	68fb      	ldr	r3, [r7, #12]
 8103e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103e98:	b29b      	uxth	r3, r3
 8103e9a:	2bff      	cmp	r3, #255	; 0xff
 8103e9c:	d90e      	bls.n	8103ebc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8103e9e:	68fb      	ldr	r3, [r7, #12]
 8103ea0:	22ff      	movs	r2, #255	; 0xff
 8103ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8103ea4:	68fb      	ldr	r3, [r7, #12]
 8103ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103ea8:	b2da      	uxtb	r2, r3
 8103eaa:	8979      	ldrh	r1, [r7, #10]
 8103eac:	2300      	movs	r3, #0
 8103eae:	9300      	str	r3, [sp, #0]
 8103eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8103eb4:	68f8      	ldr	r0, [r7, #12]
 8103eb6:	f000 fbeb 	bl	8104690 <I2C_TransferConfig>
 8103eba:	e00f      	b.n	8103edc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8103ebc:	68fb      	ldr	r3, [r7, #12]
 8103ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103ec0:	b29a      	uxth	r2, r3
 8103ec2:	68fb      	ldr	r3, [r7, #12]
 8103ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8103ec6:	68fb      	ldr	r3, [r7, #12]
 8103ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8103eca:	b2da      	uxtb	r2, r3
 8103ecc:	8979      	ldrh	r1, [r7, #10]
 8103ece:	2300      	movs	r3, #0
 8103ed0:	9300      	str	r3, [sp, #0]
 8103ed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8103ed6:	68f8      	ldr	r0, [r7, #12]
 8103ed8:	f000 fbda 	bl	8104690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8103edc:	68fb      	ldr	r3, [r7, #12]
 8103ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8103ee0:	b29b      	uxth	r3, r3
 8103ee2:	2b00      	cmp	r3, #0
 8103ee4:	d19e      	bne.n	8103e24 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8103ee6:	697a      	ldr	r2, [r7, #20]
 8103ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8103eea:	68f8      	ldr	r0, [r7, #12]
 8103eec:	f000 faac 	bl	8104448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8103ef0:	4603      	mov	r3, r0
 8103ef2:	2b00      	cmp	r3, #0
 8103ef4:	d001      	beq.n	8103efa <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8103ef6:	2301      	movs	r3, #1
 8103ef8:	e01a      	b.n	8103f30 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103efa:	68fb      	ldr	r3, [r7, #12]
 8103efc:	681b      	ldr	r3, [r3, #0]
 8103efe:	2220      	movs	r2, #32
 8103f00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103f02:	68fb      	ldr	r3, [r7, #12]
 8103f04:	681b      	ldr	r3, [r3, #0]
 8103f06:	6859      	ldr	r1, [r3, #4]
 8103f08:	68fb      	ldr	r3, [r7, #12]
 8103f0a:	681a      	ldr	r2, [r3, #0]
 8103f0c:	4b0a      	ldr	r3, [pc, #40]	; (8103f38 <HAL_I2C_Mem_Write+0x224>)
 8103f0e:	400b      	ands	r3, r1
 8103f10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8103f12:	68fb      	ldr	r3, [r7, #12]
 8103f14:	2220      	movs	r2, #32
 8103f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8103f1a:	68fb      	ldr	r3, [r7, #12]
 8103f1c:	2200      	movs	r2, #0
 8103f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103f22:	68fb      	ldr	r3, [r7, #12]
 8103f24:	2200      	movs	r2, #0
 8103f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8103f2a:	2300      	movs	r3, #0
 8103f2c:	e000      	b.n	8103f30 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8103f2e:	2302      	movs	r3, #2
  }
}
 8103f30:	4618      	mov	r0, r3
 8103f32:	3718      	adds	r7, #24
 8103f34:	46bd      	mov	sp, r7
 8103f36:	bd80      	pop	{r7, pc}
 8103f38:	fe00e800 	.word	0xfe00e800

08103f3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103f3c:	b580      	push	{r7, lr}
 8103f3e:	b088      	sub	sp, #32
 8103f40:	af02      	add	r7, sp, #8
 8103f42:	60f8      	str	r0, [r7, #12]
 8103f44:	4608      	mov	r0, r1
 8103f46:	4611      	mov	r1, r2
 8103f48:	461a      	mov	r2, r3
 8103f4a:	4603      	mov	r3, r0
 8103f4c:	817b      	strh	r3, [r7, #10]
 8103f4e:	460b      	mov	r3, r1
 8103f50:	813b      	strh	r3, [r7, #8]
 8103f52:	4613      	mov	r3, r2
 8103f54:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103f56:	68fb      	ldr	r3, [r7, #12]
 8103f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103f5c:	b2db      	uxtb	r3, r3
 8103f5e:	2b20      	cmp	r3, #32
 8103f60:	f040 80fd 	bne.w	810415e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8103f64:	6a3b      	ldr	r3, [r7, #32]
 8103f66:	2b00      	cmp	r3, #0
 8103f68:	d002      	beq.n	8103f70 <HAL_I2C_Mem_Read+0x34>
 8103f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8103f6c:	2b00      	cmp	r3, #0
 8103f6e:	d105      	bne.n	8103f7c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8103f70:	68fb      	ldr	r3, [r7, #12]
 8103f72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103f76:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8103f78:	2301      	movs	r3, #1
 8103f7a:	e0f1      	b.n	8104160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103f7c:	68fb      	ldr	r3, [r7, #12]
 8103f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8103f82:	2b01      	cmp	r3, #1
 8103f84:	d101      	bne.n	8103f8a <HAL_I2C_Mem_Read+0x4e>
 8103f86:	2302      	movs	r3, #2
 8103f88:	e0ea      	b.n	8104160 <HAL_I2C_Mem_Read+0x224>
 8103f8a:	68fb      	ldr	r3, [r7, #12]
 8103f8c:	2201      	movs	r2, #1
 8103f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8103f92:	f7ff faf3 	bl	810357c <HAL_GetTick>
 8103f96:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8103f98:	697b      	ldr	r3, [r7, #20]
 8103f9a:	9300      	str	r3, [sp, #0]
 8103f9c:	2319      	movs	r3, #25
 8103f9e:	2201      	movs	r2, #1
 8103fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8103fa4:	68f8      	ldr	r0, [r7, #12]
 8103fa6:	f000 f9af 	bl	8104308 <I2C_WaitOnFlagUntilTimeout>
 8103faa:	4603      	mov	r3, r0
 8103fac:	2b00      	cmp	r3, #0
 8103fae:	d001      	beq.n	8103fb4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8103fb0:	2301      	movs	r3, #1
 8103fb2:	e0d5      	b.n	8104160 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8103fb4:	68fb      	ldr	r3, [r7, #12]
 8103fb6:	2222      	movs	r2, #34	; 0x22
 8103fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8103fbc:	68fb      	ldr	r3, [r7, #12]
 8103fbe:	2240      	movs	r2, #64	; 0x40
 8103fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8103fc4:	68fb      	ldr	r3, [r7, #12]
 8103fc6:	2200      	movs	r2, #0
 8103fc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8103fca:	68fb      	ldr	r3, [r7, #12]
 8103fcc:	6a3a      	ldr	r2, [r7, #32]
 8103fce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8103fd0:	68fb      	ldr	r3, [r7, #12]
 8103fd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8103fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8103fd6:	68fb      	ldr	r3, [r7, #12]
 8103fd8:	2200      	movs	r2, #0
 8103fda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8103fdc:	88f8      	ldrh	r0, [r7, #6]
 8103fde:	893a      	ldrh	r2, [r7, #8]
 8103fe0:	8979      	ldrh	r1, [r7, #10]
 8103fe2:	697b      	ldr	r3, [r7, #20]
 8103fe4:	9301      	str	r3, [sp, #4]
 8103fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8103fe8:	9300      	str	r3, [sp, #0]
 8103fea:	4603      	mov	r3, r0
 8103fec:	68f8      	ldr	r0, [r7, #12]
 8103fee:	f000 f913 	bl	8104218 <I2C_RequestMemoryRead>
 8103ff2:	4603      	mov	r3, r0
 8103ff4:	2b00      	cmp	r3, #0
 8103ff6:	d005      	beq.n	8104004 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8103ff8:	68fb      	ldr	r3, [r7, #12]
 8103ffa:	2200      	movs	r2, #0
 8103ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8104000:	2301      	movs	r3, #1
 8104002:	e0ad      	b.n	8104160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8104004:	68fb      	ldr	r3, [r7, #12]
 8104006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104008:	b29b      	uxth	r3, r3
 810400a:	2bff      	cmp	r3, #255	; 0xff
 810400c:	d90e      	bls.n	810402c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810400e:	68fb      	ldr	r3, [r7, #12]
 8104010:	22ff      	movs	r2, #255	; 0xff
 8104012:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8104014:	68fb      	ldr	r3, [r7, #12]
 8104016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104018:	b2da      	uxtb	r2, r3
 810401a:	8979      	ldrh	r1, [r7, #10]
 810401c:	4b52      	ldr	r3, [pc, #328]	; (8104168 <HAL_I2C_Mem_Read+0x22c>)
 810401e:	9300      	str	r3, [sp, #0]
 8104020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104024:	68f8      	ldr	r0, [r7, #12]
 8104026:	f000 fb33 	bl	8104690 <I2C_TransferConfig>
 810402a:	e00f      	b.n	810404c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810402c:	68fb      	ldr	r3, [r7, #12]
 810402e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104030:	b29a      	uxth	r2, r3
 8104032:	68fb      	ldr	r3, [r7, #12]
 8104034:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8104036:	68fb      	ldr	r3, [r7, #12]
 8104038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810403a:	b2da      	uxtb	r2, r3
 810403c:	8979      	ldrh	r1, [r7, #10]
 810403e:	4b4a      	ldr	r3, [pc, #296]	; (8104168 <HAL_I2C_Mem_Read+0x22c>)
 8104040:	9300      	str	r3, [sp, #0]
 8104042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104046:	68f8      	ldr	r0, [r7, #12]
 8104048:	f000 fb22 	bl	8104690 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 810404c:	697b      	ldr	r3, [r7, #20]
 810404e:	9300      	str	r3, [sp, #0]
 8104050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104052:	2200      	movs	r2, #0
 8104054:	2104      	movs	r1, #4
 8104056:	68f8      	ldr	r0, [r7, #12]
 8104058:	f000 f956 	bl	8104308 <I2C_WaitOnFlagUntilTimeout>
 810405c:	4603      	mov	r3, r0
 810405e:	2b00      	cmp	r3, #0
 8104060:	d001      	beq.n	8104066 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8104062:	2301      	movs	r3, #1
 8104064:	e07c      	b.n	8104160 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8104066:	68fb      	ldr	r3, [r7, #12]
 8104068:	681b      	ldr	r3, [r3, #0]
 810406a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 810406c:	68fb      	ldr	r3, [r7, #12]
 810406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104070:	b2d2      	uxtb	r2, r2
 8104072:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8104074:	68fb      	ldr	r3, [r7, #12]
 8104076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104078:	1c5a      	adds	r2, r3, #1
 810407a:	68fb      	ldr	r3, [r7, #12]
 810407c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 810407e:	68fb      	ldr	r3, [r7, #12]
 8104080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8104082:	3b01      	subs	r3, #1
 8104084:	b29a      	uxth	r2, r3
 8104086:	68fb      	ldr	r3, [r7, #12]
 8104088:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 810408a:	68fb      	ldr	r3, [r7, #12]
 810408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810408e:	b29b      	uxth	r3, r3
 8104090:	3b01      	subs	r3, #1
 8104092:	b29a      	uxth	r2, r3
 8104094:	68fb      	ldr	r3, [r7, #12]
 8104096:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8104098:	68fb      	ldr	r3, [r7, #12]
 810409a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 810409c:	b29b      	uxth	r3, r3
 810409e:	2b00      	cmp	r3, #0
 81040a0:	d034      	beq.n	810410c <HAL_I2C_Mem_Read+0x1d0>
 81040a2:	68fb      	ldr	r3, [r7, #12]
 81040a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81040a6:	2b00      	cmp	r3, #0
 81040a8:	d130      	bne.n	810410c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81040aa:	697b      	ldr	r3, [r7, #20]
 81040ac:	9300      	str	r3, [sp, #0]
 81040ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81040b0:	2200      	movs	r2, #0
 81040b2:	2180      	movs	r1, #128	; 0x80
 81040b4:	68f8      	ldr	r0, [r7, #12]
 81040b6:	f000 f927 	bl	8104308 <I2C_WaitOnFlagUntilTimeout>
 81040ba:	4603      	mov	r3, r0
 81040bc:	2b00      	cmp	r3, #0
 81040be:	d001      	beq.n	81040c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 81040c0:	2301      	movs	r3, #1
 81040c2:	e04d      	b.n	8104160 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81040c4:	68fb      	ldr	r3, [r7, #12]
 81040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81040c8:	b29b      	uxth	r3, r3
 81040ca:	2bff      	cmp	r3, #255	; 0xff
 81040cc:	d90e      	bls.n	81040ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81040ce:	68fb      	ldr	r3, [r7, #12]
 81040d0:	22ff      	movs	r2, #255	; 0xff
 81040d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 81040d4:	68fb      	ldr	r3, [r7, #12]
 81040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81040d8:	b2da      	uxtb	r2, r3
 81040da:	8979      	ldrh	r1, [r7, #10]
 81040dc:	2300      	movs	r3, #0
 81040de:	9300      	str	r3, [sp, #0]
 81040e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81040e4:	68f8      	ldr	r0, [r7, #12]
 81040e6:	f000 fad3 	bl	8104690 <I2C_TransferConfig>
 81040ea:	e00f      	b.n	810410c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81040ec:	68fb      	ldr	r3, [r7, #12]
 81040ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81040f0:	b29a      	uxth	r2, r3
 81040f2:	68fb      	ldr	r3, [r7, #12]
 81040f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81040f6:	68fb      	ldr	r3, [r7, #12]
 81040f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81040fa:	b2da      	uxtb	r2, r3
 81040fc:	8979      	ldrh	r1, [r7, #10]
 81040fe:	2300      	movs	r3, #0
 8104100:	9300      	str	r3, [sp, #0]
 8104102:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8104106:	68f8      	ldr	r0, [r7, #12]
 8104108:	f000 fac2 	bl	8104690 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 810410c:	68fb      	ldr	r3, [r7, #12]
 810410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8104110:	b29b      	uxth	r3, r3
 8104112:	2b00      	cmp	r3, #0
 8104114:	d19a      	bne.n	810404c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8104116:	697a      	ldr	r2, [r7, #20]
 8104118:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810411a:	68f8      	ldr	r0, [r7, #12]
 810411c:	f000 f994 	bl	8104448 <I2C_WaitOnSTOPFlagUntilTimeout>
 8104120:	4603      	mov	r3, r0
 8104122:	2b00      	cmp	r3, #0
 8104124:	d001      	beq.n	810412a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8104126:	2301      	movs	r3, #1
 8104128:	e01a      	b.n	8104160 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810412a:	68fb      	ldr	r3, [r7, #12]
 810412c:	681b      	ldr	r3, [r3, #0]
 810412e:	2220      	movs	r2, #32
 8104130:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8104132:	68fb      	ldr	r3, [r7, #12]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	6859      	ldr	r1, [r3, #4]
 8104138:	68fb      	ldr	r3, [r7, #12]
 810413a:	681a      	ldr	r2, [r3, #0]
 810413c:	4b0b      	ldr	r3, [pc, #44]	; (810416c <HAL_I2C_Mem_Read+0x230>)
 810413e:	400b      	ands	r3, r1
 8104140:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8104142:	68fb      	ldr	r3, [r7, #12]
 8104144:	2220      	movs	r2, #32
 8104146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810414a:	68fb      	ldr	r3, [r7, #12]
 810414c:	2200      	movs	r2, #0
 810414e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104152:	68fb      	ldr	r3, [r7, #12]
 8104154:	2200      	movs	r2, #0
 8104156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810415a:	2300      	movs	r3, #0
 810415c:	e000      	b.n	8104160 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810415e:	2302      	movs	r3, #2
  }
}
 8104160:	4618      	mov	r0, r3
 8104162:	3718      	adds	r7, #24
 8104164:	46bd      	mov	sp, r7
 8104166:	bd80      	pop	{r7, pc}
 8104168:	80002400 	.word	0x80002400
 810416c:	fe00e800 	.word	0xfe00e800

08104170 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8104170:	b580      	push	{r7, lr}
 8104172:	b086      	sub	sp, #24
 8104174:	af02      	add	r7, sp, #8
 8104176:	60f8      	str	r0, [r7, #12]
 8104178:	4608      	mov	r0, r1
 810417a:	4611      	mov	r1, r2
 810417c:	461a      	mov	r2, r3
 810417e:	4603      	mov	r3, r0
 8104180:	817b      	strh	r3, [r7, #10]
 8104182:	460b      	mov	r3, r1
 8104184:	813b      	strh	r3, [r7, #8]
 8104186:	4613      	mov	r3, r2
 8104188:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 810418a:	88fb      	ldrh	r3, [r7, #6]
 810418c:	b2da      	uxtb	r2, r3
 810418e:	8979      	ldrh	r1, [r7, #10]
 8104190:	4b20      	ldr	r3, [pc, #128]	; (8104214 <I2C_RequestMemoryWrite+0xa4>)
 8104192:	9300      	str	r3, [sp, #0]
 8104194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8104198:	68f8      	ldr	r0, [r7, #12]
 810419a:	f000 fa79 	bl	8104690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 810419e:	69fa      	ldr	r2, [r7, #28]
 81041a0:	69b9      	ldr	r1, [r7, #24]
 81041a2:	68f8      	ldr	r0, [r7, #12]
 81041a4:	f000 f909 	bl	81043ba <I2C_WaitOnTXISFlagUntilTimeout>
 81041a8:	4603      	mov	r3, r0
 81041aa:	2b00      	cmp	r3, #0
 81041ac:	d001      	beq.n	81041b2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 81041ae:	2301      	movs	r3, #1
 81041b0:	e02c      	b.n	810420c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 81041b2:	88fb      	ldrh	r3, [r7, #6]
 81041b4:	2b01      	cmp	r3, #1
 81041b6:	d105      	bne.n	81041c4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81041b8:	893b      	ldrh	r3, [r7, #8]
 81041ba:	b2da      	uxtb	r2, r3
 81041bc:	68fb      	ldr	r3, [r7, #12]
 81041be:	681b      	ldr	r3, [r3, #0]
 81041c0:	629a      	str	r2, [r3, #40]	; 0x28
 81041c2:	e015      	b.n	81041f0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 81041c4:	893b      	ldrh	r3, [r7, #8]
 81041c6:	0a1b      	lsrs	r3, r3, #8
 81041c8:	b29b      	uxth	r3, r3
 81041ca:	b2da      	uxtb	r2, r3
 81041cc:	68fb      	ldr	r3, [r7, #12]
 81041ce:	681b      	ldr	r3, [r3, #0]
 81041d0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 81041d2:	69fa      	ldr	r2, [r7, #28]
 81041d4:	69b9      	ldr	r1, [r7, #24]
 81041d6:	68f8      	ldr	r0, [r7, #12]
 81041d8:	f000 f8ef 	bl	81043ba <I2C_WaitOnTXISFlagUntilTimeout>
 81041dc:	4603      	mov	r3, r0
 81041de:	2b00      	cmp	r3, #0
 81041e0:	d001      	beq.n	81041e6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 81041e2:	2301      	movs	r3, #1
 81041e4:	e012      	b.n	810420c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 81041e6:	893b      	ldrh	r3, [r7, #8]
 81041e8:	b2da      	uxtb	r2, r3
 81041ea:	68fb      	ldr	r3, [r7, #12]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 81041f0:	69fb      	ldr	r3, [r7, #28]
 81041f2:	9300      	str	r3, [sp, #0]
 81041f4:	69bb      	ldr	r3, [r7, #24]
 81041f6:	2200      	movs	r2, #0
 81041f8:	2180      	movs	r1, #128	; 0x80
 81041fa:	68f8      	ldr	r0, [r7, #12]
 81041fc:	f000 f884 	bl	8104308 <I2C_WaitOnFlagUntilTimeout>
 8104200:	4603      	mov	r3, r0
 8104202:	2b00      	cmp	r3, #0
 8104204:	d001      	beq.n	810420a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8104206:	2301      	movs	r3, #1
 8104208:	e000      	b.n	810420c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 810420a:	2300      	movs	r3, #0
}
 810420c:	4618      	mov	r0, r3
 810420e:	3710      	adds	r7, #16
 8104210:	46bd      	mov	sp, r7
 8104212:	bd80      	pop	{r7, pc}
 8104214:	80002000 	.word	0x80002000

08104218 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8104218:	b580      	push	{r7, lr}
 810421a:	b086      	sub	sp, #24
 810421c:	af02      	add	r7, sp, #8
 810421e:	60f8      	str	r0, [r7, #12]
 8104220:	4608      	mov	r0, r1
 8104222:	4611      	mov	r1, r2
 8104224:	461a      	mov	r2, r3
 8104226:	4603      	mov	r3, r0
 8104228:	817b      	strh	r3, [r7, #10]
 810422a:	460b      	mov	r3, r1
 810422c:	813b      	strh	r3, [r7, #8]
 810422e:	4613      	mov	r3, r2
 8104230:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8104232:	88fb      	ldrh	r3, [r7, #6]
 8104234:	b2da      	uxtb	r2, r3
 8104236:	8979      	ldrh	r1, [r7, #10]
 8104238:	4b20      	ldr	r3, [pc, #128]	; (81042bc <I2C_RequestMemoryRead+0xa4>)
 810423a:	9300      	str	r3, [sp, #0]
 810423c:	2300      	movs	r3, #0
 810423e:	68f8      	ldr	r0, [r7, #12]
 8104240:	f000 fa26 	bl	8104690 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104244:	69fa      	ldr	r2, [r7, #28]
 8104246:	69b9      	ldr	r1, [r7, #24]
 8104248:	68f8      	ldr	r0, [r7, #12]
 810424a:	f000 f8b6 	bl	81043ba <I2C_WaitOnTXISFlagUntilTimeout>
 810424e:	4603      	mov	r3, r0
 8104250:	2b00      	cmp	r3, #0
 8104252:	d001      	beq.n	8104258 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8104254:	2301      	movs	r3, #1
 8104256:	e02c      	b.n	81042b2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8104258:	88fb      	ldrh	r3, [r7, #6]
 810425a:	2b01      	cmp	r3, #1
 810425c:	d105      	bne.n	810426a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810425e:	893b      	ldrh	r3, [r7, #8]
 8104260:	b2da      	uxtb	r2, r3
 8104262:	68fb      	ldr	r3, [r7, #12]
 8104264:	681b      	ldr	r3, [r3, #0]
 8104266:	629a      	str	r2, [r3, #40]	; 0x28
 8104268:	e015      	b.n	8104296 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 810426a:	893b      	ldrh	r3, [r7, #8]
 810426c:	0a1b      	lsrs	r3, r3, #8
 810426e:	b29b      	uxth	r3, r3
 8104270:	b2da      	uxtb	r2, r3
 8104272:	68fb      	ldr	r3, [r7, #12]
 8104274:	681b      	ldr	r3, [r3, #0]
 8104276:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8104278:	69fa      	ldr	r2, [r7, #28]
 810427a:	69b9      	ldr	r1, [r7, #24]
 810427c:	68f8      	ldr	r0, [r7, #12]
 810427e:	f000 f89c 	bl	81043ba <I2C_WaitOnTXISFlagUntilTimeout>
 8104282:	4603      	mov	r3, r0
 8104284:	2b00      	cmp	r3, #0
 8104286:	d001      	beq.n	810428c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8104288:	2301      	movs	r3, #1
 810428a:	e012      	b.n	81042b2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 810428c:	893b      	ldrh	r3, [r7, #8]
 810428e:	b2da      	uxtb	r2, r3
 8104290:	68fb      	ldr	r3, [r7, #12]
 8104292:	681b      	ldr	r3, [r3, #0]
 8104294:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8104296:	69fb      	ldr	r3, [r7, #28]
 8104298:	9300      	str	r3, [sp, #0]
 810429a:	69bb      	ldr	r3, [r7, #24]
 810429c:	2200      	movs	r2, #0
 810429e:	2140      	movs	r1, #64	; 0x40
 81042a0:	68f8      	ldr	r0, [r7, #12]
 81042a2:	f000 f831 	bl	8104308 <I2C_WaitOnFlagUntilTimeout>
 81042a6:	4603      	mov	r3, r0
 81042a8:	2b00      	cmp	r3, #0
 81042aa:	d001      	beq.n	81042b0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 81042ac:	2301      	movs	r3, #1
 81042ae:	e000      	b.n	81042b2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 81042b0:	2300      	movs	r3, #0
}
 81042b2:	4618      	mov	r0, r3
 81042b4:	3710      	adds	r7, #16
 81042b6:	46bd      	mov	sp, r7
 81042b8:	bd80      	pop	{r7, pc}
 81042ba:	bf00      	nop
 81042bc:	80002000 	.word	0x80002000

081042c0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 81042c0:	b480      	push	{r7}
 81042c2:	b083      	sub	sp, #12
 81042c4:	af00      	add	r7, sp, #0
 81042c6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	681b      	ldr	r3, [r3, #0]
 81042cc:	699b      	ldr	r3, [r3, #24]
 81042ce:	f003 0302 	and.w	r3, r3, #2
 81042d2:	2b02      	cmp	r3, #2
 81042d4:	d103      	bne.n	81042de <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 81042d6:	687b      	ldr	r3, [r7, #4]
 81042d8:	681b      	ldr	r3, [r3, #0]
 81042da:	2200      	movs	r2, #0
 81042dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	681b      	ldr	r3, [r3, #0]
 81042e2:	699b      	ldr	r3, [r3, #24]
 81042e4:	f003 0301 	and.w	r3, r3, #1
 81042e8:	2b01      	cmp	r3, #1
 81042ea:	d007      	beq.n	81042fc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 81042ec:	687b      	ldr	r3, [r7, #4]
 81042ee:	681b      	ldr	r3, [r3, #0]
 81042f0:	699a      	ldr	r2, [r3, #24]
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	f042 0201 	orr.w	r2, r2, #1
 81042fa:	619a      	str	r2, [r3, #24]
  }
}
 81042fc:	bf00      	nop
 81042fe:	370c      	adds	r7, #12
 8104300:	46bd      	mov	sp, r7
 8104302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104306:	4770      	bx	lr

08104308 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8104308:	b580      	push	{r7, lr}
 810430a:	b084      	sub	sp, #16
 810430c:	af00      	add	r7, sp, #0
 810430e:	60f8      	str	r0, [r7, #12]
 8104310:	60b9      	str	r1, [r7, #8]
 8104312:	603b      	str	r3, [r7, #0]
 8104314:	4613      	mov	r3, r2
 8104316:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104318:	e03b      	b.n	8104392 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 810431a:	69ba      	ldr	r2, [r7, #24]
 810431c:	6839      	ldr	r1, [r7, #0]
 810431e:	68f8      	ldr	r0, [r7, #12]
 8104320:	f000 f8d6 	bl	81044d0 <I2C_IsErrorOccurred>
 8104324:	4603      	mov	r3, r0
 8104326:	2b00      	cmp	r3, #0
 8104328:	d001      	beq.n	810432e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 810432a:	2301      	movs	r3, #1
 810432c:	e041      	b.n	81043b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810432e:	683b      	ldr	r3, [r7, #0]
 8104330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8104334:	d02d      	beq.n	8104392 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8104336:	f7ff f921 	bl	810357c <HAL_GetTick>
 810433a:	4602      	mov	r2, r0
 810433c:	69bb      	ldr	r3, [r7, #24]
 810433e:	1ad3      	subs	r3, r2, r3
 8104340:	683a      	ldr	r2, [r7, #0]
 8104342:	429a      	cmp	r2, r3
 8104344:	d302      	bcc.n	810434c <I2C_WaitOnFlagUntilTimeout+0x44>
 8104346:	683b      	ldr	r3, [r7, #0]
 8104348:	2b00      	cmp	r3, #0
 810434a:	d122      	bne.n	8104392 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 810434c:	68fb      	ldr	r3, [r7, #12]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	699a      	ldr	r2, [r3, #24]
 8104352:	68bb      	ldr	r3, [r7, #8]
 8104354:	4013      	ands	r3, r2
 8104356:	68ba      	ldr	r2, [r7, #8]
 8104358:	429a      	cmp	r2, r3
 810435a:	bf0c      	ite	eq
 810435c:	2301      	moveq	r3, #1
 810435e:	2300      	movne	r3, #0
 8104360:	b2db      	uxtb	r3, r3
 8104362:	461a      	mov	r2, r3
 8104364:	79fb      	ldrb	r3, [r7, #7]
 8104366:	429a      	cmp	r2, r3
 8104368:	d113      	bne.n	8104392 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810436a:	68fb      	ldr	r3, [r7, #12]
 810436c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810436e:	f043 0220 	orr.w	r2, r3, #32
 8104372:	68fb      	ldr	r3, [r7, #12]
 8104374:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8104376:	68fb      	ldr	r3, [r7, #12]
 8104378:	2220      	movs	r2, #32
 810437a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810437e:	68fb      	ldr	r3, [r7, #12]
 8104380:	2200      	movs	r2, #0
 8104382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8104386:	68fb      	ldr	r3, [r7, #12]
 8104388:	2200      	movs	r2, #0
 810438a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 810438e:	2301      	movs	r3, #1
 8104390:	e00f      	b.n	81043b2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8104392:	68fb      	ldr	r3, [r7, #12]
 8104394:	681b      	ldr	r3, [r3, #0]
 8104396:	699a      	ldr	r2, [r3, #24]
 8104398:	68bb      	ldr	r3, [r7, #8]
 810439a:	4013      	ands	r3, r2
 810439c:	68ba      	ldr	r2, [r7, #8]
 810439e:	429a      	cmp	r2, r3
 81043a0:	bf0c      	ite	eq
 81043a2:	2301      	moveq	r3, #1
 81043a4:	2300      	movne	r3, #0
 81043a6:	b2db      	uxtb	r3, r3
 81043a8:	461a      	mov	r2, r3
 81043aa:	79fb      	ldrb	r3, [r7, #7]
 81043ac:	429a      	cmp	r2, r3
 81043ae:	d0b4      	beq.n	810431a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81043b0:	2300      	movs	r3, #0
}
 81043b2:	4618      	mov	r0, r3
 81043b4:	3710      	adds	r7, #16
 81043b6:	46bd      	mov	sp, r7
 81043b8:	bd80      	pop	{r7, pc}

081043ba <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 81043ba:	b580      	push	{r7, lr}
 81043bc:	b084      	sub	sp, #16
 81043be:	af00      	add	r7, sp, #0
 81043c0:	60f8      	str	r0, [r7, #12]
 81043c2:	60b9      	str	r1, [r7, #8]
 81043c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 81043c6:	e033      	b.n	8104430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 81043c8:	687a      	ldr	r2, [r7, #4]
 81043ca:	68b9      	ldr	r1, [r7, #8]
 81043cc:	68f8      	ldr	r0, [r7, #12]
 81043ce:	f000 f87f 	bl	81044d0 <I2C_IsErrorOccurred>
 81043d2:	4603      	mov	r3, r0
 81043d4:	2b00      	cmp	r3, #0
 81043d6:	d001      	beq.n	81043dc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 81043d8:	2301      	movs	r3, #1
 81043da:	e031      	b.n	8104440 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81043dc:	68bb      	ldr	r3, [r7, #8]
 81043de:	f1b3 3fff 	cmp.w	r3, #4294967295
 81043e2:	d025      	beq.n	8104430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81043e4:	f7ff f8ca 	bl	810357c <HAL_GetTick>
 81043e8:	4602      	mov	r2, r0
 81043ea:	687b      	ldr	r3, [r7, #4]
 81043ec:	1ad3      	subs	r3, r2, r3
 81043ee:	68ba      	ldr	r2, [r7, #8]
 81043f0:	429a      	cmp	r2, r3
 81043f2:	d302      	bcc.n	81043fa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 81043f4:	68bb      	ldr	r3, [r7, #8]
 81043f6:	2b00      	cmp	r3, #0
 81043f8:	d11a      	bne.n	8104430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 81043fa:	68fb      	ldr	r3, [r7, #12]
 81043fc:	681b      	ldr	r3, [r3, #0]
 81043fe:	699b      	ldr	r3, [r3, #24]
 8104400:	f003 0302 	and.w	r3, r3, #2
 8104404:	2b02      	cmp	r3, #2
 8104406:	d013      	beq.n	8104430 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8104408:	68fb      	ldr	r3, [r7, #12]
 810440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810440c:	f043 0220 	orr.w	r2, r3, #32
 8104410:	68fb      	ldr	r3, [r7, #12]
 8104412:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8104414:	68fb      	ldr	r3, [r7, #12]
 8104416:	2220      	movs	r2, #32
 8104418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 810441c:	68fb      	ldr	r3, [r7, #12]
 810441e:	2200      	movs	r2, #0
 8104420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8104424:	68fb      	ldr	r3, [r7, #12]
 8104426:	2200      	movs	r2, #0
 8104428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 810442c:	2301      	movs	r3, #1
 810442e:	e007      	b.n	8104440 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8104430:	68fb      	ldr	r3, [r7, #12]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	699b      	ldr	r3, [r3, #24]
 8104436:	f003 0302 	and.w	r3, r3, #2
 810443a:	2b02      	cmp	r3, #2
 810443c:	d1c4      	bne.n	81043c8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 810443e:	2300      	movs	r3, #0
}
 8104440:	4618      	mov	r0, r3
 8104442:	3710      	adds	r7, #16
 8104444:	46bd      	mov	sp, r7
 8104446:	bd80      	pop	{r7, pc}

08104448 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8104448:	b580      	push	{r7, lr}
 810444a:	b084      	sub	sp, #16
 810444c:	af00      	add	r7, sp, #0
 810444e:	60f8      	str	r0, [r7, #12]
 8104450:	60b9      	str	r1, [r7, #8]
 8104452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8104454:	e02f      	b.n	81044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8104456:	687a      	ldr	r2, [r7, #4]
 8104458:	68b9      	ldr	r1, [r7, #8]
 810445a:	68f8      	ldr	r0, [r7, #12]
 810445c:	f000 f838 	bl	81044d0 <I2C_IsErrorOccurred>
 8104460:	4603      	mov	r3, r0
 8104462:	2b00      	cmp	r3, #0
 8104464:	d001      	beq.n	810446a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8104466:	2301      	movs	r3, #1
 8104468:	e02d      	b.n	81044c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810446a:	f7ff f887 	bl	810357c <HAL_GetTick>
 810446e:	4602      	mov	r2, r0
 8104470:	687b      	ldr	r3, [r7, #4]
 8104472:	1ad3      	subs	r3, r2, r3
 8104474:	68ba      	ldr	r2, [r7, #8]
 8104476:	429a      	cmp	r2, r3
 8104478:	d302      	bcc.n	8104480 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810447a:	68bb      	ldr	r3, [r7, #8]
 810447c:	2b00      	cmp	r3, #0
 810447e:	d11a      	bne.n	81044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8104480:	68fb      	ldr	r3, [r7, #12]
 8104482:	681b      	ldr	r3, [r3, #0]
 8104484:	699b      	ldr	r3, [r3, #24]
 8104486:	f003 0320 	and.w	r3, r3, #32
 810448a:	2b20      	cmp	r3, #32
 810448c:	d013      	beq.n	81044b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810448e:	68fb      	ldr	r3, [r7, #12]
 8104490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104492:	f043 0220 	orr.w	r2, r3, #32
 8104496:	68fb      	ldr	r3, [r7, #12]
 8104498:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810449a:	68fb      	ldr	r3, [r7, #12]
 810449c:	2220      	movs	r2, #32
 810449e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 81044a2:	68fb      	ldr	r3, [r7, #12]
 81044a4:	2200      	movs	r2, #0
 81044a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 81044aa:	68fb      	ldr	r3, [r7, #12]
 81044ac:	2200      	movs	r2, #0
 81044ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 81044b2:	2301      	movs	r3, #1
 81044b4:	e007      	b.n	81044c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 81044b6:	68fb      	ldr	r3, [r7, #12]
 81044b8:	681b      	ldr	r3, [r3, #0]
 81044ba:	699b      	ldr	r3, [r3, #24]
 81044bc:	f003 0320 	and.w	r3, r3, #32
 81044c0:	2b20      	cmp	r3, #32
 81044c2:	d1c8      	bne.n	8104456 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81044c4:	2300      	movs	r3, #0
}
 81044c6:	4618      	mov	r0, r3
 81044c8:	3710      	adds	r7, #16
 81044ca:	46bd      	mov	sp, r7
 81044cc:	bd80      	pop	{r7, pc}
	...

081044d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81044d0:	b580      	push	{r7, lr}
 81044d2:	b08a      	sub	sp, #40	; 0x28
 81044d4:	af00      	add	r7, sp, #0
 81044d6:	60f8      	str	r0, [r7, #12]
 81044d8:	60b9      	str	r1, [r7, #8]
 81044da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81044dc:	2300      	movs	r3, #0
 81044de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81044e2:	68fb      	ldr	r3, [r7, #12]
 81044e4:	681b      	ldr	r3, [r3, #0]
 81044e6:	699b      	ldr	r3, [r3, #24]
 81044e8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81044ea:	2300      	movs	r3, #0
 81044ec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81044ee:	687b      	ldr	r3, [r7, #4]
 81044f0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81044f2:	69bb      	ldr	r3, [r7, #24]
 81044f4:	f003 0310 	and.w	r3, r3, #16
 81044f8:	2b00      	cmp	r3, #0
 81044fa:	d068      	beq.n	81045ce <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81044fc:	68fb      	ldr	r3, [r7, #12]
 81044fe:	681b      	ldr	r3, [r3, #0]
 8104500:	2210      	movs	r2, #16
 8104502:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8104504:	e049      	b.n	810459a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8104506:	68bb      	ldr	r3, [r7, #8]
 8104508:	f1b3 3fff 	cmp.w	r3, #4294967295
 810450c:	d045      	beq.n	810459a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810450e:	f7ff f835 	bl	810357c <HAL_GetTick>
 8104512:	4602      	mov	r2, r0
 8104514:	69fb      	ldr	r3, [r7, #28]
 8104516:	1ad3      	subs	r3, r2, r3
 8104518:	68ba      	ldr	r2, [r7, #8]
 810451a:	429a      	cmp	r2, r3
 810451c:	d302      	bcc.n	8104524 <I2C_IsErrorOccurred+0x54>
 810451e:	68bb      	ldr	r3, [r7, #8]
 8104520:	2b00      	cmp	r3, #0
 8104522:	d13a      	bne.n	810459a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8104524:	68fb      	ldr	r3, [r7, #12]
 8104526:	681b      	ldr	r3, [r3, #0]
 8104528:	685b      	ldr	r3, [r3, #4]
 810452a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810452e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8104530:	68fb      	ldr	r3, [r7, #12]
 8104532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8104536:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8104538:	68fb      	ldr	r3, [r7, #12]
 810453a:	681b      	ldr	r3, [r3, #0]
 810453c:	699b      	ldr	r3, [r3, #24]
 810453e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8104542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104546:	d121      	bne.n	810458c <I2C_IsErrorOccurred+0xbc>
 8104548:	697b      	ldr	r3, [r7, #20]
 810454a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810454e:	d01d      	beq.n	810458c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8104550:	7cfb      	ldrb	r3, [r7, #19]
 8104552:	2b20      	cmp	r3, #32
 8104554:	d01a      	beq.n	810458c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8104556:	68fb      	ldr	r3, [r7, #12]
 8104558:	681b      	ldr	r3, [r3, #0]
 810455a:	685a      	ldr	r2, [r3, #4]
 810455c:	68fb      	ldr	r3, [r7, #12]
 810455e:	681b      	ldr	r3, [r3, #0]
 8104560:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8104564:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8104566:	f7ff f809 	bl	810357c <HAL_GetTick>
 810456a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810456c:	e00e      	b.n	810458c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810456e:	f7ff f805 	bl	810357c <HAL_GetTick>
 8104572:	4602      	mov	r2, r0
 8104574:	69fb      	ldr	r3, [r7, #28]
 8104576:	1ad3      	subs	r3, r2, r3
 8104578:	2b19      	cmp	r3, #25
 810457a:	d907      	bls.n	810458c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 810457c:	6a3b      	ldr	r3, [r7, #32]
 810457e:	f043 0320 	orr.w	r3, r3, #32
 8104582:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8104584:	2301      	movs	r3, #1
 8104586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 810458a:	e006      	b.n	810459a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810458c:	68fb      	ldr	r3, [r7, #12]
 810458e:	681b      	ldr	r3, [r3, #0]
 8104590:	699b      	ldr	r3, [r3, #24]
 8104592:	f003 0320 	and.w	r3, r3, #32
 8104596:	2b20      	cmp	r3, #32
 8104598:	d1e9      	bne.n	810456e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810459a:	68fb      	ldr	r3, [r7, #12]
 810459c:	681b      	ldr	r3, [r3, #0]
 810459e:	699b      	ldr	r3, [r3, #24]
 81045a0:	f003 0320 	and.w	r3, r3, #32
 81045a4:	2b20      	cmp	r3, #32
 81045a6:	d003      	beq.n	81045b0 <I2C_IsErrorOccurred+0xe0>
 81045a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81045ac:	2b00      	cmp	r3, #0
 81045ae:	d0aa      	beq.n	8104506 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 81045b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 81045b4:	2b00      	cmp	r3, #0
 81045b6:	d103      	bne.n	81045c0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81045b8:	68fb      	ldr	r3, [r7, #12]
 81045ba:	681b      	ldr	r3, [r3, #0]
 81045bc:	2220      	movs	r2, #32
 81045be:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81045c0:	6a3b      	ldr	r3, [r7, #32]
 81045c2:	f043 0304 	orr.w	r3, r3, #4
 81045c6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81045c8:	2301      	movs	r3, #1
 81045ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81045ce:	68fb      	ldr	r3, [r7, #12]
 81045d0:	681b      	ldr	r3, [r3, #0]
 81045d2:	699b      	ldr	r3, [r3, #24]
 81045d4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81045d6:	69bb      	ldr	r3, [r7, #24]
 81045d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81045dc:	2b00      	cmp	r3, #0
 81045de:	d00b      	beq.n	81045f8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81045e0:	6a3b      	ldr	r3, [r7, #32]
 81045e2:	f043 0301 	orr.w	r3, r3, #1
 81045e6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81045e8:	68fb      	ldr	r3, [r7, #12]
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 81045f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81045f2:	2301      	movs	r3, #1
 81045f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81045f8:	69bb      	ldr	r3, [r7, #24]
 81045fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81045fe:	2b00      	cmp	r3, #0
 8104600:	d00b      	beq.n	810461a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8104602:	6a3b      	ldr	r3, [r7, #32]
 8104604:	f043 0308 	orr.w	r3, r3, #8
 8104608:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 810460a:	68fb      	ldr	r3, [r7, #12]
 810460c:	681b      	ldr	r3, [r3, #0]
 810460e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8104612:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104614:	2301      	movs	r3, #1
 8104616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 810461a:	69bb      	ldr	r3, [r7, #24]
 810461c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8104620:	2b00      	cmp	r3, #0
 8104622:	d00b      	beq.n	810463c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8104624:	6a3b      	ldr	r3, [r7, #32]
 8104626:	f043 0302 	orr.w	r3, r3, #2
 810462a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810462c:	68fb      	ldr	r3, [r7, #12]
 810462e:	681b      	ldr	r3, [r3, #0]
 8104630:	f44f 7200 	mov.w	r2, #512	; 0x200
 8104634:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8104636:	2301      	movs	r3, #1
 8104638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 810463c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8104640:	2b00      	cmp	r3, #0
 8104642:	d01c      	beq.n	810467e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8104644:	68f8      	ldr	r0, [r7, #12]
 8104646:	f7ff fe3b 	bl	81042c0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810464a:	68fb      	ldr	r3, [r7, #12]
 810464c:	681b      	ldr	r3, [r3, #0]
 810464e:	6859      	ldr	r1, [r3, #4]
 8104650:	68fb      	ldr	r3, [r7, #12]
 8104652:	681a      	ldr	r2, [r3, #0]
 8104654:	4b0d      	ldr	r3, [pc, #52]	; (810468c <I2C_IsErrorOccurred+0x1bc>)
 8104656:	400b      	ands	r3, r1
 8104658:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810465a:	68fb      	ldr	r3, [r7, #12]
 810465c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810465e:	6a3b      	ldr	r3, [r7, #32]
 8104660:	431a      	orrs	r2, r3
 8104662:	68fb      	ldr	r3, [r7, #12]
 8104664:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8104666:	68fb      	ldr	r3, [r7, #12]
 8104668:	2220      	movs	r2, #32
 810466a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810466e:	68fb      	ldr	r3, [r7, #12]
 8104670:	2200      	movs	r2, #0
 8104672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104676:	68fb      	ldr	r3, [r7, #12]
 8104678:	2200      	movs	r2, #0
 810467a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 810467e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8104682:	4618      	mov	r0, r3
 8104684:	3728      	adds	r7, #40	; 0x28
 8104686:	46bd      	mov	sp, r7
 8104688:	bd80      	pop	{r7, pc}
 810468a:	bf00      	nop
 810468c:	fe00e800 	.word	0xfe00e800

08104690 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8104690:	b480      	push	{r7}
 8104692:	b087      	sub	sp, #28
 8104694:	af00      	add	r7, sp, #0
 8104696:	60f8      	str	r0, [r7, #12]
 8104698:	607b      	str	r3, [r7, #4]
 810469a:	460b      	mov	r3, r1
 810469c:	817b      	strh	r3, [r7, #10]
 810469e:	4613      	mov	r3, r2
 81046a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81046a2:	897b      	ldrh	r3, [r7, #10]
 81046a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81046a8:	7a7b      	ldrb	r3, [r7, #9]
 81046aa:	041b      	lsls	r3, r3, #16
 81046ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81046b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81046b6:	6a3b      	ldr	r3, [r7, #32]
 81046b8:	4313      	orrs	r3, r2
 81046ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81046be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81046c0:	68fb      	ldr	r3, [r7, #12]
 81046c2:	681b      	ldr	r3, [r3, #0]
 81046c4:	685a      	ldr	r2, [r3, #4]
 81046c6:	6a3b      	ldr	r3, [r7, #32]
 81046c8:	0d5b      	lsrs	r3, r3, #21
 81046ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 81046ce:	4b08      	ldr	r3, [pc, #32]	; (81046f0 <I2C_TransferConfig+0x60>)
 81046d0:	430b      	orrs	r3, r1
 81046d2:	43db      	mvns	r3, r3
 81046d4:	ea02 0103 	and.w	r1, r2, r3
 81046d8:	68fb      	ldr	r3, [r7, #12]
 81046da:	681b      	ldr	r3, [r3, #0]
 81046dc:	697a      	ldr	r2, [r7, #20]
 81046de:	430a      	orrs	r2, r1
 81046e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81046e2:	bf00      	nop
 81046e4:	371c      	adds	r7, #28
 81046e6:	46bd      	mov	sp, r7
 81046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81046ec:	4770      	bx	lr
 81046ee:	bf00      	nop
 81046f0:	03ff63ff 	.word	0x03ff63ff

081046f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81046f4:	b480      	push	{r7}
 81046f6:	b083      	sub	sp, #12
 81046f8:	af00      	add	r7, sp, #0
 81046fa:	6078      	str	r0, [r7, #4]
 81046fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81046fe:	687b      	ldr	r3, [r7, #4]
 8104700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8104704:	b2db      	uxtb	r3, r3
 8104706:	2b20      	cmp	r3, #32
 8104708:	d138      	bne.n	810477c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810470a:	687b      	ldr	r3, [r7, #4]
 810470c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8104710:	2b01      	cmp	r3, #1
 8104712:	d101      	bne.n	8104718 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8104714:	2302      	movs	r3, #2
 8104716:	e032      	b.n	810477e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8104718:	687b      	ldr	r3, [r7, #4]
 810471a:	2201      	movs	r2, #1
 810471c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8104720:	687b      	ldr	r3, [r7, #4]
 8104722:	2224      	movs	r2, #36	; 0x24
 8104724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8104728:	687b      	ldr	r3, [r7, #4]
 810472a:	681b      	ldr	r3, [r3, #0]
 810472c:	681a      	ldr	r2, [r3, #0]
 810472e:	687b      	ldr	r3, [r7, #4]
 8104730:	681b      	ldr	r3, [r3, #0]
 8104732:	f022 0201 	bic.w	r2, r2, #1
 8104736:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8104738:	687b      	ldr	r3, [r7, #4]
 810473a:	681b      	ldr	r3, [r3, #0]
 810473c:	681a      	ldr	r2, [r3, #0]
 810473e:	687b      	ldr	r3, [r7, #4]
 8104740:	681b      	ldr	r3, [r3, #0]
 8104742:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8104746:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8104748:	687b      	ldr	r3, [r7, #4]
 810474a:	681b      	ldr	r3, [r3, #0]
 810474c:	6819      	ldr	r1, [r3, #0]
 810474e:	687b      	ldr	r3, [r7, #4]
 8104750:	681b      	ldr	r3, [r3, #0]
 8104752:	683a      	ldr	r2, [r7, #0]
 8104754:	430a      	orrs	r2, r1
 8104756:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8104758:	687b      	ldr	r3, [r7, #4]
 810475a:	681b      	ldr	r3, [r3, #0]
 810475c:	681a      	ldr	r2, [r3, #0]
 810475e:	687b      	ldr	r3, [r7, #4]
 8104760:	681b      	ldr	r3, [r3, #0]
 8104762:	f042 0201 	orr.w	r2, r2, #1
 8104766:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	2220      	movs	r2, #32
 810476c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104770:	687b      	ldr	r3, [r7, #4]
 8104772:	2200      	movs	r2, #0
 8104774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104778:	2300      	movs	r3, #0
 810477a:	e000      	b.n	810477e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810477c:	2302      	movs	r3, #2
  }
}
 810477e:	4618      	mov	r0, r3
 8104780:	370c      	adds	r7, #12
 8104782:	46bd      	mov	sp, r7
 8104784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104788:	4770      	bx	lr

0810478a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810478a:	b480      	push	{r7}
 810478c:	b085      	sub	sp, #20
 810478e:	af00      	add	r7, sp, #0
 8104790:	6078      	str	r0, [r7, #4]
 8104792:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810479a:	b2db      	uxtb	r3, r3
 810479c:	2b20      	cmp	r3, #32
 810479e:	d139      	bne.n	8104814 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81047a0:	687b      	ldr	r3, [r7, #4]
 81047a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81047a6:	2b01      	cmp	r3, #1
 81047a8:	d101      	bne.n	81047ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81047aa:	2302      	movs	r3, #2
 81047ac:	e033      	b.n	8104816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81047ae:	687b      	ldr	r3, [r7, #4]
 81047b0:	2201      	movs	r2, #1
 81047b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81047b6:	687b      	ldr	r3, [r7, #4]
 81047b8:	2224      	movs	r2, #36	; 0x24
 81047ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	681a      	ldr	r2, [r3, #0]
 81047c4:	687b      	ldr	r3, [r7, #4]
 81047c6:	681b      	ldr	r3, [r3, #0]
 81047c8:	f022 0201 	bic.w	r2, r2, #1
 81047cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81047ce:	687b      	ldr	r3, [r7, #4]
 81047d0:	681b      	ldr	r3, [r3, #0]
 81047d2:	681b      	ldr	r3, [r3, #0]
 81047d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81047d6:	68fb      	ldr	r3, [r7, #12]
 81047d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81047dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81047de:	683b      	ldr	r3, [r7, #0]
 81047e0:	021b      	lsls	r3, r3, #8
 81047e2:	68fa      	ldr	r2, [r7, #12]
 81047e4:	4313      	orrs	r3, r2
 81047e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81047e8:	687b      	ldr	r3, [r7, #4]
 81047ea:	681b      	ldr	r3, [r3, #0]
 81047ec:	68fa      	ldr	r2, [r7, #12]
 81047ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	681a      	ldr	r2, [r3, #0]
 81047f6:	687b      	ldr	r3, [r7, #4]
 81047f8:	681b      	ldr	r3, [r3, #0]
 81047fa:	f042 0201 	orr.w	r2, r2, #1
 81047fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8104800:	687b      	ldr	r3, [r7, #4]
 8104802:	2220      	movs	r2, #32
 8104804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8104808:	687b      	ldr	r3, [r7, #4]
 810480a:	2200      	movs	r2, #0
 810480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8104810:	2300      	movs	r3, #0
 8104812:	e000      	b.n	8104816 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8104814:	2302      	movs	r3, #2
  }
}
 8104816:	4618      	mov	r0, r3
 8104818:	3714      	adds	r7, #20
 810481a:	46bd      	mov	sp, r7
 810481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104820:	4770      	bx	lr
	...

08104824 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8104824:	b580      	push	{r7, lr}
 8104826:	b084      	sub	sp, #16
 8104828:	af00      	add	r7, sp, #0
 810482a:	60f8      	str	r0, [r7, #12]
 810482c:	460b      	mov	r3, r1
 810482e:	607a      	str	r2, [r7, #4]
 8104830:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8104832:	4b37      	ldr	r3, [pc, #220]	; (8104910 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104834:	681b      	ldr	r3, [r3, #0]
 8104836:	f023 0201 	bic.w	r2, r3, #1
 810483a:	4935      	ldr	r1, [pc, #212]	; (8104910 <HAL_PWREx_EnterSTOPMode+0xec>)
 810483c:	68fb      	ldr	r3, [r7, #12]
 810483e:	4313      	orrs	r3, r2
 8104840:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	2b00      	cmp	r3, #0
 8104846:	d123      	bne.n	8104890 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8104848:	f7fe ffd8 	bl	81037fc <HAL_GetCurrentCPUID>
 810484c:	4603      	mov	r3, r0
 810484e:	2b03      	cmp	r3, #3
 8104850:	d158      	bne.n	8104904 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8104852:	4b2f      	ldr	r3, [pc, #188]	; (8104910 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104854:	691b      	ldr	r3, [r3, #16]
 8104856:	4a2e      	ldr	r2, [pc, #184]	; (8104910 <HAL_PWREx_EnterSTOPMode+0xec>)
 8104858:	f023 0301 	bic.w	r3, r3, #1
 810485c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810485e:	4b2d      	ldr	r3, [pc, #180]	; (8104914 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104860:	691b      	ldr	r3, [r3, #16]
 8104862:	4a2c      	ldr	r2, [pc, #176]	; (8104914 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104864:	f043 0304 	orr.w	r3, r3, #4
 8104868:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810486a:	f3bf 8f4f 	dsb	sy
}
 810486e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8104870:	f3bf 8f6f 	isb	sy
}
 8104874:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8104876:	7afb      	ldrb	r3, [r7, #11]
 8104878:	2b01      	cmp	r3, #1
 810487a:	d101      	bne.n	8104880 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810487c:	bf30      	wfi
 810487e:	e000      	b.n	8104882 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8104880:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8104882:	4b24      	ldr	r3, [pc, #144]	; (8104914 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104884:	691b      	ldr	r3, [r3, #16]
 8104886:	4a23      	ldr	r2, [pc, #140]	; (8104914 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8104888:	f023 0304 	bic.w	r3, r3, #4
 810488c:	6113      	str	r3, [r2, #16]
 810488e:	e03c      	b.n	810490a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	2b01      	cmp	r3, #1
 8104894:	d123      	bne.n	81048de <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8104896:	f7fe ffb1 	bl	81037fc <HAL_GetCurrentCPUID>
 810489a:	4603      	mov	r3, r0
 810489c:	2b01      	cmp	r3, #1
 810489e:	d133      	bne.n	8104908 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81048a0:	4b1b      	ldr	r3, [pc, #108]	; (8104910 <HAL_PWREx_EnterSTOPMode+0xec>)
 81048a2:	695b      	ldr	r3, [r3, #20]
 81048a4:	4a1a      	ldr	r2, [pc, #104]	; (8104910 <HAL_PWREx_EnterSTOPMode+0xec>)
 81048a6:	f023 0302 	bic.w	r3, r3, #2
 81048aa:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81048ac:	4b19      	ldr	r3, [pc, #100]	; (8104914 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81048ae:	691b      	ldr	r3, [r3, #16]
 81048b0:	4a18      	ldr	r2, [pc, #96]	; (8104914 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81048b2:	f043 0304 	orr.w	r3, r3, #4
 81048b6:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81048b8:	f3bf 8f4f 	dsb	sy
}
 81048bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81048be:	f3bf 8f6f 	isb	sy
}
 81048c2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81048c4:	7afb      	ldrb	r3, [r7, #11]
 81048c6:	2b01      	cmp	r3, #1
 81048c8:	d101      	bne.n	81048ce <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81048ca:	bf30      	wfi
 81048cc:	e000      	b.n	81048d0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81048ce:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81048d0:	4b10      	ldr	r3, [pc, #64]	; (8104914 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81048d2:	691b      	ldr	r3, [r3, #16]
 81048d4:	4a0f      	ldr	r2, [pc, #60]	; (8104914 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81048d6:	f023 0304 	bic.w	r3, r3, #4
 81048da:	6113      	str	r3, [r2, #16]
 81048dc:	e015      	b.n	810490a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81048de:	f7fe ff8d 	bl	81037fc <HAL_GetCurrentCPUID>
 81048e2:	4603      	mov	r3, r0
 81048e4:	2b03      	cmp	r3, #3
 81048e6:	d106      	bne.n	81048f6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81048e8:	4b09      	ldr	r3, [pc, #36]	; (8104910 <HAL_PWREx_EnterSTOPMode+0xec>)
 81048ea:	691b      	ldr	r3, [r3, #16]
 81048ec:	4a08      	ldr	r2, [pc, #32]	; (8104910 <HAL_PWREx_EnterSTOPMode+0xec>)
 81048ee:	f023 0304 	bic.w	r3, r3, #4
 81048f2:	6113      	str	r3, [r2, #16]
 81048f4:	e009      	b.n	810490a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81048f6:	4b06      	ldr	r3, [pc, #24]	; (8104910 <HAL_PWREx_EnterSTOPMode+0xec>)
 81048f8:	695b      	ldr	r3, [r3, #20]
 81048fa:	4a05      	ldr	r2, [pc, #20]	; (8104910 <HAL_PWREx_EnterSTOPMode+0xec>)
 81048fc:	f023 0304 	bic.w	r3, r3, #4
 8104900:	6153      	str	r3, [r2, #20]
 8104902:	e002      	b.n	810490a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104904:	bf00      	nop
 8104906:	e000      	b.n	810490a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8104908:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810490a:	3710      	adds	r7, #16
 810490c:	46bd      	mov	sp, r7
 810490e:	bd80      	pop	{r7, pc}
 8104910:	58024800 	.word	0x58024800
 8104914:	e000ed00 	.word	0xe000ed00

08104918 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8104918:	b580      	push	{r7, lr}
 810491a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810491c:	f7fe ff6e 	bl	81037fc <HAL_GetCurrentCPUID>
 8104920:	4603      	mov	r3, r0
 8104922:	2b03      	cmp	r3, #3
 8104924:	d101      	bne.n	810492a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8104926:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8104928:	e001      	b.n	810492e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810492a:	bf40      	sev
    __WFE ();
 810492c:	bf20      	wfe
}
 810492e:	bf00      	nop
 8104930:	bd80      	pop	{r7, pc}
	...

08104934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8104934:	b480      	push	{r7}
 8104936:	b089      	sub	sp, #36	; 0x24
 8104938:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810493a:	4bb3      	ldr	r3, [pc, #716]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810493c:	691b      	ldr	r3, [r3, #16]
 810493e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104942:	2b18      	cmp	r3, #24
 8104944:	f200 8155 	bhi.w	8104bf2 <HAL_RCC_GetSysClockFreq+0x2be>
 8104948:	a201      	add	r2, pc, #4	; (adr r2, 8104950 <HAL_RCC_GetSysClockFreq+0x1c>)
 810494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810494e:	bf00      	nop
 8104950:	081049b5 	.word	0x081049b5
 8104954:	08104bf3 	.word	0x08104bf3
 8104958:	08104bf3 	.word	0x08104bf3
 810495c:	08104bf3 	.word	0x08104bf3
 8104960:	08104bf3 	.word	0x08104bf3
 8104964:	08104bf3 	.word	0x08104bf3
 8104968:	08104bf3 	.word	0x08104bf3
 810496c:	08104bf3 	.word	0x08104bf3
 8104970:	081049db 	.word	0x081049db
 8104974:	08104bf3 	.word	0x08104bf3
 8104978:	08104bf3 	.word	0x08104bf3
 810497c:	08104bf3 	.word	0x08104bf3
 8104980:	08104bf3 	.word	0x08104bf3
 8104984:	08104bf3 	.word	0x08104bf3
 8104988:	08104bf3 	.word	0x08104bf3
 810498c:	08104bf3 	.word	0x08104bf3
 8104990:	081049e1 	.word	0x081049e1
 8104994:	08104bf3 	.word	0x08104bf3
 8104998:	08104bf3 	.word	0x08104bf3
 810499c:	08104bf3 	.word	0x08104bf3
 81049a0:	08104bf3 	.word	0x08104bf3
 81049a4:	08104bf3 	.word	0x08104bf3
 81049a8:	08104bf3 	.word	0x08104bf3
 81049ac:	08104bf3 	.word	0x08104bf3
 81049b0:	081049e7 	.word	0x081049e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81049b4:	4b94      	ldr	r3, [pc, #592]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049b6:	681b      	ldr	r3, [r3, #0]
 81049b8:	f003 0320 	and.w	r3, r3, #32
 81049bc:	2b00      	cmp	r3, #0
 81049be:	d009      	beq.n	81049d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81049c0:	4b91      	ldr	r3, [pc, #580]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049c2:	681b      	ldr	r3, [r3, #0]
 81049c4:	08db      	lsrs	r3, r3, #3
 81049c6:	f003 0303 	and.w	r3, r3, #3
 81049ca:	4a90      	ldr	r2, [pc, #576]	; (8104c0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81049cc:	fa22 f303 	lsr.w	r3, r2, r3
 81049d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81049d2:	e111      	b.n	8104bf8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81049d4:	4b8d      	ldr	r3, [pc, #564]	; (8104c0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 81049d6:	61bb      	str	r3, [r7, #24]
      break;
 81049d8:	e10e      	b.n	8104bf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81049da:	4b8d      	ldr	r3, [pc, #564]	; (8104c10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81049dc:	61bb      	str	r3, [r7, #24]
      break;
 81049de:	e10b      	b.n	8104bf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81049e0:	4b8c      	ldr	r3, [pc, #560]	; (8104c14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81049e2:	61bb      	str	r3, [r7, #24]
      break;
 81049e4:	e108      	b.n	8104bf8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81049e6:	4b88      	ldr	r3, [pc, #544]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81049ea:	f003 0303 	and.w	r3, r3, #3
 81049ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81049f0:	4b85      	ldr	r3, [pc, #532]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81049f4:	091b      	lsrs	r3, r3, #4
 81049f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81049fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81049fc:	4b82      	ldr	r3, [pc, #520]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81049fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a00:	f003 0301 	and.w	r3, r3, #1
 8104a04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8104a06:	4b80      	ldr	r3, [pc, #512]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8104a0a:	08db      	lsrs	r3, r3, #3
 8104a0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104a10:	68fa      	ldr	r2, [r7, #12]
 8104a12:	fb02 f303 	mul.w	r3, r2, r3
 8104a16:	ee07 3a90 	vmov	s15, r3
 8104a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8104a22:	693b      	ldr	r3, [r7, #16]
 8104a24:	2b00      	cmp	r3, #0
 8104a26:	f000 80e1 	beq.w	8104bec <HAL_RCC_GetSysClockFreq+0x2b8>
 8104a2a:	697b      	ldr	r3, [r7, #20]
 8104a2c:	2b02      	cmp	r3, #2
 8104a2e:	f000 8083 	beq.w	8104b38 <HAL_RCC_GetSysClockFreq+0x204>
 8104a32:	697b      	ldr	r3, [r7, #20]
 8104a34:	2b02      	cmp	r3, #2
 8104a36:	f200 80a1 	bhi.w	8104b7c <HAL_RCC_GetSysClockFreq+0x248>
 8104a3a:	697b      	ldr	r3, [r7, #20]
 8104a3c:	2b00      	cmp	r3, #0
 8104a3e:	d003      	beq.n	8104a48 <HAL_RCC_GetSysClockFreq+0x114>
 8104a40:	697b      	ldr	r3, [r7, #20]
 8104a42:	2b01      	cmp	r3, #1
 8104a44:	d056      	beq.n	8104af4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8104a46:	e099      	b.n	8104b7c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104a48:	4b6f      	ldr	r3, [pc, #444]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a4a:	681b      	ldr	r3, [r3, #0]
 8104a4c:	f003 0320 	and.w	r3, r3, #32
 8104a50:	2b00      	cmp	r3, #0
 8104a52:	d02d      	beq.n	8104ab0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104a54:	4b6c      	ldr	r3, [pc, #432]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a56:	681b      	ldr	r3, [r3, #0]
 8104a58:	08db      	lsrs	r3, r3, #3
 8104a5a:	f003 0303 	and.w	r3, r3, #3
 8104a5e:	4a6b      	ldr	r2, [pc, #428]	; (8104c0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8104a60:	fa22 f303 	lsr.w	r3, r2, r3
 8104a64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104a66:	687b      	ldr	r3, [r7, #4]
 8104a68:	ee07 3a90 	vmov	s15, r3
 8104a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a70:	693b      	ldr	r3, [r7, #16]
 8104a72:	ee07 3a90 	vmov	s15, r3
 8104a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104a7e:	4b62      	ldr	r3, [pc, #392]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104a86:	ee07 3a90 	vmov	s15, r3
 8104a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104a92:	eddf 5a61 	vldr	s11, [pc, #388]	; 8104c18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104aaa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8104aae:	e087      	b.n	8104bc0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104ab0:	693b      	ldr	r3, [r7, #16]
 8104ab2:	ee07 3a90 	vmov	s15, r3
 8104ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104aba:	eddf 6a58 	vldr	s13, [pc, #352]	; 8104c1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8104abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104ac2:	4b51      	ldr	r3, [pc, #324]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104aca:	ee07 3a90 	vmov	s15, r3
 8104ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8104ad6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8104c18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104aee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104af2:	e065      	b.n	8104bc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104af4:	693b      	ldr	r3, [r7, #16]
 8104af6:	ee07 3a90 	vmov	s15, r3
 8104afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104afe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8104c20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b06:	4b40      	ldr	r3, [pc, #256]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b0e:	ee07 3a90 	vmov	s15, r3
 8104b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8104b1a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8104c18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104b36:	e043      	b.n	8104bc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104b38:	693b      	ldr	r3, [r7, #16]
 8104b3a:	ee07 3a90 	vmov	s15, r3
 8104b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b42:	eddf 6a38 	vldr	s13, [pc, #224]	; 8104c24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8104b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b4a:	4b2f      	ldr	r3, [pc, #188]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b52:	ee07 3a90 	vmov	s15, r3
 8104b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8104b5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8104c18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104b6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104b76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104b7a:	e021      	b.n	8104bc0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8104b7c:	693b      	ldr	r3, [r7, #16]
 8104b7e:	ee07 3a90 	vmov	s15, r3
 8104b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104b86:	eddf 6a26 	vldr	s13, [pc, #152]	; 8104c20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8104b8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104b8e:	4b1e      	ldr	r3, [pc, #120]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104b92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104b96:	ee07 3a90 	vmov	s15, r3
 8104b9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104b9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8104ba2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8104c18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8104ba6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104baa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104bae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104bb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104bba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8104bbe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8104bc0:	4b11      	ldr	r3, [pc, #68]	; (8104c08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8104bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8104bc4:	0a5b      	lsrs	r3, r3, #9
 8104bc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104bca:	3301      	adds	r3, #1
 8104bcc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8104bce:	683b      	ldr	r3, [r7, #0]
 8104bd0:	ee07 3a90 	vmov	s15, r3
 8104bd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8104bd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8104bdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104be0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104be4:	ee17 3a90 	vmov	r3, s15
 8104be8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8104bea:	e005      	b.n	8104bf8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8104bec:	2300      	movs	r3, #0
 8104bee:	61bb      	str	r3, [r7, #24]
      break;
 8104bf0:	e002      	b.n	8104bf8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8104bf2:	4b07      	ldr	r3, [pc, #28]	; (8104c10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8104bf4:	61bb      	str	r3, [r7, #24]
      break;
 8104bf6:	bf00      	nop
  }

  return sysclockfreq;
 8104bf8:	69bb      	ldr	r3, [r7, #24]
}
 8104bfa:	4618      	mov	r0, r3
 8104bfc:	3724      	adds	r7, #36	; 0x24
 8104bfe:	46bd      	mov	sp, r7
 8104c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104c04:	4770      	bx	lr
 8104c06:	bf00      	nop
 8104c08:	58024400 	.word	0x58024400
 8104c0c:	03d09000 	.word	0x03d09000
 8104c10:	003d0900 	.word	0x003d0900
 8104c14:	017d7840 	.word	0x017d7840
 8104c18:	46000000 	.word	0x46000000
 8104c1c:	4c742400 	.word	0x4c742400
 8104c20:	4a742400 	.word	0x4a742400
 8104c24:	4bbebc20 	.word	0x4bbebc20

08104c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8104c28:	b580      	push	{r7, lr}
 8104c2a:	b082      	sub	sp, #8
 8104c2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8104c2e:	f7ff fe81 	bl	8104934 <HAL_RCC_GetSysClockFreq>
 8104c32:	4602      	mov	r2, r0
 8104c34:	4b11      	ldr	r3, [pc, #68]	; (8104c7c <HAL_RCC_GetHCLKFreq+0x54>)
 8104c36:	699b      	ldr	r3, [r3, #24]
 8104c38:	0a1b      	lsrs	r3, r3, #8
 8104c3a:	f003 030f 	and.w	r3, r3, #15
 8104c3e:	4910      	ldr	r1, [pc, #64]	; (8104c80 <HAL_RCC_GetHCLKFreq+0x58>)
 8104c40:	5ccb      	ldrb	r3, [r1, r3]
 8104c42:	f003 031f 	and.w	r3, r3, #31
 8104c46:	fa22 f303 	lsr.w	r3, r2, r3
 8104c4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8104c4c:	4b0b      	ldr	r3, [pc, #44]	; (8104c7c <HAL_RCC_GetHCLKFreq+0x54>)
 8104c4e:	699b      	ldr	r3, [r3, #24]
 8104c50:	f003 030f 	and.w	r3, r3, #15
 8104c54:	4a0a      	ldr	r2, [pc, #40]	; (8104c80 <HAL_RCC_GetHCLKFreq+0x58>)
 8104c56:	5cd3      	ldrb	r3, [r2, r3]
 8104c58:	f003 031f 	and.w	r3, r3, #31
 8104c5c:	687a      	ldr	r2, [r7, #4]
 8104c5e:	fa22 f303 	lsr.w	r3, r2, r3
 8104c62:	4a08      	ldr	r2, [pc, #32]	; (8104c84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104c64:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8104c66:	4b07      	ldr	r3, [pc, #28]	; (8104c84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104c68:	681b      	ldr	r3, [r3, #0]
 8104c6a:	4a07      	ldr	r2, [pc, #28]	; (8104c88 <HAL_RCC_GetHCLKFreq+0x60>)
 8104c6c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8104c6e:	4b05      	ldr	r3, [pc, #20]	; (8104c84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8104c70:	681b      	ldr	r3, [r3, #0]
}
 8104c72:	4618      	mov	r0, r3
 8104c74:	3708      	adds	r7, #8
 8104c76:	46bd      	mov	sp, r7
 8104c78:	bd80      	pop	{r7, pc}
 8104c7a:	bf00      	nop
 8104c7c:	58024400 	.word	0x58024400
 8104c80:	0810e838 	.word	0x0810e838
 8104c84:	10000004 	.word	0x10000004
 8104c88:	10000000 	.word	0x10000000

08104c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8104c8c:	b580      	push	{r7, lr}
 8104c8e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8104c90:	f7ff ffca 	bl	8104c28 <HAL_RCC_GetHCLKFreq>
 8104c94:	4602      	mov	r2, r0
 8104c96:	4b06      	ldr	r3, [pc, #24]	; (8104cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8104c98:	69db      	ldr	r3, [r3, #28]
 8104c9a:	091b      	lsrs	r3, r3, #4
 8104c9c:	f003 0307 	and.w	r3, r3, #7
 8104ca0:	4904      	ldr	r1, [pc, #16]	; (8104cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8104ca2:	5ccb      	ldrb	r3, [r1, r3]
 8104ca4:	f003 031f 	and.w	r3, r3, #31
 8104ca8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8104cac:	4618      	mov	r0, r3
 8104cae:	bd80      	pop	{r7, pc}
 8104cb0:	58024400 	.word	0x58024400
 8104cb4:	0810e838 	.word	0x0810e838

08104cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8104cb8:	b580      	push	{r7, lr}
 8104cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8104cbc:	f7ff ffb4 	bl	8104c28 <HAL_RCC_GetHCLKFreq>
 8104cc0:	4602      	mov	r2, r0
 8104cc2:	4b06      	ldr	r3, [pc, #24]	; (8104cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8104cc4:	69db      	ldr	r3, [r3, #28]
 8104cc6:	0a1b      	lsrs	r3, r3, #8
 8104cc8:	f003 0307 	and.w	r3, r3, #7
 8104ccc:	4904      	ldr	r1, [pc, #16]	; (8104ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8104cce:	5ccb      	ldrb	r3, [r1, r3]
 8104cd0:	f003 031f 	and.w	r3, r3, #31
 8104cd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8104cd8:	4618      	mov	r0, r3
 8104cda:	bd80      	pop	{r7, pc}
 8104cdc:	58024400 	.word	0x58024400
 8104ce0:	0810e838 	.word	0x0810e838

08104ce4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8104ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8104ce8:	b0ca      	sub	sp, #296	; 0x128
 8104cea:	af00      	add	r7, sp, #0
 8104cec:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8104cf0:	2300      	movs	r3, #0
 8104cf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8104cf6:	2300      	movs	r3, #0
 8104cf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8104cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104d04:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8104d08:	2500      	movs	r5, #0
 8104d0a:	ea54 0305 	orrs.w	r3, r4, r5
 8104d0e:	d049      	beq.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8104d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104d16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104d1a:	d02f      	beq.n	8104d7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8104d1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104d20:	d828      	bhi.n	8104d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104d22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104d26:	d01a      	beq.n	8104d5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8104d28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104d2c:	d822      	bhi.n	8104d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8104d2e:	2b00      	cmp	r3, #0
 8104d30:	d003      	beq.n	8104d3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8104d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104d36:	d007      	beq.n	8104d48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8104d38:	e01c      	b.n	8104d74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104d3a:	4bb8      	ldr	r3, [pc, #736]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104d3e:	4ab7      	ldr	r2, [pc, #732]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104d44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104d46:	e01a      	b.n	8104d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d4c:	3308      	adds	r3, #8
 8104d4e:	2102      	movs	r1, #2
 8104d50:	4618      	mov	r0, r3
 8104d52:	f001 fc8f 	bl	8106674 <RCCEx_PLL2_Config>
 8104d56:	4603      	mov	r3, r0
 8104d58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104d5c:	e00f      	b.n	8104d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d62:	3328      	adds	r3, #40	; 0x28
 8104d64:	2102      	movs	r1, #2
 8104d66:	4618      	mov	r0, r3
 8104d68:	f001 fd36 	bl	81067d8 <RCCEx_PLL3_Config>
 8104d6c:	4603      	mov	r3, r0
 8104d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8104d72:	e004      	b.n	8104d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104d74:	2301      	movs	r3, #1
 8104d76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104d7a:	e000      	b.n	8104d7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8104d7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104d82:	2b00      	cmp	r3, #0
 8104d84:	d10a      	bne.n	8104d9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8104d86:	4ba5      	ldr	r3, [pc, #660]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104d8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8104d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104d94:	4aa1      	ldr	r2, [pc, #644]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104d96:	430b      	orrs	r3, r1
 8104d98:	6513      	str	r3, [r2, #80]	; 0x50
 8104d9a:	e003      	b.n	8104da4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104da0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8104da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104dac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8104db0:	f04f 0900 	mov.w	r9, #0
 8104db4:	ea58 0309 	orrs.w	r3, r8, r9
 8104db8:	d047      	beq.n	8104e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8104dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104dc0:	2b04      	cmp	r3, #4
 8104dc2:	d82a      	bhi.n	8104e1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8104dc4:	a201      	add	r2, pc, #4	; (adr r2, 8104dcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8104dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104dca:	bf00      	nop
 8104dcc:	08104de1 	.word	0x08104de1
 8104dd0:	08104def 	.word	0x08104def
 8104dd4:	08104e05 	.word	0x08104e05
 8104dd8:	08104e23 	.word	0x08104e23
 8104ddc:	08104e23 	.word	0x08104e23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104de0:	4b8e      	ldr	r3, [pc, #568]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104de4:	4a8d      	ldr	r2, [pc, #564]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104dec:	e01a      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104df2:	3308      	adds	r3, #8
 8104df4:	2100      	movs	r1, #0
 8104df6:	4618      	mov	r0, r3
 8104df8:	f001 fc3c 	bl	8106674 <RCCEx_PLL2_Config>
 8104dfc:	4603      	mov	r3, r0
 8104dfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104e02:	e00f      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e08:	3328      	adds	r3, #40	; 0x28
 8104e0a:	2100      	movs	r1, #0
 8104e0c:	4618      	mov	r0, r3
 8104e0e:	f001 fce3 	bl	81067d8 <RCCEx_PLL3_Config>
 8104e12:	4603      	mov	r3, r0
 8104e14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104e18:	e004      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104e1a:	2301      	movs	r3, #1
 8104e1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104e20:	e000      	b.n	8104e24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8104e22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e28:	2b00      	cmp	r3, #0
 8104e2a:	d10a      	bne.n	8104e42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8104e2c:	4b7b      	ldr	r3, [pc, #492]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104e30:	f023 0107 	bic.w	r1, r3, #7
 8104e34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104e3a:	4a78      	ldr	r2, [pc, #480]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e3c:	430b      	orrs	r3, r1
 8104e3e:	6513      	str	r3, [r2, #80]	; 0x50
 8104e40:	e003      	b.n	8104e4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104e42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104e46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8104e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e52:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8104e56:	f04f 0b00 	mov.w	fp, #0
 8104e5a:	ea5a 030b 	orrs.w	r3, sl, fp
 8104e5e:	d04c      	beq.n	8104efa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8104e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e6a:	d030      	beq.n	8104ece <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8104e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104e70:	d829      	bhi.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104e72:	2bc0      	cmp	r3, #192	; 0xc0
 8104e74:	d02d      	beq.n	8104ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8104e76:	2bc0      	cmp	r3, #192	; 0xc0
 8104e78:	d825      	bhi.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104e7a:	2b80      	cmp	r3, #128	; 0x80
 8104e7c:	d018      	beq.n	8104eb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8104e7e:	2b80      	cmp	r3, #128	; 0x80
 8104e80:	d821      	bhi.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8104e82:	2b00      	cmp	r3, #0
 8104e84:	d002      	beq.n	8104e8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8104e86:	2b40      	cmp	r3, #64	; 0x40
 8104e88:	d007      	beq.n	8104e9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8104e8a:	e01c      	b.n	8104ec6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104e8c:	4b63      	ldr	r3, [pc, #396]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e90:	4a62      	ldr	r2, [pc, #392]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104e96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104e98:	e01c      	b.n	8104ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104e9e:	3308      	adds	r3, #8
 8104ea0:	2100      	movs	r1, #0
 8104ea2:	4618      	mov	r0, r3
 8104ea4:	f001 fbe6 	bl	8106674 <RCCEx_PLL2_Config>
 8104ea8:	4603      	mov	r3, r0
 8104eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104eae:	e011      	b.n	8104ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104eb4:	3328      	adds	r3, #40	; 0x28
 8104eb6:	2100      	movs	r1, #0
 8104eb8:	4618      	mov	r0, r3
 8104eba:	f001 fc8d 	bl	81067d8 <RCCEx_PLL3_Config>
 8104ebe:	4603      	mov	r3, r0
 8104ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8104ec4:	e006      	b.n	8104ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104ec6:	2301      	movs	r3, #1
 8104ec8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104ecc:	e002      	b.n	8104ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104ece:	bf00      	nop
 8104ed0:	e000      	b.n	8104ed4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8104ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ed8:	2b00      	cmp	r3, #0
 8104eda:	d10a      	bne.n	8104ef2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8104edc:	4b4f      	ldr	r3, [pc, #316]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104ee0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8104ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104eea:	4a4c      	ldr	r2, [pc, #304]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104eec:	430b      	orrs	r3, r1
 8104eee:	6513      	str	r3, [r2, #80]	; 0x50
 8104ef0:	e003      	b.n	8104efa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ef2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ef6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8104efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104f02:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8104f06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8104f0a:	2300      	movs	r3, #0
 8104f0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8104f10:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8104f14:	460b      	mov	r3, r1
 8104f16:	4313      	orrs	r3, r2
 8104f18:	d053      	beq.n	8104fc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8104f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104f22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104f26:	d035      	beq.n	8104f94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8104f28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104f2c:	d82e      	bhi.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104f2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104f32:	d031      	beq.n	8104f98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8104f34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104f38:	d828      	bhi.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104f3e:	d01a      	beq.n	8104f76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8104f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104f44:	d822      	bhi.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8104f46:	2b00      	cmp	r3, #0
 8104f48:	d003      	beq.n	8104f52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8104f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104f4e:	d007      	beq.n	8104f60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8104f50:	e01c      	b.n	8104f8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104f52:	4b32      	ldr	r3, [pc, #200]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104f56:	4a31      	ldr	r2, [pc, #196]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104f5e:	e01c      	b.n	8104f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f64:	3308      	adds	r3, #8
 8104f66:	2100      	movs	r1, #0
 8104f68:	4618      	mov	r0, r3
 8104f6a:	f001 fb83 	bl	8106674 <RCCEx_PLL2_Config>
 8104f6e:	4603      	mov	r3, r0
 8104f70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8104f74:	e011      	b.n	8104f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104f7a:	3328      	adds	r3, #40	; 0x28
 8104f7c:	2100      	movs	r1, #0
 8104f7e:	4618      	mov	r0, r3
 8104f80:	f001 fc2a 	bl	81067d8 <RCCEx_PLL3_Config>
 8104f84:	4603      	mov	r3, r0
 8104f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8104f8a:	e006      	b.n	8104f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8104f8c:	2301      	movs	r3, #1
 8104f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104f92:	e002      	b.n	8104f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104f94:	bf00      	nop
 8104f96:	e000      	b.n	8104f9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8104f98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104f9e:	2b00      	cmp	r3, #0
 8104fa0:	d10b      	bne.n	8104fba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8104fa2:	4b1e      	ldr	r3, [pc, #120]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104fa6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8104faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8104fb2:	4a1a      	ldr	r2, [pc, #104]	; (810501c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8104fb4:	430b      	orrs	r3, r1
 8104fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8104fb8:	e003      	b.n	8104fc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104fbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8104fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fca:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8104fce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8104fd2:	2300      	movs	r3, #0
 8104fd4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8104fd8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8104fdc:	460b      	mov	r3, r1
 8104fde:	4313      	orrs	r3, r2
 8104fe0:	d056      	beq.n	8105090 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8104fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104fea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104fee:	d038      	beq.n	8105062 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8104ff0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104ff4:	d831      	bhi.n	810505a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8104ff6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104ffa:	d034      	beq.n	8105066 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8104ffc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8105000:	d82b      	bhi.n	810505a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105006:	d01d      	beq.n	8105044 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8105008:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810500c:	d825      	bhi.n	810505a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810500e:	2b00      	cmp	r3, #0
 8105010:	d006      	beq.n	8105020 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8105012:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8105016:	d00a      	beq.n	810502e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105018:	e01f      	b.n	810505a <HAL_RCCEx_PeriphCLKConfig+0x376>
 810501a:	bf00      	nop
 810501c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105020:	4ba2      	ldr	r3, [pc, #648]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105024:	4aa1      	ldr	r2, [pc, #644]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810502a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810502c:	e01c      	b.n	8105068 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810502e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105032:	3308      	adds	r3, #8
 8105034:	2100      	movs	r1, #0
 8105036:	4618      	mov	r0, r3
 8105038:	f001 fb1c 	bl	8106674 <RCCEx_PLL2_Config>
 810503c:	4603      	mov	r3, r0
 810503e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105042:	e011      	b.n	8105068 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105048:	3328      	adds	r3, #40	; 0x28
 810504a:	2100      	movs	r1, #0
 810504c:	4618      	mov	r0, r3
 810504e:	f001 fbc3 	bl	81067d8 <RCCEx_PLL3_Config>
 8105052:	4603      	mov	r3, r0
 8105054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105058:	e006      	b.n	8105068 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810505a:	2301      	movs	r3, #1
 810505c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105060:	e002      	b.n	8105068 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105062:	bf00      	nop
 8105064:	e000      	b.n	8105068 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105068:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810506c:	2b00      	cmp	r3, #0
 810506e:	d10b      	bne.n	8105088 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105070:	4b8e      	ldr	r3, [pc, #568]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105074:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8105078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810507c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8105080:	4a8a      	ldr	r2, [pc, #552]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105082:	430b      	orrs	r3, r1
 8105084:	6593      	str	r3, [r2, #88]	; 0x58
 8105086:	e003      	b.n	8105090 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810508c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105098:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 810509c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 81050a0:	2300      	movs	r3, #0
 81050a2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 81050a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 81050aa:	460b      	mov	r3, r1
 81050ac:	4313      	orrs	r3, r2
 81050ae:	d03a      	beq.n	8105126 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 81050b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81050b6:	2b30      	cmp	r3, #48	; 0x30
 81050b8:	d01f      	beq.n	81050fa <HAL_RCCEx_PeriphCLKConfig+0x416>
 81050ba:	2b30      	cmp	r3, #48	; 0x30
 81050bc:	d819      	bhi.n	81050f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81050be:	2b20      	cmp	r3, #32
 81050c0:	d00c      	beq.n	81050dc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 81050c2:	2b20      	cmp	r3, #32
 81050c4:	d815      	bhi.n	81050f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 81050c6:	2b00      	cmp	r3, #0
 81050c8:	d019      	beq.n	81050fe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 81050ca:	2b10      	cmp	r3, #16
 81050cc:	d111      	bne.n	81050f2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81050ce:	4b77      	ldr	r3, [pc, #476]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81050d2:	4a76      	ldr	r2, [pc, #472]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81050d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81050d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81050da:	e011      	b.n	8105100 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81050dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81050e0:	3308      	adds	r3, #8
 81050e2:	2102      	movs	r1, #2
 81050e4:	4618      	mov	r0, r3
 81050e6:	f001 fac5 	bl	8106674 <RCCEx_PLL2_Config>
 81050ea:	4603      	mov	r3, r0
 81050ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81050f0:	e006      	b.n	8105100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81050f2:	2301      	movs	r3, #1
 81050f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81050f8:	e002      	b.n	8105100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81050fa:	bf00      	nop
 81050fc:	e000      	b.n	8105100 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81050fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105104:	2b00      	cmp	r3, #0
 8105106:	d10a      	bne.n	810511e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105108:	4b68      	ldr	r3, [pc, #416]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810510a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810510c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8105110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105116:	4a65      	ldr	r2, [pc, #404]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105118:	430b      	orrs	r3, r1
 810511a:	64d3      	str	r3, [r2, #76]	; 0x4c
 810511c:	e003      	b.n	8105126 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810511e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105122:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105126:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810512e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8105132:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8105136:	2300      	movs	r3, #0
 8105138:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 810513c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8105140:	460b      	mov	r3, r1
 8105142:	4313      	orrs	r3, r2
 8105144:	d051      	beq.n	81051ea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8105146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810514a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810514c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105150:	d035      	beq.n	81051be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8105152:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105156:	d82e      	bhi.n	81051b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105158:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810515c:	d031      	beq.n	81051c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810515e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105162:	d828      	bhi.n	81051b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105168:	d01a      	beq.n	81051a0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 810516a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810516e:	d822      	bhi.n	81051b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105170:	2b00      	cmp	r3, #0
 8105172:	d003      	beq.n	810517c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8105174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105178:	d007      	beq.n	810518a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 810517a:	e01c      	b.n	81051b6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810517c:	4b4b      	ldr	r3, [pc, #300]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105180:	4a4a      	ldr	r2, [pc, #296]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105182:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105186:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105188:	e01c      	b.n	81051c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810518a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810518e:	3308      	adds	r3, #8
 8105190:	2100      	movs	r1, #0
 8105192:	4618      	mov	r0, r3
 8105194:	f001 fa6e 	bl	8106674 <RCCEx_PLL2_Config>
 8105198:	4603      	mov	r3, r0
 810519a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810519e:	e011      	b.n	81051c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81051a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051a4:	3328      	adds	r3, #40	; 0x28
 81051a6:	2100      	movs	r1, #0
 81051a8:	4618      	mov	r0, r3
 81051aa:	f001 fb15 	bl	81067d8 <RCCEx_PLL3_Config>
 81051ae:	4603      	mov	r3, r0
 81051b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81051b4:	e006      	b.n	81051c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81051b6:	2301      	movs	r3, #1
 81051b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81051bc:	e002      	b.n	81051c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81051be:	bf00      	nop
 81051c0:	e000      	b.n	81051c4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 81051c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81051c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81051c8:	2b00      	cmp	r3, #0
 81051ca:	d10a      	bne.n	81051e2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81051cc:	4b37      	ldr	r3, [pc, #220]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81051ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81051d0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 81051d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81051da:	4a34      	ldr	r2, [pc, #208]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81051dc:	430b      	orrs	r3, r1
 81051de:	6513      	str	r3, [r2, #80]	; 0x50
 81051e0:	e003      	b.n	81051ea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81051e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81051e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 81051f2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 81051f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 81051fa:	2300      	movs	r3, #0
 81051fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8105200:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8105204:	460b      	mov	r3, r1
 8105206:	4313      	orrs	r3, r2
 8105208:	d056      	beq.n	81052b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810520a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810520e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8105210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8105214:	d033      	beq.n	810527e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8105216:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810521a:	d82c      	bhi.n	8105276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810521c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105220:	d02f      	beq.n	8105282 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8105222:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8105226:	d826      	bhi.n	8105276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105228:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810522c:	d02b      	beq.n	8105286 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810522e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8105232:	d820      	bhi.n	8105276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105238:	d012      	beq.n	8105260 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 810523a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810523e:	d81a      	bhi.n	8105276 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105240:	2b00      	cmp	r3, #0
 8105242:	d022      	beq.n	810528a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8105244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105248:	d115      	bne.n	8105276 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810524a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810524e:	3308      	adds	r3, #8
 8105250:	2101      	movs	r1, #1
 8105252:	4618      	mov	r0, r3
 8105254:	f001 fa0e 	bl	8106674 <RCCEx_PLL2_Config>
 8105258:	4603      	mov	r3, r0
 810525a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810525e:	e015      	b.n	810528c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105264:	3328      	adds	r3, #40	; 0x28
 8105266:	2101      	movs	r1, #1
 8105268:	4618      	mov	r0, r3
 810526a:	f001 fab5 	bl	81067d8 <RCCEx_PLL3_Config>
 810526e:	4603      	mov	r3, r0
 8105270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105274:	e00a      	b.n	810528c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105276:	2301      	movs	r3, #1
 8105278:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810527c:	e006      	b.n	810528c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810527e:	bf00      	nop
 8105280:	e004      	b.n	810528c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105282:	bf00      	nop
 8105284:	e002      	b.n	810528c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105286:	bf00      	nop
 8105288:	e000      	b.n	810528c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810528a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810528c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105290:	2b00      	cmp	r3, #0
 8105292:	d10d      	bne.n	81052b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105294:	4b05      	ldr	r3, [pc, #20]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105298:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 810529c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81052a2:	4a02      	ldr	r2, [pc, #8]	; (81052ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81052a4:	430b      	orrs	r3, r1
 81052a6:	6513      	str	r3, [r2, #80]	; 0x50
 81052a8:	e006      	b.n	81052b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 81052aa:	bf00      	nop
 81052ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81052b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81052b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 81052b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81052c0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 81052c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 81052c8:	2300      	movs	r3, #0
 81052ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 81052ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 81052d2:	460b      	mov	r3, r1
 81052d4:	4313      	orrs	r3, r2
 81052d6:	d055      	beq.n	8105384 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 81052d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81052dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81052e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81052e4:	d033      	beq.n	810534e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81052e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81052ea:	d82c      	bhi.n	8105346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81052ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81052f0:	d02f      	beq.n	8105352 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81052f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81052f6:	d826      	bhi.n	8105346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81052f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81052fc:	d02b      	beq.n	8105356 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81052fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105302:	d820      	bhi.n	8105346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105308:	d012      	beq.n	8105330 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810530a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810530e:	d81a      	bhi.n	8105346 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105310:	2b00      	cmp	r3, #0
 8105312:	d022      	beq.n	810535a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8105314:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105318:	d115      	bne.n	8105346 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810531a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810531e:	3308      	adds	r3, #8
 8105320:	2101      	movs	r1, #1
 8105322:	4618      	mov	r0, r3
 8105324:	f001 f9a6 	bl	8106674 <RCCEx_PLL2_Config>
 8105328:	4603      	mov	r3, r0
 810532a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810532e:	e015      	b.n	810535c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105334:	3328      	adds	r3, #40	; 0x28
 8105336:	2101      	movs	r1, #1
 8105338:	4618      	mov	r0, r3
 810533a:	f001 fa4d 	bl	81067d8 <RCCEx_PLL3_Config>
 810533e:	4603      	mov	r3, r0
 8105340:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8105344:	e00a      	b.n	810535c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8105346:	2301      	movs	r3, #1
 8105348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810534c:	e006      	b.n	810535c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810534e:	bf00      	nop
 8105350:	e004      	b.n	810535c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105352:	bf00      	nop
 8105354:	e002      	b.n	810535c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8105356:	bf00      	nop
 8105358:	e000      	b.n	810535c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810535a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810535c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105360:	2b00      	cmp	r3, #0
 8105362:	d10b      	bne.n	810537c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8105364:	4ba4      	ldr	r3, [pc, #656]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105368:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 810536c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8105374:	4aa0      	ldr	r2, [pc, #640]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105376:	430b      	orrs	r3, r1
 8105378:	6593      	str	r3, [r2, #88]	; 0x58
 810537a:	e003      	b.n	8105384 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810537c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8105384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105388:	e9d3 2300 	ldrd	r2, r3, [r3]
 810538c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8105390:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8105394:	2300      	movs	r3, #0
 8105396:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 810539a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 810539e:	460b      	mov	r3, r1
 81053a0:	4313      	orrs	r3, r2
 81053a2:	d037      	beq.n	8105414 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81053aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81053ae:	d00e      	beq.n	81053ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 81053b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81053b4:	d816      	bhi.n	81053e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 81053b6:	2b00      	cmp	r3, #0
 81053b8:	d018      	beq.n	81053ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 81053ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81053be:	d111      	bne.n	81053e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81053c0:	4b8d      	ldr	r3, [pc, #564]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81053c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81053c4:	4a8c      	ldr	r2, [pc, #560]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81053c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81053ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81053cc:	e00f      	b.n	81053ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81053ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81053d2:	3308      	adds	r3, #8
 81053d4:	2101      	movs	r1, #1
 81053d6:	4618      	mov	r0, r3
 81053d8:	f001 f94c 	bl	8106674 <RCCEx_PLL2_Config>
 81053dc:	4603      	mov	r3, r0
 81053de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81053e2:	e004      	b.n	81053ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81053e4:	2301      	movs	r3, #1
 81053e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81053ea:	e000      	b.n	81053ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 81053ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 81053ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81053f2:	2b00      	cmp	r3, #0
 81053f4:	d10a      	bne.n	810540c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 81053f6:	4b80      	ldr	r3, [pc, #512]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81053f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81053fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 81053fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105404:	4a7c      	ldr	r2, [pc, #496]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105406:	430b      	orrs	r3, r1
 8105408:	6513      	str	r3, [r2, #80]	; 0x50
 810540a:	e003      	b.n	8105414 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810540c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105410:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8105414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105418:	e9d3 2300 	ldrd	r2, r3, [r3]
 810541c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8105420:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8105424:	2300      	movs	r3, #0
 8105426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 810542a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 810542e:	460b      	mov	r3, r1
 8105430:	4313      	orrs	r3, r2
 8105432:	d039      	beq.n	81054a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8105434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 810543a:	2b03      	cmp	r3, #3
 810543c:	d81c      	bhi.n	8105478 <HAL_RCCEx_PeriphCLKConfig+0x794>
 810543e:	a201      	add	r2, pc, #4	; (adr r2, 8105444 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8105440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105444:	08105481 	.word	0x08105481
 8105448:	08105455 	.word	0x08105455
 810544c:	08105463 	.word	0x08105463
 8105450:	08105481 	.word	0x08105481
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105454:	4b68      	ldr	r3, [pc, #416]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105458:	4a67      	ldr	r2, [pc, #412]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810545a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810545e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105460:	e00f      	b.n	8105482 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105462:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105466:	3308      	adds	r3, #8
 8105468:	2102      	movs	r1, #2
 810546a:	4618      	mov	r0, r3
 810546c:	f001 f902 	bl	8106674 <RCCEx_PLL2_Config>
 8105470:	4603      	mov	r3, r0
 8105472:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8105476:	e004      	b.n	8105482 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105478:	2301      	movs	r3, #1
 810547a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810547e:	e000      	b.n	8105482 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8105480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105486:	2b00      	cmp	r3, #0
 8105488:	d10a      	bne.n	81054a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810548a:	4b5b      	ldr	r3, [pc, #364]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810548e:	f023 0103 	bic.w	r1, r3, #3
 8105492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8105498:	4a57      	ldr	r2, [pc, #348]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810549a:	430b      	orrs	r3, r1
 810549c:	64d3      	str	r3, [r2, #76]	; 0x4c
 810549e:	e003      	b.n	81054a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81054a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81054a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81054a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81054ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 81054b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 81054b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 81054b8:	2300      	movs	r3, #0
 81054ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 81054be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 81054c2:	460b      	mov	r3, r1
 81054c4:	4313      	orrs	r3, r2
 81054c6:	f000 809f 	beq.w	8105608 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81054ca:	4b4c      	ldr	r3, [pc, #304]	; (81055fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81054cc:	681b      	ldr	r3, [r3, #0]
 81054ce:	4a4b      	ldr	r2, [pc, #300]	; (81055fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81054d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81054d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 81054d6:	f7fe f851 	bl	810357c <HAL_GetTick>
 81054da:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81054de:	e00b      	b.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 81054e0:	f7fe f84c 	bl	810357c <HAL_GetTick>
 81054e4:	4602      	mov	r2, r0
 81054e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 81054ea:	1ad3      	subs	r3, r2, r3
 81054ec:	2b64      	cmp	r3, #100	; 0x64
 81054ee:	d903      	bls.n	81054f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 81054f0:	2303      	movs	r3, #3
 81054f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81054f6:	e005      	b.n	8105504 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 81054f8:	4b40      	ldr	r3, [pc, #256]	; (81055fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 81054fa:	681b      	ldr	r3, [r3, #0]
 81054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105500:	2b00      	cmp	r3, #0
 8105502:	d0ed      	beq.n	81054e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8105504:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105508:	2b00      	cmp	r3, #0
 810550a:	d179      	bne.n	8105600 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810550c:	4b3a      	ldr	r3, [pc, #232]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810550e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8105510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105514:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105518:	4053      	eors	r3, r2
 810551a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810551e:	2b00      	cmp	r3, #0
 8105520:	d015      	beq.n	810554e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8105522:	4b35      	ldr	r3, [pc, #212]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810552a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810552e:	4b32      	ldr	r3, [pc, #200]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105532:	4a31      	ldr	r2, [pc, #196]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8105538:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810553a:	4b2f      	ldr	r3, [pc, #188]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810553c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810553e:	4a2e      	ldr	r2, [pc, #184]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8105544:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8105546:	4a2c      	ldr	r2, [pc, #176]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105548:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 810554c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 810554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105552:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8105556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810555a:	d118      	bne.n	810558e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 810555c:	f7fe f80e 	bl	810357c <HAL_GetTick>
 8105560:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105564:	e00d      	b.n	8105582 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8105566:	f7fe f809 	bl	810357c <HAL_GetTick>
 810556a:	4602      	mov	r2, r0
 810556c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8105570:	1ad2      	subs	r2, r2, r3
 8105572:	f241 3388 	movw	r3, #5000	; 0x1388
 8105576:	429a      	cmp	r2, r3
 8105578:	d903      	bls.n	8105582 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810557a:	2303      	movs	r3, #3
 810557c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8105580:	e005      	b.n	810558e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8105582:	4b1d      	ldr	r3, [pc, #116]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8105584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8105586:	f003 0302 	and.w	r3, r3, #2
 810558a:	2b00      	cmp	r3, #0
 810558c:	d0eb      	beq.n	8105566 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810558e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105592:	2b00      	cmp	r3, #0
 8105594:	d12b      	bne.n	81055ee <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8105596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810559a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810559e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81055a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81055a6:	d110      	bne.n	81055ca <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81055a8:	4b13      	ldr	r3, [pc, #76]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055aa:	691b      	ldr	r3, [r3, #16]
 81055ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 81055b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81055b8:	091b      	lsrs	r3, r3, #4
 81055ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81055be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81055c2:	4a0d      	ldr	r2, [pc, #52]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055c4:	430b      	orrs	r3, r1
 81055c6:	6113      	str	r3, [r2, #16]
 81055c8:	e005      	b.n	81055d6 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81055ca:	4b0b      	ldr	r3, [pc, #44]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055cc:	691b      	ldr	r3, [r3, #16]
 81055ce:	4a0a      	ldr	r2, [pc, #40]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81055d4:	6113      	str	r3, [r2, #16]
 81055d6:	4b08      	ldr	r3, [pc, #32]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055d8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 81055da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81055de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81055e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81055e6:	4a04      	ldr	r2, [pc, #16]	; (81055f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81055e8:	430b      	orrs	r3, r1
 81055ea:	6713      	str	r3, [r2, #112]	; 0x70
 81055ec:	e00c      	b.n	8105608 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 81055ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81055f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 81055f6:	e007      	b.n	8105608 <HAL_RCCEx_PeriphCLKConfig+0x924>
 81055f8:	58024400 	.word	0x58024400
 81055fc:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105600:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105604:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8105608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105610:	f002 0301 	and.w	r3, r2, #1
 8105614:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8105618:	2300      	movs	r3, #0
 810561a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 810561e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8105622:	460b      	mov	r3, r1
 8105624:	4313      	orrs	r3, r2
 8105626:	f000 8089 	beq.w	810573c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810562a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810562e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8105630:	2b28      	cmp	r3, #40	; 0x28
 8105632:	d86b      	bhi.n	810570c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8105634:	a201      	add	r2, pc, #4	; (adr r2, 810563c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8105636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810563a:	bf00      	nop
 810563c:	08105715 	.word	0x08105715
 8105640:	0810570d 	.word	0x0810570d
 8105644:	0810570d 	.word	0x0810570d
 8105648:	0810570d 	.word	0x0810570d
 810564c:	0810570d 	.word	0x0810570d
 8105650:	0810570d 	.word	0x0810570d
 8105654:	0810570d 	.word	0x0810570d
 8105658:	0810570d 	.word	0x0810570d
 810565c:	081056e1 	.word	0x081056e1
 8105660:	0810570d 	.word	0x0810570d
 8105664:	0810570d 	.word	0x0810570d
 8105668:	0810570d 	.word	0x0810570d
 810566c:	0810570d 	.word	0x0810570d
 8105670:	0810570d 	.word	0x0810570d
 8105674:	0810570d 	.word	0x0810570d
 8105678:	0810570d 	.word	0x0810570d
 810567c:	081056f7 	.word	0x081056f7
 8105680:	0810570d 	.word	0x0810570d
 8105684:	0810570d 	.word	0x0810570d
 8105688:	0810570d 	.word	0x0810570d
 810568c:	0810570d 	.word	0x0810570d
 8105690:	0810570d 	.word	0x0810570d
 8105694:	0810570d 	.word	0x0810570d
 8105698:	0810570d 	.word	0x0810570d
 810569c:	08105715 	.word	0x08105715
 81056a0:	0810570d 	.word	0x0810570d
 81056a4:	0810570d 	.word	0x0810570d
 81056a8:	0810570d 	.word	0x0810570d
 81056ac:	0810570d 	.word	0x0810570d
 81056b0:	0810570d 	.word	0x0810570d
 81056b4:	0810570d 	.word	0x0810570d
 81056b8:	0810570d 	.word	0x0810570d
 81056bc:	08105715 	.word	0x08105715
 81056c0:	0810570d 	.word	0x0810570d
 81056c4:	0810570d 	.word	0x0810570d
 81056c8:	0810570d 	.word	0x0810570d
 81056cc:	0810570d 	.word	0x0810570d
 81056d0:	0810570d 	.word	0x0810570d
 81056d4:	0810570d 	.word	0x0810570d
 81056d8:	0810570d 	.word	0x0810570d
 81056dc:	08105715 	.word	0x08105715
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81056e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056e4:	3308      	adds	r3, #8
 81056e6:	2101      	movs	r1, #1
 81056e8:	4618      	mov	r0, r3
 81056ea:	f000 ffc3 	bl	8106674 <RCCEx_PLL2_Config>
 81056ee:	4603      	mov	r3, r0
 81056f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 81056f4:	e00f      	b.n	8105716 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81056fa:	3328      	adds	r3, #40	; 0x28
 81056fc:	2101      	movs	r1, #1
 81056fe:	4618      	mov	r0, r3
 8105700:	f001 f86a 	bl	81067d8 <RCCEx_PLL3_Config>
 8105704:	4603      	mov	r3, r0
 8105706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810570a:	e004      	b.n	8105716 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810570c:	2301      	movs	r3, #1
 810570e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105712:	e000      	b.n	8105716 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8105714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810571a:	2b00      	cmp	r3, #0
 810571c:	d10a      	bne.n	8105734 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810571e:	4bbf      	ldr	r3, [pc, #764]	; (8105a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105722:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8105726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810572a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810572c:	4abb      	ldr	r2, [pc, #748]	; (8105a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810572e:	430b      	orrs	r3, r1
 8105730:	6553      	str	r3, [r2, #84]	; 0x54
 8105732:	e003      	b.n	810573c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105738:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105744:	f002 0302 	and.w	r3, r2, #2
 8105748:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 810574c:	2300      	movs	r3, #0
 810574e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8105752:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8105756:	460b      	mov	r3, r1
 8105758:	4313      	orrs	r3, r2
 810575a:	d041      	beq.n	81057e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 810575c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8105762:	2b05      	cmp	r3, #5
 8105764:	d824      	bhi.n	81057b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8105766:	a201      	add	r2, pc, #4	; (adr r2, 810576c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8105768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810576c:	081057b9 	.word	0x081057b9
 8105770:	08105785 	.word	0x08105785
 8105774:	0810579b 	.word	0x0810579b
 8105778:	081057b9 	.word	0x081057b9
 810577c:	081057b9 	.word	0x081057b9
 8105780:	081057b9 	.word	0x081057b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105788:	3308      	adds	r3, #8
 810578a:	2101      	movs	r1, #1
 810578c:	4618      	mov	r0, r3
 810578e:	f000 ff71 	bl	8106674 <RCCEx_PLL2_Config>
 8105792:	4603      	mov	r3, r0
 8105794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8105798:	e00f      	b.n	81057ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810579a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810579e:	3328      	adds	r3, #40	; 0x28
 81057a0:	2101      	movs	r1, #1
 81057a2:	4618      	mov	r0, r3
 81057a4:	f001 f818 	bl	81067d8 <RCCEx_PLL3_Config>
 81057a8:	4603      	mov	r3, r0
 81057aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81057ae:	e004      	b.n	81057ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81057b0:	2301      	movs	r3, #1
 81057b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81057b6:	e000      	b.n	81057ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81057b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81057ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81057be:	2b00      	cmp	r3, #0
 81057c0:	d10a      	bne.n	81057d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81057c2:	4b96      	ldr	r3, [pc, #600]	; (8105a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81057c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81057c6:	f023 0107 	bic.w	r1, r3, #7
 81057ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81057d0:	4a92      	ldr	r2, [pc, #584]	; (8105a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81057d2:	430b      	orrs	r3, r1
 81057d4:	6553      	str	r3, [r2, #84]	; 0x54
 81057d6:	e003      	b.n	81057e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81057d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81057dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81057e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81057e8:	f002 0304 	and.w	r3, r2, #4
 81057ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 81057f0:	2300      	movs	r3, #0
 81057f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 81057f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 81057fa:	460b      	mov	r3, r1
 81057fc:	4313      	orrs	r3, r2
 81057fe:	d044      	beq.n	810588a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8105800:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8105808:	2b05      	cmp	r3, #5
 810580a:	d825      	bhi.n	8105858 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810580c:	a201      	add	r2, pc, #4	; (adr r2, 8105814 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810580e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105812:	bf00      	nop
 8105814:	08105861 	.word	0x08105861
 8105818:	0810582d 	.word	0x0810582d
 810581c:	08105843 	.word	0x08105843
 8105820:	08105861 	.word	0x08105861
 8105824:	08105861 	.word	0x08105861
 8105828:	08105861 	.word	0x08105861
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810582c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105830:	3308      	adds	r3, #8
 8105832:	2101      	movs	r1, #1
 8105834:	4618      	mov	r0, r3
 8105836:	f000 ff1d 	bl	8106674 <RCCEx_PLL2_Config>
 810583a:	4603      	mov	r3, r0
 810583c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105840:	e00f      	b.n	8105862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105846:	3328      	adds	r3, #40	; 0x28
 8105848:	2101      	movs	r1, #1
 810584a:	4618      	mov	r0, r3
 810584c:	f000 ffc4 	bl	81067d8 <RCCEx_PLL3_Config>
 8105850:	4603      	mov	r3, r0
 8105852:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8105856:	e004      	b.n	8105862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105858:	2301      	movs	r3, #1
 810585a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810585e:	e000      	b.n	8105862 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8105860:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105862:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105866:	2b00      	cmp	r3, #0
 8105868:	d10b      	bne.n	8105882 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810586a:	4b6c      	ldr	r3, [pc, #432]	; (8105a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810586c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810586e:	f023 0107 	bic.w	r1, r3, #7
 8105872:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810587a:	4a68      	ldr	r2, [pc, #416]	; (8105a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810587c:	430b      	orrs	r3, r1
 810587e:	6593      	str	r3, [r2, #88]	; 0x58
 8105880:	e003      	b.n	810588a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105886:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810588a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105892:	f002 0320 	and.w	r3, r2, #32
 8105896:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 810589a:	2300      	movs	r3, #0
 810589c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 81058a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 81058a4:	460b      	mov	r3, r1
 81058a6:	4313      	orrs	r3, r2
 81058a8:	d055      	beq.n	8105956 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81058aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81058b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81058b6:	d033      	beq.n	8105920 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81058b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81058bc:	d82c      	bhi.n	8105918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81058be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81058c2:	d02f      	beq.n	8105924 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81058c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81058c8:	d826      	bhi.n	8105918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81058ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81058ce:	d02b      	beq.n	8105928 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81058d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81058d4:	d820      	bhi.n	8105918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81058d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81058da:	d012      	beq.n	8105902 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 81058dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81058e0:	d81a      	bhi.n	8105918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81058e2:	2b00      	cmp	r3, #0
 81058e4:	d022      	beq.n	810592c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 81058e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81058ea:	d115      	bne.n	8105918 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81058ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81058f0:	3308      	adds	r3, #8
 81058f2:	2100      	movs	r1, #0
 81058f4:	4618      	mov	r0, r3
 81058f6:	f000 febd 	bl	8106674 <RCCEx_PLL2_Config>
 81058fa:	4603      	mov	r3, r0
 81058fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8105900:	e015      	b.n	810592e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105906:	3328      	adds	r3, #40	; 0x28
 8105908:	2102      	movs	r1, #2
 810590a:	4618      	mov	r0, r3
 810590c:	f000 ff64 	bl	81067d8 <RCCEx_PLL3_Config>
 8105910:	4603      	mov	r3, r0
 8105912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8105916:	e00a      	b.n	810592e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105918:	2301      	movs	r3, #1
 810591a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810591e:	e006      	b.n	810592e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105920:	bf00      	nop
 8105922:	e004      	b.n	810592e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105924:	bf00      	nop
 8105926:	e002      	b.n	810592e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8105928:	bf00      	nop
 810592a:	e000      	b.n	810592e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810592c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810592e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105932:	2b00      	cmp	r3, #0
 8105934:	d10b      	bne.n	810594e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8105936:	4b39      	ldr	r3, [pc, #228]	; (8105a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810593a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 810593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105946:	4a35      	ldr	r2, [pc, #212]	; (8105a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105948:	430b      	orrs	r3, r1
 810594a:	6553      	str	r3, [r2, #84]	; 0x54
 810594c:	e003      	b.n	8105956 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810594e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105952:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8105956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810595e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8105962:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8105966:	2300      	movs	r3, #0
 8105968:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 810596c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8105970:	460b      	mov	r3, r1
 8105972:	4313      	orrs	r3, r2
 8105974:	d058      	beq.n	8105a28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8105976:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810597a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810597e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105982:	d033      	beq.n	81059ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8105984:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8105988:	d82c      	bhi.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810598a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810598e:	d02f      	beq.n	81059f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8105990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105994:	d826      	bhi.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8105996:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 810599a:	d02b      	beq.n	81059f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 810599c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81059a0:	d820      	bhi.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81059a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81059a6:	d012      	beq.n	81059ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81059a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81059ac:	d81a      	bhi.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81059ae:	2b00      	cmp	r3, #0
 81059b0:	d022      	beq.n	81059f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81059b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81059b6:	d115      	bne.n	81059e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81059b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059bc:	3308      	adds	r3, #8
 81059be:	2100      	movs	r1, #0
 81059c0:	4618      	mov	r0, r3
 81059c2:	f000 fe57 	bl	8106674 <RCCEx_PLL2_Config>
 81059c6:	4603      	mov	r3, r0
 81059c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81059cc:	e015      	b.n	81059fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81059ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81059d2:	3328      	adds	r3, #40	; 0x28
 81059d4:	2102      	movs	r1, #2
 81059d6:	4618      	mov	r0, r3
 81059d8:	f000 fefe 	bl	81067d8 <RCCEx_PLL3_Config>
 81059dc:	4603      	mov	r3, r0
 81059de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81059e2:	e00a      	b.n	81059fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81059e4:	2301      	movs	r3, #1
 81059e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81059ea:	e006      	b.n	81059fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81059ec:	bf00      	nop
 81059ee:	e004      	b.n	81059fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81059f0:	bf00      	nop
 81059f2:	e002      	b.n	81059fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81059f4:	bf00      	nop
 81059f6:	e000      	b.n	81059fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 81059f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81059fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81059fe:	2b00      	cmp	r3, #0
 8105a00:	d10e      	bne.n	8105a20 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8105a02:	4b06      	ldr	r3, [pc, #24]	; (8105a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a06:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8105a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8105a12:	4a02      	ldr	r2, [pc, #8]	; (8105a1c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8105a14:	430b      	orrs	r3, r1
 8105a16:	6593      	str	r3, [r2, #88]	; 0x58
 8105a18:	e006      	b.n	8105a28 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8105a1a:	bf00      	nop
 8105a1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105a24:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8105a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a30:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8105a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8105a38:	2300      	movs	r3, #0
 8105a3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8105a3e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8105a42:	460b      	mov	r3, r1
 8105a44:	4313      	orrs	r3, r2
 8105a46:	d055      	beq.n	8105af4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8105a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105a50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105a54:	d033      	beq.n	8105abe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8105a56:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8105a5a:	d82c      	bhi.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105a60:	d02f      	beq.n	8105ac2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8105a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105a66:	d826      	bhi.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105a68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105a6c:	d02b      	beq.n	8105ac6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8105a6e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8105a72:	d820      	bhi.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105a74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105a78:	d012      	beq.n	8105aa0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8105a7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105a7e:	d81a      	bhi.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8105a80:	2b00      	cmp	r3, #0
 8105a82:	d022      	beq.n	8105aca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8105a84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105a88:	d115      	bne.n	8105ab6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105a8e:	3308      	adds	r3, #8
 8105a90:	2100      	movs	r1, #0
 8105a92:	4618      	mov	r0, r3
 8105a94:	f000 fdee 	bl	8106674 <RCCEx_PLL2_Config>
 8105a98:	4603      	mov	r3, r0
 8105a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105a9e:	e015      	b.n	8105acc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105aa4:	3328      	adds	r3, #40	; 0x28
 8105aa6:	2102      	movs	r1, #2
 8105aa8:	4618      	mov	r0, r3
 8105aaa:	f000 fe95 	bl	81067d8 <RCCEx_PLL3_Config>
 8105aae:	4603      	mov	r3, r0
 8105ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8105ab4:	e00a      	b.n	8105acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105ab6:	2301      	movs	r3, #1
 8105ab8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105abc:	e006      	b.n	8105acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105abe:	bf00      	nop
 8105ac0:	e004      	b.n	8105acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105ac2:	bf00      	nop
 8105ac4:	e002      	b.n	8105acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105ac6:	bf00      	nop
 8105ac8:	e000      	b.n	8105acc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8105aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105ad0:	2b00      	cmp	r3, #0
 8105ad2:	d10b      	bne.n	8105aec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8105ad4:	4ba1      	ldr	r3, [pc, #644]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105ad8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8105adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ae0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8105ae4:	4a9d      	ldr	r2, [pc, #628]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105ae6:	430b      	orrs	r3, r1
 8105ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8105aea:	e003      	b.n	8105af4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105aec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105af0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8105af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105afc:	f002 0308 	and.w	r3, r2, #8
 8105b00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8105b04:	2300      	movs	r3, #0
 8105b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8105b0a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8105b0e:	460b      	mov	r3, r1
 8105b10:	4313      	orrs	r3, r2
 8105b12:	d01e      	beq.n	8105b52 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8105b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105b20:	d10c      	bne.n	8105b3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b26:	3328      	adds	r3, #40	; 0x28
 8105b28:	2102      	movs	r1, #2
 8105b2a:	4618      	mov	r0, r3
 8105b2c:	f000 fe54 	bl	81067d8 <RCCEx_PLL3_Config>
 8105b30:	4603      	mov	r3, r0
 8105b32:	2b00      	cmp	r3, #0
 8105b34:	d002      	beq.n	8105b3c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8105b36:	2301      	movs	r3, #1
 8105b38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8105b3c:	4b87      	ldr	r3, [pc, #540]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105b40:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8105b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8105b4c:	4a83      	ldr	r2, [pc, #524]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105b4e:	430b      	orrs	r3, r1
 8105b50:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8105b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b5a:	f002 0310 	and.w	r3, r2, #16
 8105b5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8105b62:	2300      	movs	r3, #0
 8105b64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8105b68:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8105b6c:	460b      	mov	r3, r1
 8105b6e:	4313      	orrs	r3, r2
 8105b70:	d01e      	beq.n	8105bb0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8105b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105b7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105b7e:	d10c      	bne.n	8105b9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105b84:	3328      	adds	r3, #40	; 0x28
 8105b86:	2102      	movs	r1, #2
 8105b88:	4618      	mov	r0, r3
 8105b8a:	f000 fe25 	bl	81067d8 <RCCEx_PLL3_Config>
 8105b8e:	4603      	mov	r3, r0
 8105b90:	2b00      	cmp	r3, #0
 8105b92:	d002      	beq.n	8105b9a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8105b94:	2301      	movs	r3, #1
 8105b96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8105b9a:	4b70      	ldr	r3, [pc, #448]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8105ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8105baa:	4a6c      	ldr	r2, [pc, #432]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105bac:	430b      	orrs	r3, r1
 8105bae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8105bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bb8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8105bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8105bc0:	2300      	movs	r3, #0
 8105bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8105bc6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8105bca:	460b      	mov	r3, r1
 8105bcc:	4313      	orrs	r3, r2
 8105bce:	d03e      	beq.n	8105c4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8105bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105bd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105bdc:	d022      	beq.n	8105c24 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8105bde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105be2:	d81b      	bhi.n	8105c1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8105be4:	2b00      	cmp	r3, #0
 8105be6:	d003      	beq.n	8105bf0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8105be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105bec:	d00b      	beq.n	8105c06 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8105bee:	e015      	b.n	8105c1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105bf4:	3308      	adds	r3, #8
 8105bf6:	2100      	movs	r1, #0
 8105bf8:	4618      	mov	r0, r3
 8105bfa:	f000 fd3b 	bl	8106674 <RCCEx_PLL2_Config>
 8105bfe:	4603      	mov	r3, r0
 8105c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105c04:	e00f      	b.n	8105c26 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c0a:	3328      	adds	r3, #40	; 0x28
 8105c0c:	2102      	movs	r1, #2
 8105c0e:	4618      	mov	r0, r3
 8105c10:	f000 fde2 	bl	81067d8 <RCCEx_PLL3_Config>
 8105c14:	4603      	mov	r3, r0
 8105c16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8105c1a:	e004      	b.n	8105c26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105c1c:	2301      	movs	r3, #1
 8105c1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105c22:	e000      	b.n	8105c26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8105c24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105c26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c2a:	2b00      	cmp	r3, #0
 8105c2c:	d10b      	bne.n	8105c46 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8105c2e:	4b4b      	ldr	r3, [pc, #300]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105c32:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8105c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8105c3e:	4a47      	ldr	r2, [pc, #284]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105c40:	430b      	orrs	r3, r1
 8105c42:	6593      	str	r3, [r2, #88]	; 0x58
 8105c44:	e003      	b.n	8105c4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105c4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8105c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105c56:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8105c5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8105c5c:	2300      	movs	r3, #0
 8105c5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8105c60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8105c64:	460b      	mov	r3, r1
 8105c66:	4313      	orrs	r3, r2
 8105c68:	d03b      	beq.n	8105ce2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8105c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105c72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105c76:	d01f      	beq.n	8105cb8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8105c78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8105c7c:	d818      	bhi.n	8105cb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8105c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105c82:	d003      	beq.n	8105c8c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8105c84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8105c88:	d007      	beq.n	8105c9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8105c8a:	e011      	b.n	8105cb0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c8c:	4b33      	ldr	r3, [pc, #204]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105c90:	4a32      	ldr	r2, [pc, #200]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8105c98:	e00f      	b.n	8105cba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105c9e:	3328      	adds	r3, #40	; 0x28
 8105ca0:	2101      	movs	r1, #1
 8105ca2:	4618      	mov	r0, r3
 8105ca4:	f000 fd98 	bl	81067d8 <RCCEx_PLL3_Config>
 8105ca8:	4603      	mov	r3, r0
 8105caa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8105cae:	e004      	b.n	8105cba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105cb0:	2301      	movs	r3, #1
 8105cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105cb6:	e000      	b.n	8105cba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8105cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105cbe:	2b00      	cmp	r3, #0
 8105cc0:	d10b      	bne.n	8105cda <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8105cc2:	4b26      	ldr	r3, [pc, #152]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105cc6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8105cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105cd2:	4a22      	ldr	r2, [pc, #136]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105cd4:	430b      	orrs	r3, r1
 8105cd6:	6553      	str	r3, [r2, #84]	; 0x54
 8105cd8:	e003      	b.n	8105ce2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105cde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8105ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105cea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8105cee:	673b      	str	r3, [r7, #112]	; 0x70
 8105cf0:	2300      	movs	r3, #0
 8105cf2:	677b      	str	r3, [r7, #116]	; 0x74
 8105cf4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8105cf8:	460b      	mov	r3, r1
 8105cfa:	4313      	orrs	r3, r2
 8105cfc:	d034      	beq.n	8105d68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8105cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105d04:	2b00      	cmp	r3, #0
 8105d06:	d003      	beq.n	8105d10 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8105d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105d0c:	d007      	beq.n	8105d1e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8105d0e:	e011      	b.n	8105d34 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105d10:	4b12      	ldr	r3, [pc, #72]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105d14:	4a11      	ldr	r2, [pc, #68]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105d1c:	e00e      	b.n	8105d3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d22:	3308      	adds	r3, #8
 8105d24:	2102      	movs	r1, #2
 8105d26:	4618      	mov	r0, r3
 8105d28:	f000 fca4 	bl	8106674 <RCCEx_PLL2_Config>
 8105d2c:	4603      	mov	r3, r0
 8105d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8105d32:	e003      	b.n	8105d3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8105d34:	2301      	movs	r3, #1
 8105d36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105d3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105d40:	2b00      	cmp	r3, #0
 8105d42:	d10d      	bne.n	8105d60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8105d44:	4b05      	ldr	r3, [pc, #20]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105d48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8105d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105d52:	4a02      	ldr	r2, [pc, #8]	; (8105d5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8105d54:	430b      	orrs	r3, r1
 8105d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8105d58:	e006      	b.n	8105d68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8105d5a:	bf00      	nop
 8105d5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105d64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8105d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d70:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8105d74:	66bb      	str	r3, [r7, #104]	; 0x68
 8105d76:	2300      	movs	r3, #0
 8105d78:	66fb      	str	r3, [r7, #108]	; 0x6c
 8105d7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8105d7e:	460b      	mov	r3, r1
 8105d80:	4313      	orrs	r3, r2
 8105d82:	d00c      	beq.n	8105d9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8105d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105d88:	3328      	adds	r3, #40	; 0x28
 8105d8a:	2102      	movs	r1, #2
 8105d8c:	4618      	mov	r0, r3
 8105d8e:	f000 fd23 	bl	81067d8 <RCCEx_PLL3_Config>
 8105d92:	4603      	mov	r3, r0
 8105d94:	2b00      	cmp	r3, #0
 8105d96:	d002      	beq.n	8105d9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8105d98:	2301      	movs	r3, #1
 8105d9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8105d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105da6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8105daa:	663b      	str	r3, [r7, #96]	; 0x60
 8105dac:	2300      	movs	r3, #0
 8105dae:	667b      	str	r3, [r7, #100]	; 0x64
 8105db0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8105db4:	460b      	mov	r3, r1
 8105db6:	4313      	orrs	r3, r2
 8105db8:	d038      	beq.n	8105e2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8105dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105dc6:	d018      	beq.n	8105dfa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8105dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105dcc:	d811      	bhi.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8105dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105dd2:	d014      	beq.n	8105dfe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8105dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8105dd8:	d80b      	bhi.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8105dda:	2b00      	cmp	r3, #0
 8105ddc:	d011      	beq.n	8105e02 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8105dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105de2:	d106      	bne.n	8105df2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105de4:	4bc3      	ldr	r3, [pc, #780]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105de8:	4ac2      	ldr	r2, [pc, #776]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8105dee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8105df0:	e008      	b.n	8105e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105df2:	2301      	movs	r3, #1
 8105df4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8105df8:	e004      	b.n	8105e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105dfa:	bf00      	nop
 8105dfc:	e002      	b.n	8105e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105dfe:	bf00      	nop
 8105e00:	e000      	b.n	8105e04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8105e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105e04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e08:	2b00      	cmp	r3, #0
 8105e0a:	d10b      	bne.n	8105e24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8105e0c:	4bb9      	ldr	r3, [pc, #740]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105e10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8105e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8105e1c:	4ab5      	ldr	r2, [pc, #724]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e1e:	430b      	orrs	r3, r1
 8105e20:	6553      	str	r3, [r2, #84]	; 0x54
 8105e22:	e003      	b.n	8105e2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105e28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8105e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e34:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8105e38:	65bb      	str	r3, [r7, #88]	; 0x58
 8105e3a:	2300      	movs	r3, #0
 8105e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8105e3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8105e42:	460b      	mov	r3, r1
 8105e44:	4313      	orrs	r3, r2
 8105e46:	d009      	beq.n	8105e5c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8105e48:	4baa      	ldr	r3, [pc, #680]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105e4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8105e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8105e56:	4aa7      	ldr	r2, [pc, #668]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e58:	430b      	orrs	r3, r1
 8105e5a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8105e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e64:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8105e68:	653b      	str	r3, [r7, #80]	; 0x50
 8105e6a:	2300      	movs	r3, #0
 8105e6c:	657b      	str	r3, [r7, #84]	; 0x54
 8105e6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8105e72:	460b      	mov	r3, r1
 8105e74:	4313      	orrs	r3, r2
 8105e76:	d00a      	beq.n	8105e8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8105e78:	4b9e      	ldr	r3, [pc, #632]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e7a:	691b      	ldr	r3, [r3, #16]
 8105e7c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8105e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8105e88:	4a9a      	ldr	r2, [pc, #616]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105e8a:	430b      	orrs	r3, r1
 8105e8c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8105e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e96:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8105e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8105e9c:	2300      	movs	r3, #0
 8105e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8105ea0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8105ea4:	460b      	mov	r3, r1
 8105ea6:	4313      	orrs	r3, r2
 8105ea8:	d009      	beq.n	8105ebe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8105eaa:	4b92      	ldr	r3, [pc, #584]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8105eae:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8105eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105eb8:	4a8e      	ldr	r2, [pc, #568]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105eba:	430b      	orrs	r3, r1
 8105ebc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8105ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ec6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8105eca:	643b      	str	r3, [r7, #64]	; 0x40
 8105ecc:	2300      	movs	r3, #0
 8105ece:	647b      	str	r3, [r7, #68]	; 0x44
 8105ed0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8105ed4:	460b      	mov	r3, r1
 8105ed6:	4313      	orrs	r3, r2
 8105ed8:	d00e      	beq.n	8105ef8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8105eda:	4b86      	ldr	r3, [pc, #536]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105edc:	691b      	ldr	r3, [r3, #16]
 8105ede:	4a85      	ldr	r2, [pc, #532]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ee0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8105ee4:	6113      	str	r3, [r2, #16]
 8105ee6:	4b83      	ldr	r3, [pc, #524]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ee8:	6919      	ldr	r1, [r3, #16]
 8105eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105eee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8105ef2:	4a80      	ldr	r2, [pc, #512]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105ef4:	430b      	orrs	r3, r1
 8105ef6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8105ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f00:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8105f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8105f06:	2300      	movs	r3, #0
 8105f08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105f0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8105f0e:	460b      	mov	r3, r1
 8105f10:	4313      	orrs	r3, r2
 8105f12:	d009      	beq.n	8105f28 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8105f14:	4b77      	ldr	r3, [pc, #476]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105f18:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8105f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105f22:	4a74      	ldr	r2, [pc, #464]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105f24:	430b      	orrs	r3, r1
 8105f26:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8105f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f30:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8105f34:	633b      	str	r3, [r7, #48]	; 0x30
 8105f36:	2300      	movs	r3, #0
 8105f38:	637b      	str	r3, [r7, #52]	; 0x34
 8105f3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8105f3e:	460b      	mov	r3, r1
 8105f40:	4313      	orrs	r3, r2
 8105f42:	d00a      	beq.n	8105f5a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8105f44:	4b6b      	ldr	r3, [pc, #428]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105f48:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8105f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105f54:	4a67      	ldr	r2, [pc, #412]	; (81060f4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8105f56:	430b      	orrs	r3, r1
 8105f58:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8105f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f62:	2100      	movs	r1, #0
 8105f64:	62b9      	str	r1, [r7, #40]	; 0x28
 8105f66:	f003 0301 	and.w	r3, r3, #1
 8105f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8105f6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8105f70:	460b      	mov	r3, r1
 8105f72:	4313      	orrs	r3, r2
 8105f74:	d011      	beq.n	8105f9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f7a:	3308      	adds	r3, #8
 8105f7c:	2100      	movs	r1, #0
 8105f7e:	4618      	mov	r0, r3
 8105f80:	f000 fb78 	bl	8106674 <RCCEx_PLL2_Config>
 8105f84:	4603      	mov	r3, r0
 8105f86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f8e:	2b00      	cmp	r3, #0
 8105f90:	d003      	beq.n	8105f9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105f96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8105f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105fa2:	2100      	movs	r1, #0
 8105fa4:	6239      	str	r1, [r7, #32]
 8105fa6:	f003 0302 	and.w	r3, r3, #2
 8105faa:	627b      	str	r3, [r7, #36]	; 0x24
 8105fac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8105fb0:	460b      	mov	r3, r1
 8105fb2:	4313      	orrs	r3, r2
 8105fb4:	d011      	beq.n	8105fda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105fba:	3308      	adds	r3, #8
 8105fbc:	2101      	movs	r1, #1
 8105fbe:	4618      	mov	r0, r3
 8105fc0:	f000 fb58 	bl	8106674 <RCCEx_PLL2_Config>
 8105fc4:	4603      	mov	r3, r0
 8105fc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8105fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105fce:	2b00      	cmp	r3, #0
 8105fd0:	d003      	beq.n	8105fda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8105fd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8105fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105fe2:	2100      	movs	r1, #0
 8105fe4:	61b9      	str	r1, [r7, #24]
 8105fe6:	f003 0304 	and.w	r3, r3, #4
 8105fea:	61fb      	str	r3, [r7, #28]
 8105fec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8105ff0:	460b      	mov	r3, r1
 8105ff2:	4313      	orrs	r3, r2
 8105ff4:	d011      	beq.n	810601a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8105ffa:	3308      	adds	r3, #8
 8105ffc:	2102      	movs	r1, #2
 8105ffe:	4618      	mov	r0, r3
 8106000:	f000 fb38 	bl	8106674 <RCCEx_PLL2_Config>
 8106004:	4603      	mov	r3, r0
 8106006:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810600a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810600e:	2b00      	cmp	r3, #0
 8106010:	d003      	beq.n	810601a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106012:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106016:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810601e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106022:	2100      	movs	r1, #0
 8106024:	6139      	str	r1, [r7, #16]
 8106026:	f003 0308 	and.w	r3, r3, #8
 810602a:	617b      	str	r3, [r7, #20]
 810602c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106030:	460b      	mov	r3, r1
 8106032:	4313      	orrs	r3, r2
 8106034:	d011      	beq.n	810605a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106036:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810603a:	3328      	adds	r3, #40	; 0x28
 810603c:	2100      	movs	r1, #0
 810603e:	4618      	mov	r0, r3
 8106040:	f000 fbca 	bl	81067d8 <RCCEx_PLL3_Config>
 8106044:	4603      	mov	r3, r0
 8106046:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 810604a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810604e:	2b00      	cmp	r3, #0
 8106050:	d003      	beq.n	810605a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106052:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106056:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 810605a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810605e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106062:	2100      	movs	r1, #0
 8106064:	60b9      	str	r1, [r7, #8]
 8106066:	f003 0310 	and.w	r3, r3, #16
 810606a:	60fb      	str	r3, [r7, #12]
 810606c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106070:	460b      	mov	r3, r1
 8106072:	4313      	orrs	r3, r2
 8106074:	d011      	beq.n	810609a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810607a:	3328      	adds	r3, #40	; 0x28
 810607c:	2101      	movs	r1, #1
 810607e:	4618      	mov	r0, r3
 8106080:	f000 fbaa 	bl	81067d8 <RCCEx_PLL3_Config>
 8106084:	4603      	mov	r3, r0
 8106086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810608a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810608e:	2b00      	cmp	r3, #0
 8106090:	d003      	beq.n	810609a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106092:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8106096:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810609a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810609e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060a2:	2100      	movs	r1, #0
 81060a4:	6039      	str	r1, [r7, #0]
 81060a6:	f003 0320 	and.w	r3, r3, #32
 81060aa:	607b      	str	r3, [r7, #4]
 81060ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 81060b0:	460b      	mov	r3, r1
 81060b2:	4313      	orrs	r3, r2
 81060b4:	d011      	beq.n	81060da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81060b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81060ba:	3328      	adds	r3, #40	; 0x28
 81060bc:	2102      	movs	r1, #2
 81060be:	4618      	mov	r0, r3
 81060c0:	f000 fb8a 	bl	81067d8 <RCCEx_PLL3_Config>
 81060c4:	4603      	mov	r3, r0
 81060c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81060ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81060ce:	2b00      	cmp	r3, #0
 81060d0:	d003      	beq.n	81060da <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81060d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 81060da:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 81060de:	2b00      	cmp	r3, #0
 81060e0:	d101      	bne.n	81060e6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 81060e2:	2300      	movs	r3, #0
 81060e4:	e000      	b.n	81060e8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 81060e6:	2301      	movs	r3, #1
}
 81060e8:	4618      	mov	r0, r3
 81060ea:	f507 7794 	add.w	r7, r7, #296	; 0x128
 81060ee:	46bd      	mov	sp, r7
 81060f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 81060f4:	58024400 	.word	0x58024400

081060f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81060f8:	b580      	push	{r7, lr}
 81060fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81060fc:	f7fe fd94 	bl	8104c28 <HAL_RCC_GetHCLKFreq>
 8106100:	4602      	mov	r2, r0
 8106102:	4b06      	ldr	r3, [pc, #24]	; (810611c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8106104:	6a1b      	ldr	r3, [r3, #32]
 8106106:	091b      	lsrs	r3, r3, #4
 8106108:	f003 0307 	and.w	r3, r3, #7
 810610c:	4904      	ldr	r1, [pc, #16]	; (8106120 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810610e:	5ccb      	ldrb	r3, [r1, r3]
 8106110:	f003 031f 	and.w	r3, r3, #31
 8106114:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8106118:	4618      	mov	r0, r3
 810611a:	bd80      	pop	{r7, pc}
 810611c:	58024400 	.word	0x58024400
 8106120:	0810e838 	.word	0x0810e838

08106124 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8106124:	b480      	push	{r7}
 8106126:	b089      	sub	sp, #36	; 0x24
 8106128:	af00      	add	r7, sp, #0
 810612a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810612c:	4ba1      	ldr	r3, [pc, #644]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810612e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106130:	f003 0303 	and.w	r3, r3, #3
 8106134:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8106136:	4b9f      	ldr	r3, [pc, #636]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810613a:	0b1b      	lsrs	r3, r3, #12
 810613c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8106140:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8106142:	4b9c      	ldr	r3, [pc, #624]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106146:	091b      	lsrs	r3, r3, #4
 8106148:	f003 0301 	and.w	r3, r3, #1
 810614c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810614e:	4b99      	ldr	r3, [pc, #612]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106152:	08db      	lsrs	r3, r3, #3
 8106154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106158:	693a      	ldr	r2, [r7, #16]
 810615a:	fb02 f303 	mul.w	r3, r2, r3
 810615e:	ee07 3a90 	vmov	s15, r3
 8106162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106166:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810616a:	697b      	ldr	r3, [r7, #20]
 810616c:	2b00      	cmp	r3, #0
 810616e:	f000 8111 	beq.w	8106394 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8106172:	69bb      	ldr	r3, [r7, #24]
 8106174:	2b02      	cmp	r3, #2
 8106176:	f000 8083 	beq.w	8106280 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810617a:	69bb      	ldr	r3, [r7, #24]
 810617c:	2b02      	cmp	r3, #2
 810617e:	f200 80a1 	bhi.w	81062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8106182:	69bb      	ldr	r3, [r7, #24]
 8106184:	2b00      	cmp	r3, #0
 8106186:	d003      	beq.n	8106190 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8106188:	69bb      	ldr	r3, [r7, #24]
 810618a:	2b01      	cmp	r3, #1
 810618c:	d056      	beq.n	810623c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810618e:	e099      	b.n	81062c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106190:	4b88      	ldr	r3, [pc, #544]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106192:	681b      	ldr	r3, [r3, #0]
 8106194:	f003 0320 	and.w	r3, r3, #32
 8106198:	2b00      	cmp	r3, #0
 810619a:	d02d      	beq.n	81061f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810619c:	4b85      	ldr	r3, [pc, #532]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	08db      	lsrs	r3, r3, #3
 81061a2:	f003 0303 	and.w	r3, r3, #3
 81061a6:	4a84      	ldr	r2, [pc, #528]	; (81063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81061a8:	fa22 f303 	lsr.w	r3, r2, r3
 81061ac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81061ae:	68bb      	ldr	r3, [r7, #8]
 81061b0:	ee07 3a90 	vmov	s15, r3
 81061b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061b8:	697b      	ldr	r3, [r7, #20]
 81061ba:	ee07 3a90 	vmov	s15, r3
 81061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81061c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81061c6:	4b7b      	ldr	r3, [pc, #492]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81061ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81061ce:	ee07 3a90 	vmov	s15, r3
 81061d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81061d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81061da:	eddf 5a78 	vldr	s11, [pc, #480]	; 81063bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81061de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81061e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81061e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81061ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81061ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81061f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81061f6:	e087      	b.n	8106308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81061f8:	697b      	ldr	r3, [r7, #20]
 81061fa:	ee07 3a90 	vmov	s15, r3
 81061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106202:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8106206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810620a:	4b6a      	ldr	r3, [pc, #424]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810620c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810620e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106212:	ee07 3a90 	vmov	s15, r3
 8106216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810621a:	ed97 6a03 	vldr	s12, [r7, #12]
 810621e:	eddf 5a67 	vldr	s11, [pc, #412]	; 81063bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810622a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810622e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810623a:	e065      	b.n	8106308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810623c:	697b      	ldr	r3, [r7, #20]
 810623e:	ee07 3a90 	vmov	s15, r3
 8106242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106246:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81063c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810624a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810624e:	4b59      	ldr	r3, [pc, #356]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106256:	ee07 3a90 	vmov	s15, r3
 810625a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810625e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106262:	eddf 5a56 	vldr	s11, [pc, #344]	; 81063bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8106266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810626a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810626e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106276:	ee67 7a27 	vmul.f32	s15, s14, s15
 810627a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810627e:	e043      	b.n	8106308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8106280:	697b      	ldr	r3, [r7, #20]
 8106282:	ee07 3a90 	vmov	s15, r3
 8106286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810628a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81063c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810628e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8106292:	4b48      	ldr	r3, [pc, #288]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810629a:	ee07 3a90 	vmov	s15, r3
 810629e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062a2:	ed97 6a03 	vldr	s12, [r7, #12]
 81062a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 81063bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81062aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81062ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81062b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 81062be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81062c2:	e021      	b.n	8106308 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81062c4:	697b      	ldr	r3, [r7, #20]
 81062c6:	ee07 3a90 	vmov	s15, r3
 81062ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81062ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81063c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81062d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81062d6:	4b37      	ldr	r3, [pc, #220]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81062da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81062de:	ee07 3a90 	vmov	s15, r3
 81062e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81062e6:	ed97 6a03 	vldr	s12, [r7, #12]
 81062ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 81063bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81062ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81062f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81062f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81062fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81062fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106302:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106306:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8106308:	4b2a      	ldr	r3, [pc, #168]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810630a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810630c:	0a5b      	lsrs	r3, r3, #9
 810630e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106312:	ee07 3a90 	vmov	s15, r3
 8106316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810631a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810631e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106322:	edd7 6a07 	vldr	s13, [r7, #28]
 8106326:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810632a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810632e:	ee17 2a90 	vmov	r2, s15
 8106332:	687b      	ldr	r3, [r7, #4]
 8106334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8106336:	4b1f      	ldr	r3, [pc, #124]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810633a:	0c1b      	lsrs	r3, r3, #16
 810633c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106340:	ee07 3a90 	vmov	s15, r3
 8106344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106348:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810634c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106350:	edd7 6a07 	vldr	s13, [r7, #28]
 8106354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810635c:	ee17 2a90 	vmov	r2, s15
 8106360:	687b      	ldr	r3, [r7, #4]
 8106362:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8106364:	4b13      	ldr	r3, [pc, #76]	; (81063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8106366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8106368:	0e1b      	lsrs	r3, r3, #24
 810636a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810636e:	ee07 3a90 	vmov	s15, r3
 8106372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810637a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810637e:	edd7 6a07 	vldr	s13, [r7, #28]
 8106382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810638a:	ee17 2a90 	vmov	r2, s15
 810638e:	687b      	ldr	r3, [r7, #4]
 8106390:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8106392:	e008      	b.n	81063a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8106394:	687b      	ldr	r3, [r7, #4]
 8106396:	2200      	movs	r2, #0
 8106398:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810639a:	687b      	ldr	r3, [r7, #4]
 810639c:	2200      	movs	r2, #0
 810639e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81063a0:	687b      	ldr	r3, [r7, #4]
 81063a2:	2200      	movs	r2, #0
 81063a4:	609a      	str	r2, [r3, #8]
}
 81063a6:	bf00      	nop
 81063a8:	3724      	adds	r7, #36	; 0x24
 81063aa:	46bd      	mov	sp, r7
 81063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063b0:	4770      	bx	lr
 81063b2:	bf00      	nop
 81063b4:	58024400 	.word	0x58024400
 81063b8:	03d09000 	.word	0x03d09000
 81063bc:	46000000 	.word	0x46000000
 81063c0:	4c742400 	.word	0x4c742400
 81063c4:	4a742400 	.word	0x4a742400
 81063c8:	4bbebc20 	.word	0x4bbebc20

081063cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 81063cc:	b480      	push	{r7}
 81063ce:	b089      	sub	sp, #36	; 0x24
 81063d0:	af00      	add	r7, sp, #0
 81063d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81063d4:	4ba1      	ldr	r3, [pc, #644]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81063d8:	f003 0303 	and.w	r3, r3, #3
 81063dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 81063de:	4b9f      	ldr	r3, [pc, #636]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81063e2:	0d1b      	lsrs	r3, r3, #20
 81063e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81063e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81063ea:	4b9c      	ldr	r3, [pc, #624]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81063ee:	0a1b      	lsrs	r3, r3, #8
 81063f0:	f003 0301 	and.w	r3, r3, #1
 81063f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 81063f6:	4b99      	ldr	r3, [pc, #612]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81063f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81063fa:	08db      	lsrs	r3, r3, #3
 81063fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8106400:	693a      	ldr	r2, [r7, #16]
 8106402:	fb02 f303 	mul.w	r3, r2, r3
 8106406:	ee07 3a90 	vmov	s15, r3
 810640a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810640e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8106412:	697b      	ldr	r3, [r7, #20]
 8106414:	2b00      	cmp	r3, #0
 8106416:	f000 8111 	beq.w	810663c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810641a:	69bb      	ldr	r3, [r7, #24]
 810641c:	2b02      	cmp	r3, #2
 810641e:	f000 8083 	beq.w	8106528 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8106422:	69bb      	ldr	r3, [r7, #24]
 8106424:	2b02      	cmp	r3, #2
 8106426:	f200 80a1 	bhi.w	810656c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810642a:	69bb      	ldr	r3, [r7, #24]
 810642c:	2b00      	cmp	r3, #0
 810642e:	d003      	beq.n	8106438 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8106430:	69bb      	ldr	r3, [r7, #24]
 8106432:	2b01      	cmp	r3, #1
 8106434:	d056      	beq.n	81064e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8106436:	e099      	b.n	810656c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8106438:	4b88      	ldr	r3, [pc, #544]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810643a:	681b      	ldr	r3, [r3, #0]
 810643c:	f003 0320 	and.w	r3, r3, #32
 8106440:	2b00      	cmp	r3, #0
 8106442:	d02d      	beq.n	81064a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106444:	4b85      	ldr	r3, [pc, #532]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106446:	681b      	ldr	r3, [r3, #0]
 8106448:	08db      	lsrs	r3, r3, #3
 810644a:	f003 0303 	and.w	r3, r3, #3
 810644e:	4a84      	ldr	r2, [pc, #528]	; (8106660 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8106450:	fa22 f303 	lsr.w	r3, r2, r3
 8106454:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106456:	68bb      	ldr	r3, [r7, #8]
 8106458:	ee07 3a90 	vmov	s15, r3
 810645c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106460:	697b      	ldr	r3, [r7, #20]
 8106462:	ee07 3a90 	vmov	s15, r3
 8106466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810646a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810646e:	4b7b      	ldr	r3, [pc, #492]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106476:	ee07 3a90 	vmov	s15, r3
 810647a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810647e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106482:	eddf 5a78 	vldr	s11, [pc, #480]	; 8106664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810648a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810648e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8106492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106496:	ee67 7a27 	vmul.f32	s15, s14, s15
 810649a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810649e:	e087      	b.n	81065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81064a0:	697b      	ldr	r3, [r7, #20]
 81064a2:	ee07 3a90 	vmov	s15, r3
 81064a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8106668 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81064ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064b2:	4b6a      	ldr	r3, [pc, #424]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81064b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064ba:	ee07 3a90 	vmov	s15, r3
 81064be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81064c2:	ed97 6a03 	vldr	s12, [r7, #12]
 81064c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8106664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81064ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81064ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81064d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81064d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81064da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81064de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81064e2:	e065      	b.n	81065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81064e4:	697b      	ldr	r3, [r7, #20]
 81064e6:	ee07 3a90 	vmov	s15, r3
 81064ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81064ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 810666c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81064f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81064f6:	4b59      	ldr	r3, [pc, #356]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81064fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81064fe:	ee07 3a90 	vmov	s15, r3
 8106502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8106506:	ed97 6a03 	vldr	s12, [r7, #12]
 810650a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8106664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810650e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8106516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810651a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810651e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106522:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8106526:	e043      	b.n	81065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8106528:	697b      	ldr	r3, [r7, #20]
 810652a:	ee07 3a90 	vmov	s15, r3
 810652e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106532:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8106670 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8106536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810653a:	4b48      	ldr	r3, [pc, #288]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810653c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810653e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106542:	ee07 3a90 	vmov	s15, r3
 8106546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810654a:	ed97 6a03 	vldr	s12, [r7, #12]
 810654e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8106664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8106556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810655a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810655e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8106562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8106566:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810656a:	e021      	b.n	81065b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 810656c:	697b      	ldr	r3, [r7, #20]
 810656e:	ee07 3a90 	vmov	s15, r3
 8106572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8106576:	eddf 6a3d 	vldr	s13, [pc, #244]	; 810666c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810657a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810657e:	4b37      	ldr	r3, [pc, #220]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8106580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8106586:	ee07 3a90 	vmov	s15, r3
 810658a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810658e:	ed97 6a03 	vldr	s12, [r7, #12]
 8106592:	eddf 5a34 	vldr	s11, [pc, #208]	; 8106664 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8106596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810659a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810659e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81065a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81065a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81065aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81065ae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81065b0:	4b2a      	ldr	r3, [pc, #168]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81065b4:	0a5b      	lsrs	r3, r3, #9
 81065b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81065ba:	ee07 3a90 	vmov	s15, r3
 81065be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81065c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81065ca:	edd7 6a07 	vldr	s13, [r7, #28]
 81065ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81065d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81065d6:	ee17 2a90 	vmov	r2, s15
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 81065de:	4b1f      	ldr	r3, [pc, #124]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81065e2:	0c1b      	lsrs	r3, r3, #16
 81065e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81065e8:	ee07 3a90 	vmov	s15, r3
 81065ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81065f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81065f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81065f8:	edd7 6a07 	vldr	s13, [r7, #28]
 81065fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8106600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106604:	ee17 2a90 	vmov	r2, s15
 8106608:	687b      	ldr	r3, [r7, #4]
 810660a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810660c:	4b13      	ldr	r3, [pc, #76]	; (810665c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8106610:	0e1b      	lsrs	r3, r3, #24
 8106612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8106616:	ee07 3a90 	vmov	s15, r3
 810661a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810661e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8106622:	ee37 7a87 	vadd.f32	s14, s15, s14
 8106626:	edd7 6a07 	vldr	s13, [r7, #28]
 810662a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810662e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8106632:	ee17 2a90 	vmov	r2, s15
 8106636:	687b      	ldr	r3, [r7, #4]
 8106638:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 810663a:	e008      	b.n	810664e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 810663c:	687b      	ldr	r3, [r7, #4]
 810663e:	2200      	movs	r2, #0
 8106640:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8106642:	687b      	ldr	r3, [r7, #4]
 8106644:	2200      	movs	r2, #0
 8106646:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8106648:	687b      	ldr	r3, [r7, #4]
 810664a:	2200      	movs	r2, #0
 810664c:	609a      	str	r2, [r3, #8]
}
 810664e:	bf00      	nop
 8106650:	3724      	adds	r7, #36	; 0x24
 8106652:	46bd      	mov	sp, r7
 8106654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106658:	4770      	bx	lr
 810665a:	bf00      	nop
 810665c:	58024400 	.word	0x58024400
 8106660:	03d09000 	.word	0x03d09000
 8106664:	46000000 	.word	0x46000000
 8106668:	4c742400 	.word	0x4c742400
 810666c:	4a742400 	.word	0x4a742400
 8106670:	4bbebc20 	.word	0x4bbebc20

08106674 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8106674:	b580      	push	{r7, lr}
 8106676:	b084      	sub	sp, #16
 8106678:	af00      	add	r7, sp, #0
 810667a:	6078      	str	r0, [r7, #4]
 810667c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810667e:	2300      	movs	r3, #0
 8106680:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8106682:	4b54      	ldr	r3, [pc, #336]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106686:	f003 0303 	and.w	r3, r3, #3
 810668a:	2b03      	cmp	r3, #3
 810668c:	d101      	bne.n	8106692 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810668e:	2301      	movs	r3, #1
 8106690:	e09b      	b.n	81067ca <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8106692:	4b50      	ldr	r3, [pc, #320]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106694:	681b      	ldr	r3, [r3, #0]
 8106696:	4a4f      	ldr	r2, [pc, #316]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106698:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 810669c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810669e:	f7fc ff6d 	bl	810357c <HAL_GetTick>
 81066a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81066a4:	e008      	b.n	81066b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81066a6:	f7fc ff69 	bl	810357c <HAL_GetTick>
 81066aa:	4602      	mov	r2, r0
 81066ac:	68bb      	ldr	r3, [r7, #8]
 81066ae:	1ad3      	subs	r3, r2, r3
 81066b0:	2b02      	cmp	r3, #2
 81066b2:	d901      	bls.n	81066b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81066b4:	2303      	movs	r3, #3
 81066b6:	e088      	b.n	81067ca <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81066b8:	4b46      	ldr	r3, [pc, #280]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 81066ba:	681b      	ldr	r3, [r3, #0]
 81066bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81066c0:	2b00      	cmp	r3, #0
 81066c2:	d1f0      	bne.n	81066a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81066c4:	4b43      	ldr	r3, [pc, #268]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 81066c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81066c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 81066cc:	687b      	ldr	r3, [r7, #4]
 81066ce:	681b      	ldr	r3, [r3, #0]
 81066d0:	031b      	lsls	r3, r3, #12
 81066d2:	4940      	ldr	r1, [pc, #256]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 81066d4:	4313      	orrs	r3, r2
 81066d6:	628b      	str	r3, [r1, #40]	; 0x28
 81066d8:	687b      	ldr	r3, [r7, #4]
 81066da:	685b      	ldr	r3, [r3, #4]
 81066dc:	3b01      	subs	r3, #1
 81066de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81066e2:	687b      	ldr	r3, [r7, #4]
 81066e4:	689b      	ldr	r3, [r3, #8]
 81066e6:	3b01      	subs	r3, #1
 81066e8:	025b      	lsls	r3, r3, #9
 81066ea:	b29b      	uxth	r3, r3
 81066ec:	431a      	orrs	r2, r3
 81066ee:	687b      	ldr	r3, [r7, #4]
 81066f0:	68db      	ldr	r3, [r3, #12]
 81066f2:	3b01      	subs	r3, #1
 81066f4:	041b      	lsls	r3, r3, #16
 81066f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 81066fa:	431a      	orrs	r2, r3
 81066fc:	687b      	ldr	r3, [r7, #4]
 81066fe:	691b      	ldr	r3, [r3, #16]
 8106700:	3b01      	subs	r3, #1
 8106702:	061b      	lsls	r3, r3, #24
 8106704:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8106708:	4932      	ldr	r1, [pc, #200]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 810670a:	4313      	orrs	r3, r2
 810670c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810670e:	4b31      	ldr	r3, [pc, #196]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106712:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8106716:	687b      	ldr	r3, [r7, #4]
 8106718:	695b      	ldr	r3, [r3, #20]
 810671a:	492e      	ldr	r1, [pc, #184]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 810671c:	4313      	orrs	r3, r2
 810671e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8106720:	4b2c      	ldr	r3, [pc, #176]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106724:	f023 0220 	bic.w	r2, r3, #32
 8106728:	687b      	ldr	r3, [r7, #4]
 810672a:	699b      	ldr	r3, [r3, #24]
 810672c:	4929      	ldr	r1, [pc, #164]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 810672e:	4313      	orrs	r3, r2
 8106730:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8106732:	4b28      	ldr	r3, [pc, #160]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106736:	4a27      	ldr	r2, [pc, #156]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106738:	f023 0310 	bic.w	r3, r3, #16
 810673c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810673e:	4b25      	ldr	r3, [pc, #148]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8106742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8106746:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 810674a:	687a      	ldr	r2, [r7, #4]
 810674c:	69d2      	ldr	r2, [r2, #28]
 810674e:	00d2      	lsls	r2, r2, #3
 8106750:	4920      	ldr	r1, [pc, #128]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106752:	4313      	orrs	r3, r2
 8106754:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8106756:	4b1f      	ldr	r3, [pc, #124]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810675a:	4a1e      	ldr	r2, [pc, #120]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 810675c:	f043 0310 	orr.w	r3, r3, #16
 8106760:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8106762:	683b      	ldr	r3, [r7, #0]
 8106764:	2b00      	cmp	r3, #0
 8106766:	d106      	bne.n	8106776 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8106768:	4b1a      	ldr	r3, [pc, #104]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 810676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810676c:	4a19      	ldr	r2, [pc, #100]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 810676e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8106772:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106774:	e00f      	b.n	8106796 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8106776:	683b      	ldr	r3, [r7, #0]
 8106778:	2b01      	cmp	r3, #1
 810677a:	d106      	bne.n	810678a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810677c:	4b15      	ldr	r3, [pc, #84]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 810677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106780:	4a14      	ldr	r2, [pc, #80]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106782:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106786:	62d3      	str	r3, [r2, #44]	; 0x2c
 8106788:	e005      	b.n	8106796 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810678a:	4b12      	ldr	r3, [pc, #72]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 810678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810678e:	4a11      	ldr	r2, [pc, #68]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106790:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8106794:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8106796:	4b0f      	ldr	r3, [pc, #60]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 8106798:	681b      	ldr	r3, [r3, #0]
 810679a:	4a0e      	ldr	r2, [pc, #56]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 810679c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81067a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81067a2:	f7fc feeb 	bl	810357c <HAL_GetTick>
 81067a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81067a8:	e008      	b.n	81067bc <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81067aa:	f7fc fee7 	bl	810357c <HAL_GetTick>
 81067ae:	4602      	mov	r2, r0
 81067b0:	68bb      	ldr	r3, [r7, #8]
 81067b2:	1ad3      	subs	r3, r2, r3
 81067b4:	2b02      	cmp	r3, #2
 81067b6:	d901      	bls.n	81067bc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81067b8:	2303      	movs	r3, #3
 81067ba:	e006      	b.n	81067ca <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81067bc:	4b05      	ldr	r3, [pc, #20]	; (81067d4 <RCCEx_PLL2_Config+0x160>)
 81067be:	681b      	ldr	r3, [r3, #0]
 81067c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81067c4:	2b00      	cmp	r3, #0
 81067c6:	d0f0      	beq.n	81067aa <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81067c8:	7bfb      	ldrb	r3, [r7, #15]
}
 81067ca:	4618      	mov	r0, r3
 81067cc:	3710      	adds	r7, #16
 81067ce:	46bd      	mov	sp, r7
 81067d0:	bd80      	pop	{r7, pc}
 81067d2:	bf00      	nop
 81067d4:	58024400 	.word	0x58024400

081067d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81067d8:	b580      	push	{r7, lr}
 81067da:	b084      	sub	sp, #16
 81067dc:	af00      	add	r7, sp, #0
 81067de:	6078      	str	r0, [r7, #4]
 81067e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81067e2:	2300      	movs	r3, #0
 81067e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81067e6:	4b54      	ldr	r3, [pc, #336]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81067e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81067ea:	f003 0303 	and.w	r3, r3, #3
 81067ee:	2b03      	cmp	r3, #3
 81067f0:	d101      	bne.n	81067f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81067f2:	2301      	movs	r3, #1
 81067f4:	e09b      	b.n	810692e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81067f6:	4b50      	ldr	r3, [pc, #320]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81067f8:	681b      	ldr	r3, [r3, #0]
 81067fa:	4a4f      	ldr	r2, [pc, #316]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81067fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106802:	f7fc febb 	bl	810357c <HAL_GetTick>
 8106806:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8106808:	e008      	b.n	810681c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810680a:	f7fc feb7 	bl	810357c <HAL_GetTick>
 810680e:	4602      	mov	r2, r0
 8106810:	68bb      	ldr	r3, [r7, #8]
 8106812:	1ad3      	subs	r3, r2, r3
 8106814:	2b02      	cmp	r3, #2
 8106816:	d901      	bls.n	810681c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8106818:	2303      	movs	r3, #3
 810681a:	e088      	b.n	810692e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810681c:	4b46      	ldr	r3, [pc, #280]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 810681e:	681b      	ldr	r3, [r3, #0]
 8106820:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106824:	2b00      	cmp	r3, #0
 8106826:	d1f0      	bne.n	810680a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8106828:	4b43      	ldr	r3, [pc, #268]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 810682a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810682c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8106830:	687b      	ldr	r3, [r7, #4]
 8106832:	681b      	ldr	r3, [r3, #0]
 8106834:	051b      	lsls	r3, r3, #20
 8106836:	4940      	ldr	r1, [pc, #256]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 8106838:	4313      	orrs	r3, r2
 810683a:	628b      	str	r3, [r1, #40]	; 0x28
 810683c:	687b      	ldr	r3, [r7, #4]
 810683e:	685b      	ldr	r3, [r3, #4]
 8106840:	3b01      	subs	r3, #1
 8106842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8106846:	687b      	ldr	r3, [r7, #4]
 8106848:	689b      	ldr	r3, [r3, #8]
 810684a:	3b01      	subs	r3, #1
 810684c:	025b      	lsls	r3, r3, #9
 810684e:	b29b      	uxth	r3, r3
 8106850:	431a      	orrs	r2, r3
 8106852:	687b      	ldr	r3, [r7, #4]
 8106854:	68db      	ldr	r3, [r3, #12]
 8106856:	3b01      	subs	r3, #1
 8106858:	041b      	lsls	r3, r3, #16
 810685a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810685e:	431a      	orrs	r2, r3
 8106860:	687b      	ldr	r3, [r7, #4]
 8106862:	691b      	ldr	r3, [r3, #16]
 8106864:	3b01      	subs	r3, #1
 8106866:	061b      	lsls	r3, r3, #24
 8106868:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 810686c:	4932      	ldr	r1, [pc, #200]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 810686e:	4313      	orrs	r3, r2
 8106870:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8106872:	4b31      	ldr	r3, [pc, #196]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 8106874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106876:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 810687a:	687b      	ldr	r3, [r7, #4]
 810687c:	695b      	ldr	r3, [r3, #20]
 810687e:	492e      	ldr	r1, [pc, #184]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 8106880:	4313      	orrs	r3, r2
 8106882:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8106884:	4b2c      	ldr	r3, [pc, #176]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 8106886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8106888:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 810688c:	687b      	ldr	r3, [r7, #4]
 810688e:	699b      	ldr	r3, [r3, #24]
 8106890:	4929      	ldr	r1, [pc, #164]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 8106892:	4313      	orrs	r3, r2
 8106894:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8106896:	4b28      	ldr	r3, [pc, #160]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 8106898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810689a:	4a27      	ldr	r2, [pc, #156]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 810689c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81068a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81068a2:	4b25      	ldr	r3, [pc, #148]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81068a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81068a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81068aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81068ae:	687a      	ldr	r2, [r7, #4]
 81068b0:	69d2      	ldr	r2, [r2, #28]
 81068b2:	00d2      	lsls	r2, r2, #3
 81068b4:	4920      	ldr	r1, [pc, #128]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81068b6:	4313      	orrs	r3, r2
 81068b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81068ba:	4b1f      	ldr	r3, [pc, #124]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81068bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068be:	4a1e      	ldr	r2, [pc, #120]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81068c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 81068c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81068c6:	683b      	ldr	r3, [r7, #0]
 81068c8:	2b00      	cmp	r3, #0
 81068ca:	d106      	bne.n	81068da <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81068cc:	4b1a      	ldr	r3, [pc, #104]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81068ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068d0:	4a19      	ldr	r2, [pc, #100]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81068d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 81068d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 81068d8:	e00f      	b.n	81068fa <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81068da:	683b      	ldr	r3, [r7, #0]
 81068dc:	2b01      	cmp	r3, #1
 81068de:	d106      	bne.n	81068ee <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81068e0:	4b15      	ldr	r3, [pc, #84]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068e4:	4a14      	ldr	r2, [pc, #80]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81068e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 81068ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 81068ec:	e005      	b.n	81068fa <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81068ee:	4b12      	ldr	r3, [pc, #72]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81068f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81068f2:	4a11      	ldr	r2, [pc, #68]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81068f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 81068f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81068fa:	4b0f      	ldr	r3, [pc, #60]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 81068fc:	681b      	ldr	r3, [r3, #0]
 81068fe:	4a0e      	ldr	r2, [pc, #56]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 8106900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8106904:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8106906:	f7fc fe39 	bl	810357c <HAL_GetTick>
 810690a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810690c:	e008      	b.n	8106920 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810690e:	f7fc fe35 	bl	810357c <HAL_GetTick>
 8106912:	4602      	mov	r2, r0
 8106914:	68bb      	ldr	r3, [r7, #8]
 8106916:	1ad3      	subs	r3, r2, r3
 8106918:	2b02      	cmp	r3, #2
 810691a:	d901      	bls.n	8106920 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810691c:	2303      	movs	r3, #3
 810691e:	e006      	b.n	810692e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8106920:	4b05      	ldr	r3, [pc, #20]	; (8106938 <RCCEx_PLL3_Config+0x160>)
 8106922:	681b      	ldr	r3, [r3, #0]
 8106924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8106928:	2b00      	cmp	r3, #0
 810692a:	d0f0      	beq.n	810690e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810692c:	7bfb      	ldrb	r3, [r7, #15]
}
 810692e:	4618      	mov	r0, r3
 8106930:	3710      	adds	r7, #16
 8106932:	46bd      	mov	sp, r7
 8106934:	bd80      	pop	{r7, pc}
 8106936:	bf00      	nop
 8106938:	58024400 	.word	0x58024400

0810693c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810693c:	b580      	push	{r7, lr}
 810693e:	b082      	sub	sp, #8
 8106940:	af00      	add	r7, sp, #0
 8106942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106944:	687b      	ldr	r3, [r7, #4]
 8106946:	2b00      	cmp	r3, #0
 8106948:	d101      	bne.n	810694e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810694a:	2301      	movs	r3, #1
 810694c:	e049      	b.n	81069e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810694e:	687b      	ldr	r3, [r7, #4]
 8106950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106954:	b2db      	uxtb	r3, r3
 8106956:	2b00      	cmp	r3, #0
 8106958:	d106      	bne.n	8106968 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810695a:	687b      	ldr	r3, [r7, #4]
 810695c:	2200      	movs	r2, #0
 810695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8106962:	6878      	ldr	r0, [r7, #4]
 8106964:	f7fc fa7c 	bl	8102e60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106968:	687b      	ldr	r3, [r7, #4]
 810696a:	2202      	movs	r2, #2
 810696c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106970:	687b      	ldr	r3, [r7, #4]
 8106972:	681a      	ldr	r2, [r3, #0]
 8106974:	687b      	ldr	r3, [r7, #4]
 8106976:	3304      	adds	r3, #4
 8106978:	4619      	mov	r1, r3
 810697a:	4610      	mov	r0, r2
 810697c:	f001 f928 	bl	8107bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106980:	687b      	ldr	r3, [r7, #4]
 8106982:	2201      	movs	r2, #1
 8106984:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106988:	687b      	ldr	r3, [r7, #4]
 810698a:	2201      	movs	r2, #1
 810698c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106990:	687b      	ldr	r3, [r7, #4]
 8106992:	2201      	movs	r2, #1
 8106994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106998:	687b      	ldr	r3, [r7, #4]
 810699a:	2201      	movs	r2, #1
 810699c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81069a0:	687b      	ldr	r3, [r7, #4]
 81069a2:	2201      	movs	r2, #1
 81069a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81069a8:	687b      	ldr	r3, [r7, #4]
 81069aa:	2201      	movs	r2, #1
 81069ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81069b0:	687b      	ldr	r3, [r7, #4]
 81069b2:	2201      	movs	r2, #1
 81069b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81069b8:	687b      	ldr	r3, [r7, #4]
 81069ba:	2201      	movs	r2, #1
 81069bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81069c0:	687b      	ldr	r3, [r7, #4]
 81069c2:	2201      	movs	r2, #1
 81069c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81069c8:	687b      	ldr	r3, [r7, #4]
 81069ca:	2201      	movs	r2, #1
 81069cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81069d0:	687b      	ldr	r3, [r7, #4]
 81069d2:	2201      	movs	r2, #1
 81069d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81069d8:	687b      	ldr	r3, [r7, #4]
 81069da:	2201      	movs	r2, #1
 81069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81069e0:	2300      	movs	r3, #0
}
 81069e2:	4618      	mov	r0, r3
 81069e4:	3708      	adds	r7, #8
 81069e6:	46bd      	mov	sp, r7
 81069e8:	bd80      	pop	{r7, pc}
	...

081069ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 81069ec:	b480      	push	{r7}
 81069ee:	b085      	sub	sp, #20
 81069f0:	af00      	add	r7, sp, #0
 81069f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 81069f4:	687b      	ldr	r3, [r7, #4]
 81069f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 81069fa:	b2db      	uxtb	r3, r3
 81069fc:	2b01      	cmp	r3, #1
 81069fe:	d001      	beq.n	8106a04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8106a00:	2301      	movs	r3, #1
 8106a02:	e054      	b.n	8106aae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106a04:	687b      	ldr	r3, [r7, #4]
 8106a06:	2202      	movs	r2, #2
 8106a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106a0c:	687b      	ldr	r3, [r7, #4]
 8106a0e:	681b      	ldr	r3, [r3, #0]
 8106a10:	68da      	ldr	r2, [r3, #12]
 8106a12:	687b      	ldr	r3, [r7, #4]
 8106a14:	681b      	ldr	r3, [r3, #0]
 8106a16:	f042 0201 	orr.w	r2, r2, #1
 8106a1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106a1c:	687b      	ldr	r3, [r7, #4]
 8106a1e:	681b      	ldr	r3, [r3, #0]
 8106a20:	4a26      	ldr	r2, [pc, #152]	; (8106abc <HAL_TIM_Base_Start_IT+0xd0>)
 8106a22:	4293      	cmp	r3, r2
 8106a24:	d022      	beq.n	8106a6c <HAL_TIM_Base_Start_IT+0x80>
 8106a26:	687b      	ldr	r3, [r7, #4]
 8106a28:	681b      	ldr	r3, [r3, #0]
 8106a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106a2e:	d01d      	beq.n	8106a6c <HAL_TIM_Base_Start_IT+0x80>
 8106a30:	687b      	ldr	r3, [r7, #4]
 8106a32:	681b      	ldr	r3, [r3, #0]
 8106a34:	4a22      	ldr	r2, [pc, #136]	; (8106ac0 <HAL_TIM_Base_Start_IT+0xd4>)
 8106a36:	4293      	cmp	r3, r2
 8106a38:	d018      	beq.n	8106a6c <HAL_TIM_Base_Start_IT+0x80>
 8106a3a:	687b      	ldr	r3, [r7, #4]
 8106a3c:	681b      	ldr	r3, [r3, #0]
 8106a3e:	4a21      	ldr	r2, [pc, #132]	; (8106ac4 <HAL_TIM_Base_Start_IT+0xd8>)
 8106a40:	4293      	cmp	r3, r2
 8106a42:	d013      	beq.n	8106a6c <HAL_TIM_Base_Start_IT+0x80>
 8106a44:	687b      	ldr	r3, [r7, #4]
 8106a46:	681b      	ldr	r3, [r3, #0]
 8106a48:	4a1f      	ldr	r2, [pc, #124]	; (8106ac8 <HAL_TIM_Base_Start_IT+0xdc>)
 8106a4a:	4293      	cmp	r3, r2
 8106a4c:	d00e      	beq.n	8106a6c <HAL_TIM_Base_Start_IT+0x80>
 8106a4e:	687b      	ldr	r3, [r7, #4]
 8106a50:	681b      	ldr	r3, [r3, #0]
 8106a52:	4a1e      	ldr	r2, [pc, #120]	; (8106acc <HAL_TIM_Base_Start_IT+0xe0>)
 8106a54:	4293      	cmp	r3, r2
 8106a56:	d009      	beq.n	8106a6c <HAL_TIM_Base_Start_IT+0x80>
 8106a58:	687b      	ldr	r3, [r7, #4]
 8106a5a:	681b      	ldr	r3, [r3, #0]
 8106a5c:	4a1c      	ldr	r2, [pc, #112]	; (8106ad0 <HAL_TIM_Base_Start_IT+0xe4>)
 8106a5e:	4293      	cmp	r3, r2
 8106a60:	d004      	beq.n	8106a6c <HAL_TIM_Base_Start_IT+0x80>
 8106a62:	687b      	ldr	r3, [r7, #4]
 8106a64:	681b      	ldr	r3, [r3, #0]
 8106a66:	4a1b      	ldr	r2, [pc, #108]	; (8106ad4 <HAL_TIM_Base_Start_IT+0xe8>)
 8106a68:	4293      	cmp	r3, r2
 8106a6a:	d115      	bne.n	8106a98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106a6c:	687b      	ldr	r3, [r7, #4]
 8106a6e:	681b      	ldr	r3, [r3, #0]
 8106a70:	689a      	ldr	r2, [r3, #8]
 8106a72:	4b19      	ldr	r3, [pc, #100]	; (8106ad8 <HAL_TIM_Base_Start_IT+0xec>)
 8106a74:	4013      	ands	r3, r2
 8106a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106a78:	68fb      	ldr	r3, [r7, #12]
 8106a7a:	2b06      	cmp	r3, #6
 8106a7c:	d015      	beq.n	8106aaa <HAL_TIM_Base_Start_IT+0xbe>
 8106a7e:	68fb      	ldr	r3, [r7, #12]
 8106a80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106a84:	d011      	beq.n	8106aaa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8106a86:	687b      	ldr	r3, [r7, #4]
 8106a88:	681b      	ldr	r3, [r3, #0]
 8106a8a:	681a      	ldr	r2, [r3, #0]
 8106a8c:	687b      	ldr	r3, [r7, #4]
 8106a8e:	681b      	ldr	r3, [r3, #0]
 8106a90:	f042 0201 	orr.w	r2, r2, #1
 8106a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106a96:	e008      	b.n	8106aaa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106a98:	687b      	ldr	r3, [r7, #4]
 8106a9a:	681b      	ldr	r3, [r3, #0]
 8106a9c:	681a      	ldr	r2, [r3, #0]
 8106a9e:	687b      	ldr	r3, [r7, #4]
 8106aa0:	681b      	ldr	r3, [r3, #0]
 8106aa2:	f042 0201 	orr.w	r2, r2, #1
 8106aa6:	601a      	str	r2, [r3, #0]
 8106aa8:	e000      	b.n	8106aac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106aaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106aac:	2300      	movs	r3, #0
}
 8106aae:	4618      	mov	r0, r3
 8106ab0:	3714      	adds	r7, #20
 8106ab2:	46bd      	mov	sp, r7
 8106ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ab8:	4770      	bx	lr
 8106aba:	bf00      	nop
 8106abc:	40010000 	.word	0x40010000
 8106ac0:	40000400 	.word	0x40000400
 8106ac4:	40000800 	.word	0x40000800
 8106ac8:	40000c00 	.word	0x40000c00
 8106acc:	40010400 	.word	0x40010400
 8106ad0:	40001800 	.word	0x40001800
 8106ad4:	40014000 	.word	0x40014000
 8106ad8:	00010007 	.word	0x00010007

08106adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8106adc:	b580      	push	{r7, lr}
 8106ade:	b082      	sub	sp, #8
 8106ae0:	af00      	add	r7, sp, #0
 8106ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106ae4:	687b      	ldr	r3, [r7, #4]
 8106ae6:	2b00      	cmp	r3, #0
 8106ae8:	d101      	bne.n	8106aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8106aea:	2301      	movs	r3, #1
 8106aec:	e049      	b.n	8106b82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106aee:	687b      	ldr	r3, [r7, #4]
 8106af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106af4:	b2db      	uxtb	r3, r3
 8106af6:	2b00      	cmp	r3, #0
 8106af8:	d106      	bne.n	8106b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106afa:	687b      	ldr	r3, [r7, #4]
 8106afc:	2200      	movs	r2, #0
 8106afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8106b02:	6878      	ldr	r0, [r7, #4]
 8106b04:	f000 f841 	bl	8106b8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106b08:	687b      	ldr	r3, [r7, #4]
 8106b0a:	2202      	movs	r2, #2
 8106b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106b10:	687b      	ldr	r3, [r7, #4]
 8106b12:	681a      	ldr	r2, [r3, #0]
 8106b14:	687b      	ldr	r3, [r7, #4]
 8106b16:	3304      	adds	r3, #4
 8106b18:	4619      	mov	r1, r3
 8106b1a:	4610      	mov	r0, r2
 8106b1c:	f001 f858 	bl	8107bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106b20:	687b      	ldr	r3, [r7, #4]
 8106b22:	2201      	movs	r2, #1
 8106b24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106b28:	687b      	ldr	r3, [r7, #4]
 8106b2a:	2201      	movs	r2, #1
 8106b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106b30:	687b      	ldr	r3, [r7, #4]
 8106b32:	2201      	movs	r2, #1
 8106b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106b38:	687b      	ldr	r3, [r7, #4]
 8106b3a:	2201      	movs	r2, #1
 8106b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106b40:	687b      	ldr	r3, [r7, #4]
 8106b42:	2201      	movs	r2, #1
 8106b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106b48:	687b      	ldr	r3, [r7, #4]
 8106b4a:	2201      	movs	r2, #1
 8106b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106b50:	687b      	ldr	r3, [r7, #4]
 8106b52:	2201      	movs	r2, #1
 8106b54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106b58:	687b      	ldr	r3, [r7, #4]
 8106b5a:	2201      	movs	r2, #1
 8106b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106b60:	687b      	ldr	r3, [r7, #4]
 8106b62:	2201      	movs	r2, #1
 8106b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106b68:	687b      	ldr	r3, [r7, #4]
 8106b6a:	2201      	movs	r2, #1
 8106b6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106b70:	687b      	ldr	r3, [r7, #4]
 8106b72:	2201      	movs	r2, #1
 8106b74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106b78:	687b      	ldr	r3, [r7, #4]
 8106b7a:	2201      	movs	r2, #1
 8106b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106b80:	2300      	movs	r3, #0
}
 8106b82:	4618      	mov	r0, r3
 8106b84:	3708      	adds	r7, #8
 8106b86:	46bd      	mov	sp, r7
 8106b88:	bd80      	pop	{r7, pc}

08106b8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8106b8a:	b480      	push	{r7}
 8106b8c:	b083      	sub	sp, #12
 8106b8e:	af00      	add	r7, sp, #0
 8106b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8106b92:	bf00      	nop
 8106b94:	370c      	adds	r7, #12
 8106b96:	46bd      	mov	sp, r7
 8106b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b9c:	4770      	bx	lr
	...

08106ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106ba0:	b580      	push	{r7, lr}
 8106ba2:	b084      	sub	sp, #16
 8106ba4:	af00      	add	r7, sp, #0
 8106ba6:	6078      	str	r0, [r7, #4]
 8106ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8106baa:	683b      	ldr	r3, [r7, #0]
 8106bac:	2b00      	cmp	r3, #0
 8106bae:	d109      	bne.n	8106bc4 <HAL_TIM_PWM_Start+0x24>
 8106bb0:	687b      	ldr	r3, [r7, #4]
 8106bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8106bb6:	b2db      	uxtb	r3, r3
 8106bb8:	2b01      	cmp	r3, #1
 8106bba:	bf14      	ite	ne
 8106bbc:	2301      	movne	r3, #1
 8106bbe:	2300      	moveq	r3, #0
 8106bc0:	b2db      	uxtb	r3, r3
 8106bc2:	e03c      	b.n	8106c3e <HAL_TIM_PWM_Start+0x9e>
 8106bc4:	683b      	ldr	r3, [r7, #0]
 8106bc6:	2b04      	cmp	r3, #4
 8106bc8:	d109      	bne.n	8106bde <HAL_TIM_PWM_Start+0x3e>
 8106bca:	687b      	ldr	r3, [r7, #4]
 8106bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8106bd0:	b2db      	uxtb	r3, r3
 8106bd2:	2b01      	cmp	r3, #1
 8106bd4:	bf14      	ite	ne
 8106bd6:	2301      	movne	r3, #1
 8106bd8:	2300      	moveq	r3, #0
 8106bda:	b2db      	uxtb	r3, r3
 8106bdc:	e02f      	b.n	8106c3e <HAL_TIM_PWM_Start+0x9e>
 8106bde:	683b      	ldr	r3, [r7, #0]
 8106be0:	2b08      	cmp	r3, #8
 8106be2:	d109      	bne.n	8106bf8 <HAL_TIM_PWM_Start+0x58>
 8106be4:	687b      	ldr	r3, [r7, #4]
 8106be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106bea:	b2db      	uxtb	r3, r3
 8106bec:	2b01      	cmp	r3, #1
 8106bee:	bf14      	ite	ne
 8106bf0:	2301      	movne	r3, #1
 8106bf2:	2300      	moveq	r3, #0
 8106bf4:	b2db      	uxtb	r3, r3
 8106bf6:	e022      	b.n	8106c3e <HAL_TIM_PWM_Start+0x9e>
 8106bf8:	683b      	ldr	r3, [r7, #0]
 8106bfa:	2b0c      	cmp	r3, #12
 8106bfc:	d109      	bne.n	8106c12 <HAL_TIM_PWM_Start+0x72>
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106c04:	b2db      	uxtb	r3, r3
 8106c06:	2b01      	cmp	r3, #1
 8106c08:	bf14      	ite	ne
 8106c0a:	2301      	movne	r3, #1
 8106c0c:	2300      	moveq	r3, #0
 8106c0e:	b2db      	uxtb	r3, r3
 8106c10:	e015      	b.n	8106c3e <HAL_TIM_PWM_Start+0x9e>
 8106c12:	683b      	ldr	r3, [r7, #0]
 8106c14:	2b10      	cmp	r3, #16
 8106c16:	d109      	bne.n	8106c2c <HAL_TIM_PWM_Start+0x8c>
 8106c18:	687b      	ldr	r3, [r7, #4]
 8106c1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8106c1e:	b2db      	uxtb	r3, r3
 8106c20:	2b01      	cmp	r3, #1
 8106c22:	bf14      	ite	ne
 8106c24:	2301      	movne	r3, #1
 8106c26:	2300      	moveq	r3, #0
 8106c28:	b2db      	uxtb	r3, r3
 8106c2a:	e008      	b.n	8106c3e <HAL_TIM_PWM_Start+0x9e>
 8106c2c:	687b      	ldr	r3, [r7, #4]
 8106c2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8106c32:	b2db      	uxtb	r3, r3
 8106c34:	2b01      	cmp	r3, #1
 8106c36:	bf14      	ite	ne
 8106c38:	2301      	movne	r3, #1
 8106c3a:	2300      	moveq	r3, #0
 8106c3c:	b2db      	uxtb	r3, r3
 8106c3e:	2b00      	cmp	r3, #0
 8106c40:	d001      	beq.n	8106c46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8106c42:	2301      	movs	r3, #1
 8106c44:	e0a1      	b.n	8106d8a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106c46:	683b      	ldr	r3, [r7, #0]
 8106c48:	2b00      	cmp	r3, #0
 8106c4a:	d104      	bne.n	8106c56 <HAL_TIM_PWM_Start+0xb6>
 8106c4c:	687b      	ldr	r3, [r7, #4]
 8106c4e:	2202      	movs	r2, #2
 8106c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106c54:	e023      	b.n	8106c9e <HAL_TIM_PWM_Start+0xfe>
 8106c56:	683b      	ldr	r3, [r7, #0]
 8106c58:	2b04      	cmp	r3, #4
 8106c5a:	d104      	bne.n	8106c66 <HAL_TIM_PWM_Start+0xc6>
 8106c5c:	687b      	ldr	r3, [r7, #4]
 8106c5e:	2202      	movs	r2, #2
 8106c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106c64:	e01b      	b.n	8106c9e <HAL_TIM_PWM_Start+0xfe>
 8106c66:	683b      	ldr	r3, [r7, #0]
 8106c68:	2b08      	cmp	r3, #8
 8106c6a:	d104      	bne.n	8106c76 <HAL_TIM_PWM_Start+0xd6>
 8106c6c:	687b      	ldr	r3, [r7, #4]
 8106c6e:	2202      	movs	r2, #2
 8106c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106c74:	e013      	b.n	8106c9e <HAL_TIM_PWM_Start+0xfe>
 8106c76:	683b      	ldr	r3, [r7, #0]
 8106c78:	2b0c      	cmp	r3, #12
 8106c7a:	d104      	bne.n	8106c86 <HAL_TIM_PWM_Start+0xe6>
 8106c7c:	687b      	ldr	r3, [r7, #4]
 8106c7e:	2202      	movs	r2, #2
 8106c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106c84:	e00b      	b.n	8106c9e <HAL_TIM_PWM_Start+0xfe>
 8106c86:	683b      	ldr	r3, [r7, #0]
 8106c88:	2b10      	cmp	r3, #16
 8106c8a:	d104      	bne.n	8106c96 <HAL_TIM_PWM_Start+0xf6>
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	2202      	movs	r2, #2
 8106c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106c94:	e003      	b.n	8106c9e <HAL_TIM_PWM_Start+0xfe>
 8106c96:	687b      	ldr	r3, [r7, #4]
 8106c98:	2202      	movs	r2, #2
 8106c9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106c9e:	687b      	ldr	r3, [r7, #4]
 8106ca0:	681b      	ldr	r3, [r3, #0]
 8106ca2:	2201      	movs	r2, #1
 8106ca4:	6839      	ldr	r1, [r7, #0]
 8106ca6:	4618      	mov	r0, r3
 8106ca8:	f001 fdbe 	bl	8108828 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8106cac:	687b      	ldr	r3, [r7, #4]
 8106cae:	681b      	ldr	r3, [r3, #0]
 8106cb0:	4a38      	ldr	r2, [pc, #224]	; (8106d94 <HAL_TIM_PWM_Start+0x1f4>)
 8106cb2:	4293      	cmp	r3, r2
 8106cb4:	d013      	beq.n	8106cde <HAL_TIM_PWM_Start+0x13e>
 8106cb6:	687b      	ldr	r3, [r7, #4]
 8106cb8:	681b      	ldr	r3, [r3, #0]
 8106cba:	4a37      	ldr	r2, [pc, #220]	; (8106d98 <HAL_TIM_PWM_Start+0x1f8>)
 8106cbc:	4293      	cmp	r3, r2
 8106cbe:	d00e      	beq.n	8106cde <HAL_TIM_PWM_Start+0x13e>
 8106cc0:	687b      	ldr	r3, [r7, #4]
 8106cc2:	681b      	ldr	r3, [r3, #0]
 8106cc4:	4a35      	ldr	r2, [pc, #212]	; (8106d9c <HAL_TIM_PWM_Start+0x1fc>)
 8106cc6:	4293      	cmp	r3, r2
 8106cc8:	d009      	beq.n	8106cde <HAL_TIM_PWM_Start+0x13e>
 8106cca:	687b      	ldr	r3, [r7, #4]
 8106ccc:	681b      	ldr	r3, [r3, #0]
 8106cce:	4a34      	ldr	r2, [pc, #208]	; (8106da0 <HAL_TIM_PWM_Start+0x200>)
 8106cd0:	4293      	cmp	r3, r2
 8106cd2:	d004      	beq.n	8106cde <HAL_TIM_PWM_Start+0x13e>
 8106cd4:	687b      	ldr	r3, [r7, #4]
 8106cd6:	681b      	ldr	r3, [r3, #0]
 8106cd8:	4a32      	ldr	r2, [pc, #200]	; (8106da4 <HAL_TIM_PWM_Start+0x204>)
 8106cda:	4293      	cmp	r3, r2
 8106cdc:	d101      	bne.n	8106ce2 <HAL_TIM_PWM_Start+0x142>
 8106cde:	2301      	movs	r3, #1
 8106ce0:	e000      	b.n	8106ce4 <HAL_TIM_PWM_Start+0x144>
 8106ce2:	2300      	movs	r3, #0
 8106ce4:	2b00      	cmp	r3, #0
 8106ce6:	d007      	beq.n	8106cf8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8106ce8:	687b      	ldr	r3, [r7, #4]
 8106cea:	681b      	ldr	r3, [r3, #0]
 8106cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8106cee:	687b      	ldr	r3, [r7, #4]
 8106cf0:	681b      	ldr	r3, [r3, #0]
 8106cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8106cf6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106cf8:	687b      	ldr	r3, [r7, #4]
 8106cfa:	681b      	ldr	r3, [r3, #0]
 8106cfc:	4a25      	ldr	r2, [pc, #148]	; (8106d94 <HAL_TIM_PWM_Start+0x1f4>)
 8106cfe:	4293      	cmp	r3, r2
 8106d00:	d022      	beq.n	8106d48 <HAL_TIM_PWM_Start+0x1a8>
 8106d02:	687b      	ldr	r3, [r7, #4]
 8106d04:	681b      	ldr	r3, [r3, #0]
 8106d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106d0a:	d01d      	beq.n	8106d48 <HAL_TIM_PWM_Start+0x1a8>
 8106d0c:	687b      	ldr	r3, [r7, #4]
 8106d0e:	681b      	ldr	r3, [r3, #0]
 8106d10:	4a25      	ldr	r2, [pc, #148]	; (8106da8 <HAL_TIM_PWM_Start+0x208>)
 8106d12:	4293      	cmp	r3, r2
 8106d14:	d018      	beq.n	8106d48 <HAL_TIM_PWM_Start+0x1a8>
 8106d16:	687b      	ldr	r3, [r7, #4]
 8106d18:	681b      	ldr	r3, [r3, #0]
 8106d1a:	4a24      	ldr	r2, [pc, #144]	; (8106dac <HAL_TIM_PWM_Start+0x20c>)
 8106d1c:	4293      	cmp	r3, r2
 8106d1e:	d013      	beq.n	8106d48 <HAL_TIM_PWM_Start+0x1a8>
 8106d20:	687b      	ldr	r3, [r7, #4]
 8106d22:	681b      	ldr	r3, [r3, #0]
 8106d24:	4a22      	ldr	r2, [pc, #136]	; (8106db0 <HAL_TIM_PWM_Start+0x210>)
 8106d26:	4293      	cmp	r3, r2
 8106d28:	d00e      	beq.n	8106d48 <HAL_TIM_PWM_Start+0x1a8>
 8106d2a:	687b      	ldr	r3, [r7, #4]
 8106d2c:	681b      	ldr	r3, [r3, #0]
 8106d2e:	4a1a      	ldr	r2, [pc, #104]	; (8106d98 <HAL_TIM_PWM_Start+0x1f8>)
 8106d30:	4293      	cmp	r3, r2
 8106d32:	d009      	beq.n	8106d48 <HAL_TIM_PWM_Start+0x1a8>
 8106d34:	687b      	ldr	r3, [r7, #4]
 8106d36:	681b      	ldr	r3, [r3, #0]
 8106d38:	4a1e      	ldr	r2, [pc, #120]	; (8106db4 <HAL_TIM_PWM_Start+0x214>)
 8106d3a:	4293      	cmp	r3, r2
 8106d3c:	d004      	beq.n	8106d48 <HAL_TIM_PWM_Start+0x1a8>
 8106d3e:	687b      	ldr	r3, [r7, #4]
 8106d40:	681b      	ldr	r3, [r3, #0]
 8106d42:	4a16      	ldr	r2, [pc, #88]	; (8106d9c <HAL_TIM_PWM_Start+0x1fc>)
 8106d44:	4293      	cmp	r3, r2
 8106d46:	d115      	bne.n	8106d74 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106d48:	687b      	ldr	r3, [r7, #4]
 8106d4a:	681b      	ldr	r3, [r3, #0]
 8106d4c:	689a      	ldr	r2, [r3, #8]
 8106d4e:	4b1a      	ldr	r3, [pc, #104]	; (8106db8 <HAL_TIM_PWM_Start+0x218>)
 8106d50:	4013      	ands	r3, r2
 8106d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106d54:	68fb      	ldr	r3, [r7, #12]
 8106d56:	2b06      	cmp	r3, #6
 8106d58:	d015      	beq.n	8106d86 <HAL_TIM_PWM_Start+0x1e6>
 8106d5a:	68fb      	ldr	r3, [r7, #12]
 8106d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8106d60:	d011      	beq.n	8106d86 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8106d62:	687b      	ldr	r3, [r7, #4]
 8106d64:	681b      	ldr	r3, [r3, #0]
 8106d66:	681a      	ldr	r2, [r3, #0]
 8106d68:	687b      	ldr	r3, [r7, #4]
 8106d6a:	681b      	ldr	r3, [r3, #0]
 8106d6c:	f042 0201 	orr.w	r2, r2, #1
 8106d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106d72:	e008      	b.n	8106d86 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106d74:	687b      	ldr	r3, [r7, #4]
 8106d76:	681b      	ldr	r3, [r3, #0]
 8106d78:	681a      	ldr	r2, [r3, #0]
 8106d7a:	687b      	ldr	r3, [r7, #4]
 8106d7c:	681b      	ldr	r3, [r3, #0]
 8106d7e:	f042 0201 	orr.w	r2, r2, #1
 8106d82:	601a      	str	r2, [r3, #0]
 8106d84:	e000      	b.n	8106d88 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106d86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106d88:	2300      	movs	r3, #0
}
 8106d8a:	4618      	mov	r0, r3
 8106d8c:	3710      	adds	r7, #16
 8106d8e:	46bd      	mov	sp, r7
 8106d90:	bd80      	pop	{r7, pc}
 8106d92:	bf00      	nop
 8106d94:	40010000 	.word	0x40010000
 8106d98:	40010400 	.word	0x40010400
 8106d9c:	40014000 	.word	0x40014000
 8106da0:	40014400 	.word	0x40014400
 8106da4:	40014800 	.word	0x40014800
 8106da8:	40000400 	.word	0x40000400
 8106dac:	40000800 	.word	0x40000800
 8106db0:	40000c00 	.word	0x40000c00
 8106db4:	40001800 	.word	0x40001800
 8106db8:	00010007 	.word	0x00010007

08106dbc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8106dbc:	b580      	push	{r7, lr}
 8106dbe:	b082      	sub	sp, #8
 8106dc0:	af00      	add	r7, sp, #0
 8106dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106dc4:	687b      	ldr	r3, [r7, #4]
 8106dc6:	2b00      	cmp	r3, #0
 8106dc8:	d101      	bne.n	8106dce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8106dca:	2301      	movs	r3, #1
 8106dcc:	e049      	b.n	8106e62 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106dce:	687b      	ldr	r3, [r7, #4]
 8106dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106dd4:	b2db      	uxtb	r3, r3
 8106dd6:	2b00      	cmp	r3, #0
 8106dd8:	d106      	bne.n	8106de8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8106dda:	687b      	ldr	r3, [r7, #4]
 8106ddc:	2200      	movs	r2, #0
 8106dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8106de2:	6878      	ldr	r0, [r7, #4]
 8106de4:	f000 f841 	bl	8106e6a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106de8:	687b      	ldr	r3, [r7, #4]
 8106dea:	2202      	movs	r2, #2
 8106dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106df0:	687b      	ldr	r3, [r7, #4]
 8106df2:	681a      	ldr	r2, [r3, #0]
 8106df4:	687b      	ldr	r3, [r7, #4]
 8106df6:	3304      	adds	r3, #4
 8106df8:	4619      	mov	r1, r3
 8106dfa:	4610      	mov	r0, r2
 8106dfc:	f000 fee8 	bl	8107bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106e00:	687b      	ldr	r3, [r7, #4]
 8106e02:	2201      	movs	r2, #1
 8106e04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106e08:	687b      	ldr	r3, [r7, #4]
 8106e0a:	2201      	movs	r2, #1
 8106e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106e10:	687b      	ldr	r3, [r7, #4]
 8106e12:	2201      	movs	r2, #1
 8106e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106e18:	687b      	ldr	r3, [r7, #4]
 8106e1a:	2201      	movs	r2, #1
 8106e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106e20:	687b      	ldr	r3, [r7, #4]
 8106e22:	2201      	movs	r2, #1
 8106e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106e28:	687b      	ldr	r3, [r7, #4]
 8106e2a:	2201      	movs	r2, #1
 8106e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106e30:	687b      	ldr	r3, [r7, #4]
 8106e32:	2201      	movs	r2, #1
 8106e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8106e38:	687b      	ldr	r3, [r7, #4]
 8106e3a:	2201      	movs	r2, #1
 8106e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106e40:	687b      	ldr	r3, [r7, #4]
 8106e42:	2201      	movs	r2, #1
 8106e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106e48:	687b      	ldr	r3, [r7, #4]
 8106e4a:	2201      	movs	r2, #1
 8106e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106e50:	687b      	ldr	r3, [r7, #4]
 8106e52:	2201      	movs	r2, #1
 8106e54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8106e58:	687b      	ldr	r3, [r7, #4]
 8106e5a:	2201      	movs	r2, #1
 8106e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106e60:	2300      	movs	r3, #0
}
 8106e62:	4618      	mov	r0, r3
 8106e64:	3708      	adds	r7, #8
 8106e66:	46bd      	mov	sp, r7
 8106e68:	bd80      	pop	{r7, pc}

08106e6a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8106e6a:	b480      	push	{r7}
 8106e6c:	b083      	sub	sp, #12
 8106e6e:	af00      	add	r7, sp, #0
 8106e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8106e72:	bf00      	nop
 8106e74:	370c      	adds	r7, #12
 8106e76:	46bd      	mov	sp, r7
 8106e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106e7c:	4770      	bx	lr
	...

08106e80 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8106e80:	b580      	push	{r7, lr}
 8106e82:	b084      	sub	sp, #16
 8106e84:	af00      	add	r7, sp, #0
 8106e86:	6078      	str	r0, [r7, #4]
 8106e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8106e8a:	683b      	ldr	r3, [r7, #0]
 8106e8c:	2b00      	cmp	r3, #0
 8106e8e:	d104      	bne.n	8106e9a <HAL_TIM_IC_Start+0x1a>
 8106e90:	687b      	ldr	r3, [r7, #4]
 8106e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8106e96:	b2db      	uxtb	r3, r3
 8106e98:	e023      	b.n	8106ee2 <HAL_TIM_IC_Start+0x62>
 8106e9a:	683b      	ldr	r3, [r7, #0]
 8106e9c:	2b04      	cmp	r3, #4
 8106e9e:	d104      	bne.n	8106eaa <HAL_TIM_IC_Start+0x2a>
 8106ea0:	687b      	ldr	r3, [r7, #4]
 8106ea2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8106ea6:	b2db      	uxtb	r3, r3
 8106ea8:	e01b      	b.n	8106ee2 <HAL_TIM_IC_Start+0x62>
 8106eaa:	683b      	ldr	r3, [r7, #0]
 8106eac:	2b08      	cmp	r3, #8
 8106eae:	d104      	bne.n	8106eba <HAL_TIM_IC_Start+0x3a>
 8106eb0:	687b      	ldr	r3, [r7, #4]
 8106eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8106eb6:	b2db      	uxtb	r3, r3
 8106eb8:	e013      	b.n	8106ee2 <HAL_TIM_IC_Start+0x62>
 8106eba:	683b      	ldr	r3, [r7, #0]
 8106ebc:	2b0c      	cmp	r3, #12
 8106ebe:	d104      	bne.n	8106eca <HAL_TIM_IC_Start+0x4a>
 8106ec0:	687b      	ldr	r3, [r7, #4]
 8106ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106ec6:	b2db      	uxtb	r3, r3
 8106ec8:	e00b      	b.n	8106ee2 <HAL_TIM_IC_Start+0x62>
 8106eca:	683b      	ldr	r3, [r7, #0]
 8106ecc:	2b10      	cmp	r3, #16
 8106ece:	d104      	bne.n	8106eda <HAL_TIM_IC_Start+0x5a>
 8106ed0:	687b      	ldr	r3, [r7, #4]
 8106ed2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8106ed6:	b2db      	uxtb	r3, r3
 8106ed8:	e003      	b.n	8106ee2 <HAL_TIM_IC_Start+0x62>
 8106eda:	687b      	ldr	r3, [r7, #4]
 8106edc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8106ee0:	b2db      	uxtb	r3, r3
 8106ee2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8106ee4:	683b      	ldr	r3, [r7, #0]
 8106ee6:	2b00      	cmp	r3, #0
 8106ee8:	d104      	bne.n	8106ef4 <HAL_TIM_IC_Start+0x74>
 8106eea:	687b      	ldr	r3, [r7, #4]
 8106eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8106ef0:	b2db      	uxtb	r3, r3
 8106ef2:	e013      	b.n	8106f1c <HAL_TIM_IC_Start+0x9c>
 8106ef4:	683b      	ldr	r3, [r7, #0]
 8106ef6:	2b04      	cmp	r3, #4
 8106ef8:	d104      	bne.n	8106f04 <HAL_TIM_IC_Start+0x84>
 8106efa:	687b      	ldr	r3, [r7, #4]
 8106efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8106f00:	b2db      	uxtb	r3, r3
 8106f02:	e00b      	b.n	8106f1c <HAL_TIM_IC_Start+0x9c>
 8106f04:	683b      	ldr	r3, [r7, #0]
 8106f06:	2b08      	cmp	r3, #8
 8106f08:	d104      	bne.n	8106f14 <HAL_TIM_IC_Start+0x94>
 8106f0a:	687b      	ldr	r3, [r7, #4]
 8106f0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8106f10:	b2db      	uxtb	r3, r3
 8106f12:	e003      	b.n	8106f1c <HAL_TIM_IC_Start+0x9c>
 8106f14:	687b      	ldr	r3, [r7, #4]
 8106f16:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8106f1a:	b2db      	uxtb	r3, r3
 8106f1c:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8106f1e:	7bfb      	ldrb	r3, [r7, #15]
 8106f20:	2b01      	cmp	r3, #1
 8106f22:	d102      	bne.n	8106f2a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8106f24:	7bbb      	ldrb	r3, [r7, #14]
 8106f26:	2b01      	cmp	r3, #1
 8106f28:	d001      	beq.n	8106f2e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8106f2a:	2301      	movs	r3, #1
 8106f2c:	e097      	b.n	810705e <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106f2e:	683b      	ldr	r3, [r7, #0]
 8106f30:	2b00      	cmp	r3, #0
 8106f32:	d104      	bne.n	8106f3e <HAL_TIM_IC_Start+0xbe>
 8106f34:	687b      	ldr	r3, [r7, #4]
 8106f36:	2202      	movs	r2, #2
 8106f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106f3c:	e023      	b.n	8106f86 <HAL_TIM_IC_Start+0x106>
 8106f3e:	683b      	ldr	r3, [r7, #0]
 8106f40:	2b04      	cmp	r3, #4
 8106f42:	d104      	bne.n	8106f4e <HAL_TIM_IC_Start+0xce>
 8106f44:	687b      	ldr	r3, [r7, #4]
 8106f46:	2202      	movs	r2, #2
 8106f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8106f4c:	e01b      	b.n	8106f86 <HAL_TIM_IC_Start+0x106>
 8106f4e:	683b      	ldr	r3, [r7, #0]
 8106f50:	2b08      	cmp	r3, #8
 8106f52:	d104      	bne.n	8106f5e <HAL_TIM_IC_Start+0xde>
 8106f54:	687b      	ldr	r3, [r7, #4]
 8106f56:	2202      	movs	r2, #2
 8106f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106f5c:	e013      	b.n	8106f86 <HAL_TIM_IC_Start+0x106>
 8106f5e:	683b      	ldr	r3, [r7, #0]
 8106f60:	2b0c      	cmp	r3, #12
 8106f62:	d104      	bne.n	8106f6e <HAL_TIM_IC_Start+0xee>
 8106f64:	687b      	ldr	r3, [r7, #4]
 8106f66:	2202      	movs	r2, #2
 8106f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8106f6c:	e00b      	b.n	8106f86 <HAL_TIM_IC_Start+0x106>
 8106f6e:	683b      	ldr	r3, [r7, #0]
 8106f70:	2b10      	cmp	r3, #16
 8106f72:	d104      	bne.n	8106f7e <HAL_TIM_IC_Start+0xfe>
 8106f74:	687b      	ldr	r3, [r7, #4]
 8106f76:	2202      	movs	r2, #2
 8106f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106f7c:	e003      	b.n	8106f86 <HAL_TIM_IC_Start+0x106>
 8106f7e:	687b      	ldr	r3, [r7, #4]
 8106f80:	2202      	movs	r2, #2
 8106f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8106f86:	683b      	ldr	r3, [r7, #0]
 8106f88:	2b00      	cmp	r3, #0
 8106f8a:	d104      	bne.n	8106f96 <HAL_TIM_IC_Start+0x116>
 8106f8c:	687b      	ldr	r3, [r7, #4]
 8106f8e:	2202      	movs	r2, #2
 8106f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106f94:	e013      	b.n	8106fbe <HAL_TIM_IC_Start+0x13e>
 8106f96:	683b      	ldr	r3, [r7, #0]
 8106f98:	2b04      	cmp	r3, #4
 8106f9a:	d104      	bne.n	8106fa6 <HAL_TIM_IC_Start+0x126>
 8106f9c:	687b      	ldr	r3, [r7, #4]
 8106f9e:	2202      	movs	r2, #2
 8106fa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8106fa4:	e00b      	b.n	8106fbe <HAL_TIM_IC_Start+0x13e>
 8106fa6:	683b      	ldr	r3, [r7, #0]
 8106fa8:	2b08      	cmp	r3, #8
 8106faa:	d104      	bne.n	8106fb6 <HAL_TIM_IC_Start+0x136>
 8106fac:	687b      	ldr	r3, [r7, #4]
 8106fae:	2202      	movs	r2, #2
 8106fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106fb4:	e003      	b.n	8106fbe <HAL_TIM_IC_Start+0x13e>
 8106fb6:	687b      	ldr	r3, [r7, #4]
 8106fb8:	2202      	movs	r2, #2
 8106fba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8106fbe:	687b      	ldr	r3, [r7, #4]
 8106fc0:	681b      	ldr	r3, [r3, #0]
 8106fc2:	2201      	movs	r2, #1
 8106fc4:	6839      	ldr	r1, [r7, #0]
 8106fc6:	4618      	mov	r0, r3
 8106fc8:	f001 fc2e 	bl	8108828 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106fcc:	687b      	ldr	r3, [r7, #4]
 8106fce:	681b      	ldr	r3, [r3, #0]
 8106fd0:	4a25      	ldr	r2, [pc, #148]	; (8107068 <HAL_TIM_IC_Start+0x1e8>)
 8106fd2:	4293      	cmp	r3, r2
 8106fd4:	d022      	beq.n	810701c <HAL_TIM_IC_Start+0x19c>
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	681b      	ldr	r3, [r3, #0]
 8106fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106fde:	d01d      	beq.n	810701c <HAL_TIM_IC_Start+0x19c>
 8106fe0:	687b      	ldr	r3, [r7, #4]
 8106fe2:	681b      	ldr	r3, [r3, #0]
 8106fe4:	4a21      	ldr	r2, [pc, #132]	; (810706c <HAL_TIM_IC_Start+0x1ec>)
 8106fe6:	4293      	cmp	r3, r2
 8106fe8:	d018      	beq.n	810701c <HAL_TIM_IC_Start+0x19c>
 8106fea:	687b      	ldr	r3, [r7, #4]
 8106fec:	681b      	ldr	r3, [r3, #0]
 8106fee:	4a20      	ldr	r2, [pc, #128]	; (8107070 <HAL_TIM_IC_Start+0x1f0>)
 8106ff0:	4293      	cmp	r3, r2
 8106ff2:	d013      	beq.n	810701c <HAL_TIM_IC_Start+0x19c>
 8106ff4:	687b      	ldr	r3, [r7, #4]
 8106ff6:	681b      	ldr	r3, [r3, #0]
 8106ff8:	4a1e      	ldr	r2, [pc, #120]	; (8107074 <HAL_TIM_IC_Start+0x1f4>)
 8106ffa:	4293      	cmp	r3, r2
 8106ffc:	d00e      	beq.n	810701c <HAL_TIM_IC_Start+0x19c>
 8106ffe:	687b      	ldr	r3, [r7, #4]
 8107000:	681b      	ldr	r3, [r3, #0]
 8107002:	4a1d      	ldr	r2, [pc, #116]	; (8107078 <HAL_TIM_IC_Start+0x1f8>)
 8107004:	4293      	cmp	r3, r2
 8107006:	d009      	beq.n	810701c <HAL_TIM_IC_Start+0x19c>
 8107008:	687b      	ldr	r3, [r7, #4]
 810700a:	681b      	ldr	r3, [r3, #0]
 810700c:	4a1b      	ldr	r2, [pc, #108]	; (810707c <HAL_TIM_IC_Start+0x1fc>)
 810700e:	4293      	cmp	r3, r2
 8107010:	d004      	beq.n	810701c <HAL_TIM_IC_Start+0x19c>
 8107012:	687b      	ldr	r3, [r7, #4]
 8107014:	681b      	ldr	r3, [r3, #0]
 8107016:	4a1a      	ldr	r2, [pc, #104]	; (8107080 <HAL_TIM_IC_Start+0x200>)
 8107018:	4293      	cmp	r3, r2
 810701a:	d115      	bne.n	8107048 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 810701c:	687b      	ldr	r3, [r7, #4]
 810701e:	681b      	ldr	r3, [r3, #0]
 8107020:	689a      	ldr	r2, [r3, #8]
 8107022:	4b18      	ldr	r3, [pc, #96]	; (8107084 <HAL_TIM_IC_Start+0x204>)
 8107024:	4013      	ands	r3, r2
 8107026:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107028:	68bb      	ldr	r3, [r7, #8]
 810702a:	2b06      	cmp	r3, #6
 810702c:	d015      	beq.n	810705a <HAL_TIM_IC_Start+0x1da>
 810702e:	68bb      	ldr	r3, [r7, #8]
 8107030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8107034:	d011      	beq.n	810705a <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8107036:	687b      	ldr	r3, [r7, #4]
 8107038:	681b      	ldr	r3, [r3, #0]
 810703a:	681a      	ldr	r2, [r3, #0]
 810703c:	687b      	ldr	r3, [r7, #4]
 810703e:	681b      	ldr	r3, [r3, #0]
 8107040:	f042 0201 	orr.w	r2, r2, #1
 8107044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107046:	e008      	b.n	810705a <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107048:	687b      	ldr	r3, [r7, #4]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	681a      	ldr	r2, [r3, #0]
 810704e:	687b      	ldr	r3, [r7, #4]
 8107050:	681b      	ldr	r3, [r3, #0]
 8107052:	f042 0201 	orr.w	r2, r2, #1
 8107056:	601a      	str	r2, [r3, #0]
 8107058:	e000      	b.n	810705c <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810705a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 810705c:	2300      	movs	r3, #0
}
 810705e:	4618      	mov	r0, r3
 8107060:	3710      	adds	r7, #16
 8107062:	46bd      	mov	sp, r7
 8107064:	bd80      	pop	{r7, pc}
 8107066:	bf00      	nop
 8107068:	40010000 	.word	0x40010000
 810706c:	40000400 	.word	0x40000400
 8107070:	40000800 	.word	0x40000800
 8107074:	40000c00 	.word	0x40000c00
 8107078:	40010400 	.word	0x40010400
 810707c:	40001800 	.word	0x40001800
 8107080:	40014000 	.word	0x40014000
 8107084:	00010007 	.word	0x00010007

08107088 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8107088:	b580      	push	{r7, lr}
 810708a:	b084      	sub	sp, #16
 810708c:	af00      	add	r7, sp, #0
 810708e:	6078      	str	r0, [r7, #4]
 8107090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8107092:	2300      	movs	r3, #0
 8107094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8107096:	683b      	ldr	r3, [r7, #0]
 8107098:	2b00      	cmp	r3, #0
 810709a:	d104      	bne.n	81070a6 <HAL_TIM_IC_Start_IT+0x1e>
 810709c:	687b      	ldr	r3, [r7, #4]
 810709e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 81070a2:	b2db      	uxtb	r3, r3
 81070a4:	e023      	b.n	81070ee <HAL_TIM_IC_Start_IT+0x66>
 81070a6:	683b      	ldr	r3, [r7, #0]
 81070a8:	2b04      	cmp	r3, #4
 81070aa:	d104      	bne.n	81070b6 <HAL_TIM_IC_Start_IT+0x2e>
 81070ac:	687b      	ldr	r3, [r7, #4]
 81070ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 81070b2:	b2db      	uxtb	r3, r3
 81070b4:	e01b      	b.n	81070ee <HAL_TIM_IC_Start_IT+0x66>
 81070b6:	683b      	ldr	r3, [r7, #0]
 81070b8:	2b08      	cmp	r3, #8
 81070ba:	d104      	bne.n	81070c6 <HAL_TIM_IC_Start_IT+0x3e>
 81070bc:	687b      	ldr	r3, [r7, #4]
 81070be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81070c2:	b2db      	uxtb	r3, r3
 81070c4:	e013      	b.n	81070ee <HAL_TIM_IC_Start_IT+0x66>
 81070c6:	683b      	ldr	r3, [r7, #0]
 81070c8:	2b0c      	cmp	r3, #12
 81070ca:	d104      	bne.n	81070d6 <HAL_TIM_IC_Start_IT+0x4e>
 81070cc:	687b      	ldr	r3, [r7, #4]
 81070ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81070d2:	b2db      	uxtb	r3, r3
 81070d4:	e00b      	b.n	81070ee <HAL_TIM_IC_Start_IT+0x66>
 81070d6:	683b      	ldr	r3, [r7, #0]
 81070d8:	2b10      	cmp	r3, #16
 81070da:	d104      	bne.n	81070e6 <HAL_TIM_IC_Start_IT+0x5e>
 81070dc:	687b      	ldr	r3, [r7, #4]
 81070de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 81070e2:	b2db      	uxtb	r3, r3
 81070e4:	e003      	b.n	81070ee <HAL_TIM_IC_Start_IT+0x66>
 81070e6:	687b      	ldr	r3, [r7, #4]
 81070e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 81070ec:	b2db      	uxtb	r3, r3
 81070ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 81070f0:	683b      	ldr	r3, [r7, #0]
 81070f2:	2b00      	cmp	r3, #0
 81070f4:	d104      	bne.n	8107100 <HAL_TIM_IC_Start_IT+0x78>
 81070f6:	687b      	ldr	r3, [r7, #4]
 81070f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 81070fc:	b2db      	uxtb	r3, r3
 81070fe:	e013      	b.n	8107128 <HAL_TIM_IC_Start_IT+0xa0>
 8107100:	683b      	ldr	r3, [r7, #0]
 8107102:	2b04      	cmp	r3, #4
 8107104:	d104      	bne.n	8107110 <HAL_TIM_IC_Start_IT+0x88>
 8107106:	687b      	ldr	r3, [r7, #4]
 8107108:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 810710c:	b2db      	uxtb	r3, r3
 810710e:	e00b      	b.n	8107128 <HAL_TIM_IC_Start_IT+0xa0>
 8107110:	683b      	ldr	r3, [r7, #0]
 8107112:	2b08      	cmp	r3, #8
 8107114:	d104      	bne.n	8107120 <HAL_TIM_IC_Start_IT+0x98>
 8107116:	687b      	ldr	r3, [r7, #4]
 8107118:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 810711c:	b2db      	uxtb	r3, r3
 810711e:	e003      	b.n	8107128 <HAL_TIM_IC_Start_IT+0xa0>
 8107120:	687b      	ldr	r3, [r7, #4]
 8107122:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8107126:	b2db      	uxtb	r3, r3
 8107128:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 810712a:	7bbb      	ldrb	r3, [r7, #14]
 810712c:	2b01      	cmp	r3, #1
 810712e:	d102      	bne.n	8107136 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8107130:	7b7b      	ldrb	r3, [r7, #13]
 8107132:	2b01      	cmp	r3, #1
 8107134:	d001      	beq.n	810713a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8107136:	2301      	movs	r3, #1
 8107138:	e0e2      	b.n	8107300 <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810713a:	683b      	ldr	r3, [r7, #0]
 810713c:	2b00      	cmp	r3, #0
 810713e:	d104      	bne.n	810714a <HAL_TIM_IC_Start_IT+0xc2>
 8107140:	687b      	ldr	r3, [r7, #4]
 8107142:	2202      	movs	r2, #2
 8107144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8107148:	e023      	b.n	8107192 <HAL_TIM_IC_Start_IT+0x10a>
 810714a:	683b      	ldr	r3, [r7, #0]
 810714c:	2b04      	cmp	r3, #4
 810714e:	d104      	bne.n	810715a <HAL_TIM_IC_Start_IT+0xd2>
 8107150:	687b      	ldr	r3, [r7, #4]
 8107152:	2202      	movs	r2, #2
 8107154:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8107158:	e01b      	b.n	8107192 <HAL_TIM_IC_Start_IT+0x10a>
 810715a:	683b      	ldr	r3, [r7, #0]
 810715c:	2b08      	cmp	r3, #8
 810715e:	d104      	bne.n	810716a <HAL_TIM_IC_Start_IT+0xe2>
 8107160:	687b      	ldr	r3, [r7, #4]
 8107162:	2202      	movs	r2, #2
 8107164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8107168:	e013      	b.n	8107192 <HAL_TIM_IC_Start_IT+0x10a>
 810716a:	683b      	ldr	r3, [r7, #0]
 810716c:	2b0c      	cmp	r3, #12
 810716e:	d104      	bne.n	810717a <HAL_TIM_IC_Start_IT+0xf2>
 8107170:	687b      	ldr	r3, [r7, #4]
 8107172:	2202      	movs	r2, #2
 8107174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8107178:	e00b      	b.n	8107192 <HAL_TIM_IC_Start_IT+0x10a>
 810717a:	683b      	ldr	r3, [r7, #0]
 810717c:	2b10      	cmp	r3, #16
 810717e:	d104      	bne.n	810718a <HAL_TIM_IC_Start_IT+0x102>
 8107180:	687b      	ldr	r3, [r7, #4]
 8107182:	2202      	movs	r2, #2
 8107184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8107188:	e003      	b.n	8107192 <HAL_TIM_IC_Start_IT+0x10a>
 810718a:	687b      	ldr	r3, [r7, #4]
 810718c:	2202      	movs	r2, #2
 810718e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8107192:	683b      	ldr	r3, [r7, #0]
 8107194:	2b00      	cmp	r3, #0
 8107196:	d104      	bne.n	81071a2 <HAL_TIM_IC_Start_IT+0x11a>
 8107198:	687b      	ldr	r3, [r7, #4]
 810719a:	2202      	movs	r2, #2
 810719c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81071a0:	e013      	b.n	81071ca <HAL_TIM_IC_Start_IT+0x142>
 81071a2:	683b      	ldr	r3, [r7, #0]
 81071a4:	2b04      	cmp	r3, #4
 81071a6:	d104      	bne.n	81071b2 <HAL_TIM_IC_Start_IT+0x12a>
 81071a8:	687b      	ldr	r3, [r7, #4]
 81071aa:	2202      	movs	r2, #2
 81071ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81071b0:	e00b      	b.n	81071ca <HAL_TIM_IC_Start_IT+0x142>
 81071b2:	683b      	ldr	r3, [r7, #0]
 81071b4:	2b08      	cmp	r3, #8
 81071b6:	d104      	bne.n	81071c2 <HAL_TIM_IC_Start_IT+0x13a>
 81071b8:	687b      	ldr	r3, [r7, #4]
 81071ba:	2202      	movs	r2, #2
 81071bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81071c0:	e003      	b.n	81071ca <HAL_TIM_IC_Start_IT+0x142>
 81071c2:	687b      	ldr	r3, [r7, #4]
 81071c4:	2202      	movs	r2, #2
 81071c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 81071ca:	683b      	ldr	r3, [r7, #0]
 81071cc:	2b0c      	cmp	r3, #12
 81071ce:	d841      	bhi.n	8107254 <HAL_TIM_IC_Start_IT+0x1cc>
 81071d0:	a201      	add	r2, pc, #4	; (adr r2, 81071d8 <HAL_TIM_IC_Start_IT+0x150>)
 81071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071d6:	bf00      	nop
 81071d8:	0810720d 	.word	0x0810720d
 81071dc:	08107255 	.word	0x08107255
 81071e0:	08107255 	.word	0x08107255
 81071e4:	08107255 	.word	0x08107255
 81071e8:	0810721f 	.word	0x0810721f
 81071ec:	08107255 	.word	0x08107255
 81071f0:	08107255 	.word	0x08107255
 81071f4:	08107255 	.word	0x08107255
 81071f8:	08107231 	.word	0x08107231
 81071fc:	08107255 	.word	0x08107255
 8107200:	08107255 	.word	0x08107255
 8107204:	08107255 	.word	0x08107255
 8107208:	08107243 	.word	0x08107243
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 810720c:	687b      	ldr	r3, [r7, #4]
 810720e:	681b      	ldr	r3, [r3, #0]
 8107210:	68da      	ldr	r2, [r3, #12]
 8107212:	687b      	ldr	r3, [r7, #4]
 8107214:	681b      	ldr	r3, [r3, #0]
 8107216:	f042 0202 	orr.w	r2, r2, #2
 810721a:	60da      	str	r2, [r3, #12]
      break;
 810721c:	e01d      	b.n	810725a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 810721e:	687b      	ldr	r3, [r7, #4]
 8107220:	681b      	ldr	r3, [r3, #0]
 8107222:	68da      	ldr	r2, [r3, #12]
 8107224:	687b      	ldr	r3, [r7, #4]
 8107226:	681b      	ldr	r3, [r3, #0]
 8107228:	f042 0204 	orr.w	r2, r2, #4
 810722c:	60da      	str	r2, [r3, #12]
      break;
 810722e:	e014      	b.n	810725a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8107230:	687b      	ldr	r3, [r7, #4]
 8107232:	681b      	ldr	r3, [r3, #0]
 8107234:	68da      	ldr	r2, [r3, #12]
 8107236:	687b      	ldr	r3, [r7, #4]
 8107238:	681b      	ldr	r3, [r3, #0]
 810723a:	f042 0208 	orr.w	r2, r2, #8
 810723e:	60da      	str	r2, [r3, #12]
      break;
 8107240:	e00b      	b.n	810725a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8107242:	687b      	ldr	r3, [r7, #4]
 8107244:	681b      	ldr	r3, [r3, #0]
 8107246:	68da      	ldr	r2, [r3, #12]
 8107248:	687b      	ldr	r3, [r7, #4]
 810724a:	681b      	ldr	r3, [r3, #0]
 810724c:	f042 0210 	orr.w	r2, r2, #16
 8107250:	60da      	str	r2, [r3, #12]
      break;
 8107252:	e002      	b.n	810725a <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8107254:	2301      	movs	r3, #1
 8107256:	73fb      	strb	r3, [r7, #15]
      break;
 8107258:	bf00      	nop
  }

  if (status == HAL_OK)
 810725a:	7bfb      	ldrb	r3, [r7, #15]
 810725c:	2b00      	cmp	r3, #0
 810725e:	d14e      	bne.n	81072fe <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8107260:	687b      	ldr	r3, [r7, #4]
 8107262:	681b      	ldr	r3, [r3, #0]
 8107264:	2201      	movs	r2, #1
 8107266:	6839      	ldr	r1, [r7, #0]
 8107268:	4618      	mov	r0, r3
 810726a:	f001 fadd 	bl	8108828 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810726e:	687b      	ldr	r3, [r7, #4]
 8107270:	681b      	ldr	r3, [r3, #0]
 8107272:	4a25      	ldr	r2, [pc, #148]	; (8107308 <HAL_TIM_IC_Start_IT+0x280>)
 8107274:	4293      	cmp	r3, r2
 8107276:	d022      	beq.n	81072be <HAL_TIM_IC_Start_IT+0x236>
 8107278:	687b      	ldr	r3, [r7, #4]
 810727a:	681b      	ldr	r3, [r3, #0]
 810727c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107280:	d01d      	beq.n	81072be <HAL_TIM_IC_Start_IT+0x236>
 8107282:	687b      	ldr	r3, [r7, #4]
 8107284:	681b      	ldr	r3, [r3, #0]
 8107286:	4a21      	ldr	r2, [pc, #132]	; (810730c <HAL_TIM_IC_Start_IT+0x284>)
 8107288:	4293      	cmp	r3, r2
 810728a:	d018      	beq.n	81072be <HAL_TIM_IC_Start_IT+0x236>
 810728c:	687b      	ldr	r3, [r7, #4]
 810728e:	681b      	ldr	r3, [r3, #0]
 8107290:	4a1f      	ldr	r2, [pc, #124]	; (8107310 <HAL_TIM_IC_Start_IT+0x288>)
 8107292:	4293      	cmp	r3, r2
 8107294:	d013      	beq.n	81072be <HAL_TIM_IC_Start_IT+0x236>
 8107296:	687b      	ldr	r3, [r7, #4]
 8107298:	681b      	ldr	r3, [r3, #0]
 810729a:	4a1e      	ldr	r2, [pc, #120]	; (8107314 <HAL_TIM_IC_Start_IT+0x28c>)
 810729c:	4293      	cmp	r3, r2
 810729e:	d00e      	beq.n	81072be <HAL_TIM_IC_Start_IT+0x236>
 81072a0:	687b      	ldr	r3, [r7, #4]
 81072a2:	681b      	ldr	r3, [r3, #0]
 81072a4:	4a1c      	ldr	r2, [pc, #112]	; (8107318 <HAL_TIM_IC_Start_IT+0x290>)
 81072a6:	4293      	cmp	r3, r2
 81072a8:	d009      	beq.n	81072be <HAL_TIM_IC_Start_IT+0x236>
 81072aa:	687b      	ldr	r3, [r7, #4]
 81072ac:	681b      	ldr	r3, [r3, #0]
 81072ae:	4a1b      	ldr	r2, [pc, #108]	; (810731c <HAL_TIM_IC_Start_IT+0x294>)
 81072b0:	4293      	cmp	r3, r2
 81072b2:	d004      	beq.n	81072be <HAL_TIM_IC_Start_IT+0x236>
 81072b4:	687b      	ldr	r3, [r7, #4]
 81072b6:	681b      	ldr	r3, [r3, #0]
 81072b8:	4a19      	ldr	r2, [pc, #100]	; (8107320 <HAL_TIM_IC_Start_IT+0x298>)
 81072ba:	4293      	cmp	r3, r2
 81072bc:	d115      	bne.n	81072ea <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81072be:	687b      	ldr	r3, [r7, #4]
 81072c0:	681b      	ldr	r3, [r3, #0]
 81072c2:	689a      	ldr	r2, [r3, #8]
 81072c4:	4b17      	ldr	r3, [pc, #92]	; (8107324 <HAL_TIM_IC_Start_IT+0x29c>)
 81072c6:	4013      	ands	r3, r2
 81072c8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81072ca:	68bb      	ldr	r3, [r7, #8]
 81072cc:	2b06      	cmp	r3, #6
 81072ce:	d015      	beq.n	81072fc <HAL_TIM_IC_Start_IT+0x274>
 81072d0:	68bb      	ldr	r3, [r7, #8]
 81072d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81072d6:	d011      	beq.n	81072fc <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 81072d8:	687b      	ldr	r3, [r7, #4]
 81072da:	681b      	ldr	r3, [r3, #0]
 81072dc:	681a      	ldr	r2, [r3, #0]
 81072de:	687b      	ldr	r3, [r7, #4]
 81072e0:	681b      	ldr	r3, [r3, #0]
 81072e2:	f042 0201 	orr.w	r2, r2, #1
 81072e6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81072e8:	e008      	b.n	81072fc <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 81072ea:	687b      	ldr	r3, [r7, #4]
 81072ec:	681b      	ldr	r3, [r3, #0]
 81072ee:	681a      	ldr	r2, [r3, #0]
 81072f0:	687b      	ldr	r3, [r7, #4]
 81072f2:	681b      	ldr	r3, [r3, #0]
 81072f4:	f042 0201 	orr.w	r2, r2, #1
 81072f8:	601a      	str	r2, [r3, #0]
 81072fa:	e000      	b.n	81072fe <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81072fc:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 81072fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8107300:	4618      	mov	r0, r3
 8107302:	3710      	adds	r7, #16
 8107304:	46bd      	mov	sp, r7
 8107306:	bd80      	pop	{r7, pc}
 8107308:	40010000 	.word	0x40010000
 810730c:	40000400 	.word	0x40000400
 8107310:	40000800 	.word	0x40000800
 8107314:	40000c00 	.word	0x40000c00
 8107318:	40010400 	.word	0x40010400
 810731c:	40001800 	.word	0x40001800
 8107320:	40014000 	.word	0x40014000
 8107324:	00010007 	.word	0x00010007

08107328 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8107328:	b580      	push	{r7, lr}
 810732a:	b084      	sub	sp, #16
 810732c:	af00      	add	r7, sp, #0
 810732e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8107330:	687b      	ldr	r3, [r7, #4]
 8107332:	681b      	ldr	r3, [r3, #0]
 8107334:	68db      	ldr	r3, [r3, #12]
 8107336:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8107338:	687b      	ldr	r3, [r7, #4]
 810733a:	681b      	ldr	r3, [r3, #0]
 810733c:	691b      	ldr	r3, [r3, #16]
 810733e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8107340:	68bb      	ldr	r3, [r7, #8]
 8107342:	f003 0302 	and.w	r3, r3, #2
 8107346:	2b00      	cmp	r3, #0
 8107348:	d020      	beq.n	810738c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 810734a:	68fb      	ldr	r3, [r7, #12]
 810734c:	f003 0302 	and.w	r3, r3, #2
 8107350:	2b00      	cmp	r3, #0
 8107352:	d01b      	beq.n	810738c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8107354:	687b      	ldr	r3, [r7, #4]
 8107356:	681b      	ldr	r3, [r3, #0]
 8107358:	f06f 0202 	mvn.w	r2, #2
 810735c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810735e:	687b      	ldr	r3, [r7, #4]
 8107360:	2201      	movs	r2, #1
 8107362:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8107364:	687b      	ldr	r3, [r7, #4]
 8107366:	681b      	ldr	r3, [r3, #0]
 8107368:	699b      	ldr	r3, [r3, #24]
 810736a:	f003 0303 	and.w	r3, r3, #3
 810736e:	2b00      	cmp	r3, #0
 8107370:	d003      	beq.n	810737a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8107372:	6878      	ldr	r0, [r7, #4]
 8107374:	f7fb fa74 	bl	8102860 <HAL_TIM_IC_CaptureCallback>
 8107378:	e005      	b.n	8107386 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810737a:	6878      	ldr	r0, [r7, #4]
 810737c:	f000 fc0a 	bl	8107b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107380:	6878      	ldr	r0, [r7, #4]
 8107382:	f000 fc11 	bl	8107ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8107386:	687b      	ldr	r3, [r7, #4]
 8107388:	2200      	movs	r2, #0
 810738a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 810738c:	68bb      	ldr	r3, [r7, #8]
 810738e:	f003 0304 	and.w	r3, r3, #4
 8107392:	2b00      	cmp	r3, #0
 8107394:	d020      	beq.n	81073d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8107396:	68fb      	ldr	r3, [r7, #12]
 8107398:	f003 0304 	and.w	r3, r3, #4
 810739c:	2b00      	cmp	r3, #0
 810739e:	d01b      	beq.n	81073d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 81073a0:	687b      	ldr	r3, [r7, #4]
 81073a2:	681b      	ldr	r3, [r3, #0]
 81073a4:	f06f 0204 	mvn.w	r2, #4
 81073a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 81073aa:	687b      	ldr	r3, [r7, #4]
 81073ac:	2202      	movs	r2, #2
 81073ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 81073b0:	687b      	ldr	r3, [r7, #4]
 81073b2:	681b      	ldr	r3, [r3, #0]
 81073b4:	699b      	ldr	r3, [r3, #24]
 81073b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81073ba:	2b00      	cmp	r3, #0
 81073bc:	d003      	beq.n	81073c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81073be:	6878      	ldr	r0, [r7, #4]
 81073c0:	f7fb fa4e 	bl	8102860 <HAL_TIM_IC_CaptureCallback>
 81073c4:	e005      	b.n	81073d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81073c6:	6878      	ldr	r0, [r7, #4]
 81073c8:	f000 fbe4 	bl	8107b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81073cc:	6878      	ldr	r0, [r7, #4]
 81073ce:	f000 fbeb 	bl	8107ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81073d2:	687b      	ldr	r3, [r7, #4]
 81073d4:	2200      	movs	r2, #0
 81073d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 81073d8:	68bb      	ldr	r3, [r7, #8]
 81073da:	f003 0308 	and.w	r3, r3, #8
 81073de:	2b00      	cmp	r3, #0
 81073e0:	d020      	beq.n	8107424 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 81073e2:	68fb      	ldr	r3, [r7, #12]
 81073e4:	f003 0308 	and.w	r3, r3, #8
 81073e8:	2b00      	cmp	r3, #0
 81073ea:	d01b      	beq.n	8107424 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 81073ec:	687b      	ldr	r3, [r7, #4]
 81073ee:	681b      	ldr	r3, [r3, #0]
 81073f0:	f06f 0208 	mvn.w	r2, #8
 81073f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81073f6:	687b      	ldr	r3, [r7, #4]
 81073f8:	2204      	movs	r2, #4
 81073fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81073fc:	687b      	ldr	r3, [r7, #4]
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	69db      	ldr	r3, [r3, #28]
 8107402:	f003 0303 	and.w	r3, r3, #3
 8107406:	2b00      	cmp	r3, #0
 8107408:	d003      	beq.n	8107412 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810740a:	6878      	ldr	r0, [r7, #4]
 810740c:	f7fb fa28 	bl	8102860 <HAL_TIM_IC_CaptureCallback>
 8107410:	e005      	b.n	810741e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8107412:	6878      	ldr	r0, [r7, #4]
 8107414:	f000 fbbe 	bl	8107b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107418:	6878      	ldr	r0, [r7, #4]
 810741a:	f000 fbc5 	bl	8107ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810741e:	687b      	ldr	r3, [r7, #4]
 8107420:	2200      	movs	r2, #0
 8107422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8107424:	68bb      	ldr	r3, [r7, #8]
 8107426:	f003 0310 	and.w	r3, r3, #16
 810742a:	2b00      	cmp	r3, #0
 810742c:	d020      	beq.n	8107470 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 810742e:	68fb      	ldr	r3, [r7, #12]
 8107430:	f003 0310 	and.w	r3, r3, #16
 8107434:	2b00      	cmp	r3, #0
 8107436:	d01b      	beq.n	8107470 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8107438:	687b      	ldr	r3, [r7, #4]
 810743a:	681b      	ldr	r3, [r3, #0]
 810743c:	f06f 0210 	mvn.w	r2, #16
 8107440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8107442:	687b      	ldr	r3, [r7, #4]
 8107444:	2208      	movs	r2, #8
 8107446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8107448:	687b      	ldr	r3, [r7, #4]
 810744a:	681b      	ldr	r3, [r3, #0]
 810744c:	69db      	ldr	r3, [r3, #28]
 810744e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8107452:	2b00      	cmp	r3, #0
 8107454:	d003      	beq.n	810745e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8107456:	6878      	ldr	r0, [r7, #4]
 8107458:	f7fb fa02 	bl	8102860 <HAL_TIM_IC_CaptureCallback>
 810745c:	e005      	b.n	810746a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810745e:	6878      	ldr	r0, [r7, #4]
 8107460:	f000 fb98 	bl	8107b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8107464:	6878      	ldr	r0, [r7, #4]
 8107466:	f000 fb9f 	bl	8107ba8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810746a:	687b      	ldr	r3, [r7, #4]
 810746c:	2200      	movs	r2, #0
 810746e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8107470:	68bb      	ldr	r3, [r7, #8]
 8107472:	f003 0301 	and.w	r3, r3, #1
 8107476:	2b00      	cmp	r3, #0
 8107478:	d00c      	beq.n	8107494 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 810747a:	68fb      	ldr	r3, [r7, #12]
 810747c:	f003 0301 	and.w	r3, r3, #1
 8107480:	2b00      	cmp	r3, #0
 8107482:	d007      	beq.n	8107494 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8107484:	687b      	ldr	r3, [r7, #4]
 8107486:	681b      	ldr	r3, [r3, #0]
 8107488:	f06f 0201 	mvn.w	r2, #1
 810748c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810748e:	6878      	ldr	r0, [r7, #4]
 8107490:	f7fb f9bc 	bl	810280c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8107494:	68bb      	ldr	r3, [r7, #8]
 8107496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810749a:	2b00      	cmp	r3, #0
 810749c:	d104      	bne.n	81074a8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810749e:	68bb      	ldr	r3, [r7, #8]
 81074a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 81074a4:	2b00      	cmp	r3, #0
 81074a6:	d00c      	beq.n	81074c2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81074a8:	68fb      	ldr	r3, [r7, #12]
 81074aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81074ae:	2b00      	cmp	r3, #0
 81074b0:	d007      	beq.n	81074c2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 81074b2:	687b      	ldr	r3, [r7, #4]
 81074b4:	681b      	ldr	r3, [r3, #0]
 81074b6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 81074ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81074bc:	6878      	ldr	r0, [r7, #4]
 81074be:	f001 fa71 	bl	81089a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 81074c2:	68bb      	ldr	r3, [r7, #8]
 81074c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81074c8:	2b00      	cmp	r3, #0
 81074ca:	d00c      	beq.n	81074e6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 81074cc:	68fb      	ldr	r3, [r7, #12]
 81074ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81074d2:	2b00      	cmp	r3, #0
 81074d4:	d007      	beq.n	81074e6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81074d6:	687b      	ldr	r3, [r7, #4]
 81074d8:	681b      	ldr	r3, [r3, #0]
 81074da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81074de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81074e0:	6878      	ldr	r0, [r7, #4]
 81074e2:	f001 fa69 	bl	81089b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 81074e6:	68bb      	ldr	r3, [r7, #8]
 81074e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81074ec:	2b00      	cmp	r3, #0
 81074ee:	d00c      	beq.n	810750a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 81074f0:	68fb      	ldr	r3, [r7, #12]
 81074f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81074f6:	2b00      	cmp	r3, #0
 81074f8:	d007      	beq.n	810750a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 81074fa:	687b      	ldr	r3, [r7, #4]
 81074fc:	681b      	ldr	r3, [r3, #0]
 81074fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8107502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8107504:	6878      	ldr	r0, [r7, #4]
 8107506:	f000 fb59 	bl	8107bbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 810750a:	68bb      	ldr	r3, [r7, #8]
 810750c:	f003 0320 	and.w	r3, r3, #32
 8107510:	2b00      	cmp	r3, #0
 8107512:	d00c      	beq.n	810752e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8107514:	68fb      	ldr	r3, [r7, #12]
 8107516:	f003 0320 	and.w	r3, r3, #32
 810751a:	2b00      	cmp	r3, #0
 810751c:	d007      	beq.n	810752e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 810751e:	687b      	ldr	r3, [r7, #4]
 8107520:	681b      	ldr	r3, [r3, #0]
 8107522:	f06f 0220 	mvn.w	r2, #32
 8107526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8107528:	6878      	ldr	r0, [r7, #4]
 810752a:	f001 fa31 	bl	8108990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810752e:	bf00      	nop
 8107530:	3710      	adds	r7, #16
 8107532:	46bd      	mov	sp, r7
 8107534:	bd80      	pop	{r7, pc}

08107536 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8107536:	b580      	push	{r7, lr}
 8107538:	b086      	sub	sp, #24
 810753a:	af00      	add	r7, sp, #0
 810753c:	60f8      	str	r0, [r7, #12]
 810753e:	60b9      	str	r1, [r7, #8]
 8107540:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8107542:	2300      	movs	r3, #0
 8107544:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107546:	68fb      	ldr	r3, [r7, #12]
 8107548:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 810754c:	2b01      	cmp	r3, #1
 810754e:	d101      	bne.n	8107554 <HAL_TIM_IC_ConfigChannel+0x1e>
 8107550:	2302      	movs	r3, #2
 8107552:	e088      	b.n	8107666 <HAL_TIM_IC_ConfigChannel+0x130>
 8107554:	68fb      	ldr	r3, [r7, #12]
 8107556:	2201      	movs	r2, #1
 8107558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 810755c:	687b      	ldr	r3, [r7, #4]
 810755e:	2b00      	cmp	r3, #0
 8107560:	d11b      	bne.n	810759a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8107562:	68fb      	ldr	r3, [r7, #12]
 8107564:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8107566:	68bb      	ldr	r3, [r7, #8]
 8107568:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810756a:	68bb      	ldr	r3, [r7, #8]
 810756c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810756e:	68bb      	ldr	r3, [r7, #8]
 8107570:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8107572:	f000 ff93 	bl	810849c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8107576:	68fb      	ldr	r3, [r7, #12]
 8107578:	681b      	ldr	r3, [r3, #0]
 810757a:	699a      	ldr	r2, [r3, #24]
 810757c:	68fb      	ldr	r3, [r7, #12]
 810757e:	681b      	ldr	r3, [r3, #0]
 8107580:	f022 020c 	bic.w	r2, r2, #12
 8107584:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8107586:	68fb      	ldr	r3, [r7, #12]
 8107588:	681b      	ldr	r3, [r3, #0]
 810758a:	6999      	ldr	r1, [r3, #24]
 810758c:	68bb      	ldr	r3, [r7, #8]
 810758e:	689a      	ldr	r2, [r3, #8]
 8107590:	68fb      	ldr	r3, [r7, #12]
 8107592:	681b      	ldr	r3, [r3, #0]
 8107594:	430a      	orrs	r2, r1
 8107596:	619a      	str	r2, [r3, #24]
 8107598:	e060      	b.n	810765c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 810759a:	687b      	ldr	r3, [r7, #4]
 810759c:	2b04      	cmp	r3, #4
 810759e:	d11c      	bne.n	81075da <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 81075a0:	68fb      	ldr	r3, [r7, #12]
 81075a2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 81075a4:	68bb      	ldr	r3, [r7, #8]
 81075a6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 81075a8:	68bb      	ldr	r3, [r7, #8]
 81075aa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81075ac:	68bb      	ldr	r3, [r7, #8]
 81075ae:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 81075b0:	f001 f817 	bl	81085e2 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 81075b4:	68fb      	ldr	r3, [r7, #12]
 81075b6:	681b      	ldr	r3, [r3, #0]
 81075b8:	699a      	ldr	r2, [r3, #24]
 81075ba:	68fb      	ldr	r3, [r7, #12]
 81075bc:	681b      	ldr	r3, [r3, #0]
 81075be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 81075c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 81075c4:	68fb      	ldr	r3, [r7, #12]
 81075c6:	681b      	ldr	r3, [r3, #0]
 81075c8:	6999      	ldr	r1, [r3, #24]
 81075ca:	68bb      	ldr	r3, [r7, #8]
 81075cc:	689b      	ldr	r3, [r3, #8]
 81075ce:	021a      	lsls	r2, r3, #8
 81075d0:	68fb      	ldr	r3, [r7, #12]
 81075d2:	681b      	ldr	r3, [r3, #0]
 81075d4:	430a      	orrs	r2, r1
 81075d6:	619a      	str	r2, [r3, #24]
 81075d8:	e040      	b.n	810765c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 81075da:	687b      	ldr	r3, [r7, #4]
 81075dc:	2b08      	cmp	r3, #8
 81075de:	d11b      	bne.n	8107618 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 81075e0:	68fb      	ldr	r3, [r7, #12]
 81075e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 81075e4:	68bb      	ldr	r3, [r7, #8]
 81075e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 81075e8:	68bb      	ldr	r3, [r7, #8]
 81075ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 81075ec:	68bb      	ldr	r3, [r7, #8]
 81075ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 81075f0:	f001 f864 	bl	81086bc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 81075f4:	68fb      	ldr	r3, [r7, #12]
 81075f6:	681b      	ldr	r3, [r3, #0]
 81075f8:	69da      	ldr	r2, [r3, #28]
 81075fa:	68fb      	ldr	r3, [r7, #12]
 81075fc:	681b      	ldr	r3, [r3, #0]
 81075fe:	f022 020c 	bic.w	r2, r2, #12
 8107602:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8107604:	68fb      	ldr	r3, [r7, #12]
 8107606:	681b      	ldr	r3, [r3, #0]
 8107608:	69d9      	ldr	r1, [r3, #28]
 810760a:	68bb      	ldr	r3, [r7, #8]
 810760c:	689a      	ldr	r2, [r3, #8]
 810760e:	68fb      	ldr	r3, [r7, #12]
 8107610:	681b      	ldr	r3, [r3, #0]
 8107612:	430a      	orrs	r2, r1
 8107614:	61da      	str	r2, [r3, #28]
 8107616:	e021      	b.n	810765c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8107618:	687b      	ldr	r3, [r7, #4]
 810761a:	2b0c      	cmp	r3, #12
 810761c:	d11c      	bne.n	8107658 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 810761e:	68fb      	ldr	r3, [r7, #12]
 8107620:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8107622:	68bb      	ldr	r3, [r7, #8]
 8107624:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8107626:	68bb      	ldr	r3, [r7, #8]
 8107628:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810762a:	68bb      	ldr	r3, [r7, #8]
 810762c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 810762e:	f001 f881 	bl	8108734 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8107632:	68fb      	ldr	r3, [r7, #12]
 8107634:	681b      	ldr	r3, [r3, #0]
 8107636:	69da      	ldr	r2, [r3, #28]
 8107638:	68fb      	ldr	r3, [r7, #12]
 810763a:	681b      	ldr	r3, [r3, #0]
 810763c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8107640:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8107642:	68fb      	ldr	r3, [r7, #12]
 8107644:	681b      	ldr	r3, [r3, #0]
 8107646:	69d9      	ldr	r1, [r3, #28]
 8107648:	68bb      	ldr	r3, [r7, #8]
 810764a:	689b      	ldr	r3, [r3, #8]
 810764c:	021a      	lsls	r2, r3, #8
 810764e:	68fb      	ldr	r3, [r7, #12]
 8107650:	681b      	ldr	r3, [r3, #0]
 8107652:	430a      	orrs	r2, r1
 8107654:	61da      	str	r2, [r3, #28]
 8107656:	e001      	b.n	810765c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8107658:	2301      	movs	r3, #1
 810765a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 810765c:	68fb      	ldr	r3, [r7, #12]
 810765e:	2200      	movs	r2, #0
 8107660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8107664:	7dfb      	ldrb	r3, [r7, #23]
}
 8107666:	4618      	mov	r0, r3
 8107668:	3718      	adds	r7, #24
 810766a:	46bd      	mov	sp, r7
 810766c:	bd80      	pop	{r7, pc}
	...

08107670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8107670:	b580      	push	{r7, lr}
 8107672:	b086      	sub	sp, #24
 8107674:	af00      	add	r7, sp, #0
 8107676:	60f8      	str	r0, [r7, #12]
 8107678:	60b9      	str	r1, [r7, #8]
 810767a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810767c:	2300      	movs	r3, #0
 810767e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8107680:	68fb      	ldr	r3, [r7, #12]
 8107682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107686:	2b01      	cmp	r3, #1
 8107688:	d101      	bne.n	810768e <HAL_TIM_PWM_ConfigChannel+0x1e>
 810768a:	2302      	movs	r3, #2
 810768c:	e0ff      	b.n	810788e <HAL_TIM_PWM_ConfigChannel+0x21e>
 810768e:	68fb      	ldr	r3, [r7, #12]
 8107690:	2201      	movs	r2, #1
 8107692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8107696:	687b      	ldr	r3, [r7, #4]
 8107698:	2b14      	cmp	r3, #20
 810769a:	f200 80f0 	bhi.w	810787e <HAL_TIM_PWM_ConfigChannel+0x20e>
 810769e:	a201      	add	r2, pc, #4	; (adr r2, 81076a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 81076a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81076a4:	081076f9 	.word	0x081076f9
 81076a8:	0810787f 	.word	0x0810787f
 81076ac:	0810787f 	.word	0x0810787f
 81076b0:	0810787f 	.word	0x0810787f
 81076b4:	08107739 	.word	0x08107739
 81076b8:	0810787f 	.word	0x0810787f
 81076bc:	0810787f 	.word	0x0810787f
 81076c0:	0810787f 	.word	0x0810787f
 81076c4:	0810777b 	.word	0x0810777b
 81076c8:	0810787f 	.word	0x0810787f
 81076cc:	0810787f 	.word	0x0810787f
 81076d0:	0810787f 	.word	0x0810787f
 81076d4:	081077bb 	.word	0x081077bb
 81076d8:	0810787f 	.word	0x0810787f
 81076dc:	0810787f 	.word	0x0810787f
 81076e0:	0810787f 	.word	0x0810787f
 81076e4:	081077fd 	.word	0x081077fd
 81076e8:	0810787f 	.word	0x0810787f
 81076ec:	0810787f 	.word	0x0810787f
 81076f0:	0810787f 	.word	0x0810787f
 81076f4:	0810783d 	.word	0x0810783d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81076f8:	68fb      	ldr	r3, [r7, #12]
 81076fa:	681b      	ldr	r3, [r3, #0]
 81076fc:	68b9      	ldr	r1, [r7, #8]
 81076fe:	4618      	mov	r0, r3
 8107700:	f000 fb0c 	bl	8107d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8107704:	68fb      	ldr	r3, [r7, #12]
 8107706:	681b      	ldr	r3, [r3, #0]
 8107708:	699a      	ldr	r2, [r3, #24]
 810770a:	68fb      	ldr	r3, [r7, #12]
 810770c:	681b      	ldr	r3, [r3, #0]
 810770e:	f042 0208 	orr.w	r2, r2, #8
 8107712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8107714:	68fb      	ldr	r3, [r7, #12]
 8107716:	681b      	ldr	r3, [r3, #0]
 8107718:	699a      	ldr	r2, [r3, #24]
 810771a:	68fb      	ldr	r3, [r7, #12]
 810771c:	681b      	ldr	r3, [r3, #0]
 810771e:	f022 0204 	bic.w	r2, r2, #4
 8107722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8107724:	68fb      	ldr	r3, [r7, #12]
 8107726:	681b      	ldr	r3, [r3, #0]
 8107728:	6999      	ldr	r1, [r3, #24]
 810772a:	68bb      	ldr	r3, [r7, #8]
 810772c:	691a      	ldr	r2, [r3, #16]
 810772e:	68fb      	ldr	r3, [r7, #12]
 8107730:	681b      	ldr	r3, [r3, #0]
 8107732:	430a      	orrs	r2, r1
 8107734:	619a      	str	r2, [r3, #24]
      break;
 8107736:	e0a5      	b.n	8107884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8107738:	68fb      	ldr	r3, [r7, #12]
 810773a:	681b      	ldr	r3, [r3, #0]
 810773c:	68b9      	ldr	r1, [r7, #8]
 810773e:	4618      	mov	r0, r3
 8107740:	f000 fb7c 	bl	8107e3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8107744:	68fb      	ldr	r3, [r7, #12]
 8107746:	681b      	ldr	r3, [r3, #0]
 8107748:	699a      	ldr	r2, [r3, #24]
 810774a:	68fb      	ldr	r3, [r7, #12]
 810774c:	681b      	ldr	r3, [r3, #0]
 810774e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8107754:	68fb      	ldr	r3, [r7, #12]
 8107756:	681b      	ldr	r3, [r3, #0]
 8107758:	699a      	ldr	r2, [r3, #24]
 810775a:	68fb      	ldr	r3, [r7, #12]
 810775c:	681b      	ldr	r3, [r3, #0]
 810775e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8107764:	68fb      	ldr	r3, [r7, #12]
 8107766:	681b      	ldr	r3, [r3, #0]
 8107768:	6999      	ldr	r1, [r3, #24]
 810776a:	68bb      	ldr	r3, [r7, #8]
 810776c:	691b      	ldr	r3, [r3, #16]
 810776e:	021a      	lsls	r2, r3, #8
 8107770:	68fb      	ldr	r3, [r7, #12]
 8107772:	681b      	ldr	r3, [r3, #0]
 8107774:	430a      	orrs	r2, r1
 8107776:	619a      	str	r2, [r3, #24]
      break;
 8107778:	e084      	b.n	8107884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810777a:	68fb      	ldr	r3, [r7, #12]
 810777c:	681b      	ldr	r3, [r3, #0]
 810777e:	68b9      	ldr	r1, [r7, #8]
 8107780:	4618      	mov	r0, r3
 8107782:	f000 fbe5 	bl	8107f50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8107786:	68fb      	ldr	r3, [r7, #12]
 8107788:	681b      	ldr	r3, [r3, #0]
 810778a:	69da      	ldr	r2, [r3, #28]
 810778c:	68fb      	ldr	r3, [r7, #12]
 810778e:	681b      	ldr	r3, [r3, #0]
 8107790:	f042 0208 	orr.w	r2, r2, #8
 8107794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8107796:	68fb      	ldr	r3, [r7, #12]
 8107798:	681b      	ldr	r3, [r3, #0]
 810779a:	69da      	ldr	r2, [r3, #28]
 810779c:	68fb      	ldr	r3, [r7, #12]
 810779e:	681b      	ldr	r3, [r3, #0]
 81077a0:	f022 0204 	bic.w	r2, r2, #4
 81077a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 81077a6:	68fb      	ldr	r3, [r7, #12]
 81077a8:	681b      	ldr	r3, [r3, #0]
 81077aa:	69d9      	ldr	r1, [r3, #28]
 81077ac:	68bb      	ldr	r3, [r7, #8]
 81077ae:	691a      	ldr	r2, [r3, #16]
 81077b0:	68fb      	ldr	r3, [r7, #12]
 81077b2:	681b      	ldr	r3, [r3, #0]
 81077b4:	430a      	orrs	r2, r1
 81077b6:	61da      	str	r2, [r3, #28]
      break;
 81077b8:	e064      	b.n	8107884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81077ba:	68fb      	ldr	r3, [r7, #12]
 81077bc:	681b      	ldr	r3, [r3, #0]
 81077be:	68b9      	ldr	r1, [r7, #8]
 81077c0:	4618      	mov	r0, r3
 81077c2:	f000 fc4d 	bl	8108060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 81077c6:	68fb      	ldr	r3, [r7, #12]
 81077c8:	681b      	ldr	r3, [r3, #0]
 81077ca:	69da      	ldr	r2, [r3, #28]
 81077cc:	68fb      	ldr	r3, [r7, #12]
 81077ce:	681b      	ldr	r3, [r3, #0]
 81077d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81077d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81077d6:	68fb      	ldr	r3, [r7, #12]
 81077d8:	681b      	ldr	r3, [r3, #0]
 81077da:	69da      	ldr	r2, [r3, #28]
 81077dc:	68fb      	ldr	r3, [r7, #12]
 81077de:	681b      	ldr	r3, [r3, #0]
 81077e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81077e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81077e6:	68fb      	ldr	r3, [r7, #12]
 81077e8:	681b      	ldr	r3, [r3, #0]
 81077ea:	69d9      	ldr	r1, [r3, #28]
 81077ec:	68bb      	ldr	r3, [r7, #8]
 81077ee:	691b      	ldr	r3, [r3, #16]
 81077f0:	021a      	lsls	r2, r3, #8
 81077f2:	68fb      	ldr	r3, [r7, #12]
 81077f4:	681b      	ldr	r3, [r3, #0]
 81077f6:	430a      	orrs	r2, r1
 81077f8:	61da      	str	r2, [r3, #28]
      break;
 81077fa:	e043      	b.n	8107884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81077fc:	68fb      	ldr	r3, [r7, #12]
 81077fe:	681b      	ldr	r3, [r3, #0]
 8107800:	68b9      	ldr	r1, [r7, #8]
 8107802:	4618      	mov	r0, r3
 8107804:	f000 fc96 	bl	8108134 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8107808:	68fb      	ldr	r3, [r7, #12]
 810780a:	681b      	ldr	r3, [r3, #0]
 810780c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810780e:	68fb      	ldr	r3, [r7, #12]
 8107810:	681b      	ldr	r3, [r3, #0]
 8107812:	f042 0208 	orr.w	r2, r2, #8
 8107816:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8107818:	68fb      	ldr	r3, [r7, #12]
 810781a:	681b      	ldr	r3, [r3, #0]
 810781c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810781e:	68fb      	ldr	r3, [r7, #12]
 8107820:	681b      	ldr	r3, [r3, #0]
 8107822:	f022 0204 	bic.w	r2, r2, #4
 8107826:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8107828:	68fb      	ldr	r3, [r7, #12]
 810782a:	681b      	ldr	r3, [r3, #0]
 810782c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810782e:	68bb      	ldr	r3, [r7, #8]
 8107830:	691a      	ldr	r2, [r3, #16]
 8107832:	68fb      	ldr	r3, [r7, #12]
 8107834:	681b      	ldr	r3, [r3, #0]
 8107836:	430a      	orrs	r2, r1
 8107838:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810783a:	e023      	b.n	8107884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810783c:	68fb      	ldr	r3, [r7, #12]
 810783e:	681b      	ldr	r3, [r3, #0]
 8107840:	68b9      	ldr	r1, [r7, #8]
 8107842:	4618      	mov	r0, r3
 8107844:	f000 fcda 	bl	81081fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8107848:	68fb      	ldr	r3, [r7, #12]
 810784a:	681b      	ldr	r3, [r3, #0]
 810784c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810784e:	68fb      	ldr	r3, [r7, #12]
 8107850:	681b      	ldr	r3, [r3, #0]
 8107852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8107856:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8107858:	68fb      	ldr	r3, [r7, #12]
 810785a:	681b      	ldr	r3, [r3, #0]
 810785c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810785e:	68fb      	ldr	r3, [r7, #12]
 8107860:	681b      	ldr	r3, [r3, #0]
 8107862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8107866:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8107868:	68fb      	ldr	r3, [r7, #12]
 810786a:	681b      	ldr	r3, [r3, #0]
 810786c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810786e:	68bb      	ldr	r3, [r7, #8]
 8107870:	691b      	ldr	r3, [r3, #16]
 8107872:	021a      	lsls	r2, r3, #8
 8107874:	68fb      	ldr	r3, [r7, #12]
 8107876:	681b      	ldr	r3, [r3, #0]
 8107878:	430a      	orrs	r2, r1
 810787a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810787c:	e002      	b.n	8107884 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 810787e:	2301      	movs	r3, #1
 8107880:	75fb      	strb	r3, [r7, #23]
      break;
 8107882:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8107884:	68fb      	ldr	r3, [r7, #12]
 8107886:	2200      	movs	r2, #0
 8107888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 810788c:	7dfb      	ldrb	r3, [r7, #23]
}
 810788e:	4618      	mov	r0, r3
 8107890:	3718      	adds	r7, #24
 8107892:	46bd      	mov	sp, r7
 8107894:	bd80      	pop	{r7, pc}
 8107896:	bf00      	nop

08107898 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8107898:	b580      	push	{r7, lr}
 810789a:	b084      	sub	sp, #16
 810789c:	af00      	add	r7, sp, #0
 810789e:	6078      	str	r0, [r7, #4]
 81078a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81078a2:	2300      	movs	r3, #0
 81078a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 81078a6:	687b      	ldr	r3, [r7, #4]
 81078a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 81078ac:	2b01      	cmp	r3, #1
 81078ae:	d101      	bne.n	81078b4 <HAL_TIM_ConfigClockSource+0x1c>
 81078b0:	2302      	movs	r3, #2
 81078b2:	e0de      	b.n	8107a72 <HAL_TIM_ConfigClockSource+0x1da>
 81078b4:	687b      	ldr	r3, [r7, #4]
 81078b6:	2201      	movs	r2, #1
 81078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 81078bc:	687b      	ldr	r3, [r7, #4]
 81078be:	2202      	movs	r2, #2
 81078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 81078c4:	687b      	ldr	r3, [r7, #4]
 81078c6:	681b      	ldr	r3, [r3, #0]
 81078c8:	689b      	ldr	r3, [r3, #8]
 81078ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 81078cc:	68bb      	ldr	r3, [r7, #8]
 81078ce:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 81078d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 81078d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81078d8:	68bb      	ldr	r3, [r7, #8]
 81078da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81078de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 81078e0:	687b      	ldr	r3, [r7, #4]
 81078e2:	681b      	ldr	r3, [r3, #0]
 81078e4:	68ba      	ldr	r2, [r7, #8]
 81078e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81078e8:	683b      	ldr	r3, [r7, #0]
 81078ea:	681b      	ldr	r3, [r3, #0]
 81078ec:	4a63      	ldr	r2, [pc, #396]	; (8107a7c <HAL_TIM_ConfigClockSource+0x1e4>)
 81078ee:	4293      	cmp	r3, r2
 81078f0:	f000 80a9 	beq.w	8107a46 <HAL_TIM_ConfigClockSource+0x1ae>
 81078f4:	4a61      	ldr	r2, [pc, #388]	; (8107a7c <HAL_TIM_ConfigClockSource+0x1e4>)
 81078f6:	4293      	cmp	r3, r2
 81078f8:	f200 80ae 	bhi.w	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 81078fc:	4a60      	ldr	r2, [pc, #384]	; (8107a80 <HAL_TIM_ConfigClockSource+0x1e8>)
 81078fe:	4293      	cmp	r3, r2
 8107900:	f000 80a1 	beq.w	8107a46 <HAL_TIM_ConfigClockSource+0x1ae>
 8107904:	4a5e      	ldr	r2, [pc, #376]	; (8107a80 <HAL_TIM_ConfigClockSource+0x1e8>)
 8107906:	4293      	cmp	r3, r2
 8107908:	f200 80a6 	bhi.w	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 810790c:	4a5d      	ldr	r2, [pc, #372]	; (8107a84 <HAL_TIM_ConfigClockSource+0x1ec>)
 810790e:	4293      	cmp	r3, r2
 8107910:	f000 8099 	beq.w	8107a46 <HAL_TIM_ConfigClockSource+0x1ae>
 8107914:	4a5b      	ldr	r2, [pc, #364]	; (8107a84 <HAL_TIM_ConfigClockSource+0x1ec>)
 8107916:	4293      	cmp	r3, r2
 8107918:	f200 809e 	bhi.w	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 810791c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8107920:	f000 8091 	beq.w	8107a46 <HAL_TIM_ConfigClockSource+0x1ae>
 8107924:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8107928:	f200 8096 	bhi.w	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 810792c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107930:	f000 8089 	beq.w	8107a46 <HAL_TIM_ConfigClockSource+0x1ae>
 8107934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8107938:	f200 808e 	bhi.w	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 810793c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107940:	d03e      	beq.n	81079c0 <HAL_TIM_ConfigClockSource+0x128>
 8107942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8107946:	f200 8087 	bhi.w	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 810794a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810794e:	f000 8086 	beq.w	8107a5e <HAL_TIM_ConfigClockSource+0x1c6>
 8107952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8107956:	d87f      	bhi.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 8107958:	2b70      	cmp	r3, #112	; 0x70
 810795a:	d01a      	beq.n	8107992 <HAL_TIM_ConfigClockSource+0xfa>
 810795c:	2b70      	cmp	r3, #112	; 0x70
 810795e:	d87b      	bhi.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 8107960:	2b60      	cmp	r3, #96	; 0x60
 8107962:	d050      	beq.n	8107a06 <HAL_TIM_ConfigClockSource+0x16e>
 8107964:	2b60      	cmp	r3, #96	; 0x60
 8107966:	d877      	bhi.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 8107968:	2b50      	cmp	r3, #80	; 0x50
 810796a:	d03c      	beq.n	81079e6 <HAL_TIM_ConfigClockSource+0x14e>
 810796c:	2b50      	cmp	r3, #80	; 0x50
 810796e:	d873      	bhi.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 8107970:	2b40      	cmp	r3, #64	; 0x40
 8107972:	d058      	beq.n	8107a26 <HAL_TIM_ConfigClockSource+0x18e>
 8107974:	2b40      	cmp	r3, #64	; 0x40
 8107976:	d86f      	bhi.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 8107978:	2b30      	cmp	r3, #48	; 0x30
 810797a:	d064      	beq.n	8107a46 <HAL_TIM_ConfigClockSource+0x1ae>
 810797c:	2b30      	cmp	r3, #48	; 0x30
 810797e:	d86b      	bhi.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 8107980:	2b20      	cmp	r3, #32
 8107982:	d060      	beq.n	8107a46 <HAL_TIM_ConfigClockSource+0x1ae>
 8107984:	2b20      	cmp	r3, #32
 8107986:	d867      	bhi.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
 8107988:	2b00      	cmp	r3, #0
 810798a:	d05c      	beq.n	8107a46 <HAL_TIM_ConfigClockSource+0x1ae>
 810798c:	2b10      	cmp	r3, #16
 810798e:	d05a      	beq.n	8107a46 <HAL_TIM_ConfigClockSource+0x1ae>
 8107990:	e062      	b.n	8107a58 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8107992:	687b      	ldr	r3, [r7, #4]
 8107994:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8107996:	683b      	ldr	r3, [r7, #0]
 8107998:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 810799a:	683b      	ldr	r3, [r7, #0]
 810799c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 810799e:	683b      	ldr	r3, [r7, #0]
 81079a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 81079a2:	f000 ff21 	bl	81087e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 81079a6:	687b      	ldr	r3, [r7, #4]
 81079a8:	681b      	ldr	r3, [r3, #0]
 81079aa:	689b      	ldr	r3, [r3, #8]
 81079ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 81079ae:	68bb      	ldr	r3, [r7, #8]
 81079b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 81079b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 81079b6:	687b      	ldr	r3, [r7, #4]
 81079b8:	681b      	ldr	r3, [r3, #0]
 81079ba:	68ba      	ldr	r2, [r7, #8]
 81079bc:	609a      	str	r2, [r3, #8]
      break;
 81079be:	e04f      	b.n	8107a60 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 81079c0:	687b      	ldr	r3, [r7, #4]
 81079c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 81079c4:	683b      	ldr	r3, [r7, #0]
 81079c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 81079c8:	683b      	ldr	r3, [r7, #0]
 81079ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 81079cc:	683b      	ldr	r3, [r7, #0]
 81079ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 81079d0:	f000 ff0a 	bl	81087e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 81079d4:	687b      	ldr	r3, [r7, #4]
 81079d6:	681b      	ldr	r3, [r3, #0]
 81079d8:	689a      	ldr	r2, [r3, #8]
 81079da:	687b      	ldr	r3, [r7, #4]
 81079dc:	681b      	ldr	r3, [r3, #0]
 81079de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 81079e2:	609a      	str	r2, [r3, #8]
      break;
 81079e4:	e03c      	b.n	8107a60 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 81079e6:	687b      	ldr	r3, [r7, #4]
 81079e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81079ea:	683b      	ldr	r3, [r7, #0]
 81079ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81079ee:	683b      	ldr	r3, [r7, #0]
 81079f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81079f2:	461a      	mov	r2, r3
 81079f4:	f000 fdc6 	bl	8108584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 81079f8:	687b      	ldr	r3, [r7, #4]
 81079fa:	681b      	ldr	r3, [r3, #0]
 81079fc:	2150      	movs	r1, #80	; 0x50
 81079fe:	4618      	mov	r0, r3
 8107a00:	f000 fed5 	bl	81087ae <TIM_ITRx_SetConfig>
      break;
 8107a04:	e02c      	b.n	8107a60 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8107a06:	687b      	ldr	r3, [r7, #4]
 8107a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8107a0a:	683b      	ldr	r3, [r7, #0]
 8107a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8107a0e:	683b      	ldr	r3, [r7, #0]
 8107a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8107a12:	461a      	mov	r2, r3
 8107a14:	f000 fe22 	bl	810865c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8107a18:	687b      	ldr	r3, [r7, #4]
 8107a1a:	681b      	ldr	r3, [r3, #0]
 8107a1c:	2160      	movs	r1, #96	; 0x60
 8107a1e:	4618      	mov	r0, r3
 8107a20:	f000 fec5 	bl	81087ae <TIM_ITRx_SetConfig>
      break;
 8107a24:	e01c      	b.n	8107a60 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8107a26:	687b      	ldr	r3, [r7, #4]
 8107a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8107a2a:	683b      	ldr	r3, [r7, #0]
 8107a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8107a2e:	683b      	ldr	r3, [r7, #0]
 8107a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8107a32:	461a      	mov	r2, r3
 8107a34:	f000 fda6 	bl	8108584 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8107a38:	687b      	ldr	r3, [r7, #4]
 8107a3a:	681b      	ldr	r3, [r3, #0]
 8107a3c:	2140      	movs	r1, #64	; 0x40
 8107a3e:	4618      	mov	r0, r3
 8107a40:	f000 feb5 	bl	81087ae <TIM_ITRx_SetConfig>
      break;
 8107a44:	e00c      	b.n	8107a60 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8107a46:	687b      	ldr	r3, [r7, #4]
 8107a48:	681a      	ldr	r2, [r3, #0]
 8107a4a:	683b      	ldr	r3, [r7, #0]
 8107a4c:	681b      	ldr	r3, [r3, #0]
 8107a4e:	4619      	mov	r1, r3
 8107a50:	4610      	mov	r0, r2
 8107a52:	f000 feac 	bl	81087ae <TIM_ITRx_SetConfig>
      break;
 8107a56:	e003      	b.n	8107a60 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8107a58:	2301      	movs	r3, #1
 8107a5a:	73fb      	strb	r3, [r7, #15]
      break;
 8107a5c:	e000      	b.n	8107a60 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8107a5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8107a60:	687b      	ldr	r3, [r7, #4]
 8107a62:	2201      	movs	r2, #1
 8107a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107a68:	687b      	ldr	r3, [r7, #4]
 8107a6a:	2200      	movs	r2, #0
 8107a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8107a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8107a72:	4618      	mov	r0, r3
 8107a74:	3710      	adds	r7, #16
 8107a76:	46bd      	mov	sp, r7
 8107a78:	bd80      	pop	{r7, pc}
 8107a7a:	bf00      	nop
 8107a7c:	00100040 	.word	0x00100040
 8107a80:	00100030 	.word	0x00100030
 8107a84:	00100020 	.word	0x00100020

08107a88 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8107a88:	b580      	push	{r7, lr}
 8107a8a:	b082      	sub	sp, #8
 8107a8c:	af00      	add	r7, sp, #0
 8107a8e:	6078      	str	r0, [r7, #4]
 8107a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8107a92:	687b      	ldr	r3, [r7, #4]
 8107a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107a98:	2b01      	cmp	r3, #1
 8107a9a:	d101      	bne.n	8107aa0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8107a9c:	2302      	movs	r3, #2
 8107a9e:	e031      	b.n	8107b04 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8107aa0:	687b      	ldr	r3, [r7, #4]
 8107aa2:	2201      	movs	r2, #1
 8107aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8107aa8:	687b      	ldr	r3, [r7, #4]
 8107aaa:	2202      	movs	r2, #2
 8107aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8107ab0:	6839      	ldr	r1, [r7, #0]
 8107ab2:	6878      	ldr	r0, [r7, #4]
 8107ab4:	f000 fc08 	bl	81082c8 <TIM_SlaveTimer_SetConfig>
 8107ab8:	4603      	mov	r3, r0
 8107aba:	2b00      	cmp	r3, #0
 8107abc:	d009      	beq.n	8107ad2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8107abe:	687b      	ldr	r3, [r7, #4]
 8107ac0:	2201      	movs	r2, #1
 8107ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8107ac6:	687b      	ldr	r3, [r7, #4]
 8107ac8:	2200      	movs	r2, #0
 8107aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8107ace:	2301      	movs	r3, #1
 8107ad0:	e018      	b.n	8107b04 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8107ad2:	687b      	ldr	r3, [r7, #4]
 8107ad4:	681b      	ldr	r3, [r3, #0]
 8107ad6:	68da      	ldr	r2, [r3, #12]
 8107ad8:	687b      	ldr	r3, [r7, #4]
 8107ada:	681b      	ldr	r3, [r3, #0]
 8107adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8107ae0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8107ae2:	687b      	ldr	r3, [r7, #4]
 8107ae4:	681b      	ldr	r3, [r3, #0]
 8107ae6:	68da      	ldr	r2, [r3, #12]
 8107ae8:	687b      	ldr	r3, [r7, #4]
 8107aea:	681b      	ldr	r3, [r3, #0]
 8107aec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8107af0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8107af2:	687b      	ldr	r3, [r7, #4]
 8107af4:	2201      	movs	r2, #1
 8107af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8107afa:	687b      	ldr	r3, [r7, #4]
 8107afc:	2200      	movs	r2, #0
 8107afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8107b02:	2300      	movs	r3, #0
}
 8107b04:	4618      	mov	r0, r3
 8107b06:	3708      	adds	r7, #8
 8107b08:	46bd      	mov	sp, r7
 8107b0a:	bd80      	pop	{r7, pc}

08107b0c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8107b0c:	b480      	push	{r7}
 8107b0e:	b085      	sub	sp, #20
 8107b10:	af00      	add	r7, sp, #0
 8107b12:	6078      	str	r0, [r7, #4]
 8107b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8107b16:	2300      	movs	r3, #0
 8107b18:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8107b1a:	683b      	ldr	r3, [r7, #0]
 8107b1c:	2b0c      	cmp	r3, #12
 8107b1e:	d831      	bhi.n	8107b84 <HAL_TIM_ReadCapturedValue+0x78>
 8107b20:	a201      	add	r2, pc, #4	; (adr r2, 8107b28 <HAL_TIM_ReadCapturedValue+0x1c>)
 8107b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8107b26:	bf00      	nop
 8107b28:	08107b5d 	.word	0x08107b5d
 8107b2c:	08107b85 	.word	0x08107b85
 8107b30:	08107b85 	.word	0x08107b85
 8107b34:	08107b85 	.word	0x08107b85
 8107b38:	08107b67 	.word	0x08107b67
 8107b3c:	08107b85 	.word	0x08107b85
 8107b40:	08107b85 	.word	0x08107b85
 8107b44:	08107b85 	.word	0x08107b85
 8107b48:	08107b71 	.word	0x08107b71
 8107b4c:	08107b85 	.word	0x08107b85
 8107b50:	08107b85 	.word	0x08107b85
 8107b54:	08107b85 	.word	0x08107b85
 8107b58:	08107b7b 	.word	0x08107b7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8107b5c:	687b      	ldr	r3, [r7, #4]
 8107b5e:	681b      	ldr	r3, [r3, #0]
 8107b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8107b62:	60fb      	str	r3, [r7, #12]

      break;
 8107b64:	e00f      	b.n	8107b86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8107b66:	687b      	ldr	r3, [r7, #4]
 8107b68:	681b      	ldr	r3, [r3, #0]
 8107b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8107b6c:	60fb      	str	r3, [r7, #12]

      break;
 8107b6e:	e00a      	b.n	8107b86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8107b70:	687b      	ldr	r3, [r7, #4]
 8107b72:	681b      	ldr	r3, [r3, #0]
 8107b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8107b76:	60fb      	str	r3, [r7, #12]

      break;
 8107b78:	e005      	b.n	8107b86 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8107b7a:	687b      	ldr	r3, [r7, #4]
 8107b7c:	681b      	ldr	r3, [r3, #0]
 8107b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8107b80:	60fb      	str	r3, [r7, #12]

      break;
 8107b82:	e000      	b.n	8107b86 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8107b84:	bf00      	nop
  }

  return tmpreg;
 8107b86:	68fb      	ldr	r3, [r7, #12]
}
 8107b88:	4618      	mov	r0, r3
 8107b8a:	3714      	adds	r7, #20
 8107b8c:	46bd      	mov	sp, r7
 8107b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107b92:	4770      	bx	lr

08107b94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8107b94:	b480      	push	{r7}
 8107b96:	b083      	sub	sp, #12
 8107b98:	af00      	add	r7, sp, #0
 8107b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8107b9c:	bf00      	nop
 8107b9e:	370c      	adds	r7, #12
 8107ba0:	46bd      	mov	sp, r7
 8107ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107ba6:	4770      	bx	lr

08107ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8107ba8:	b480      	push	{r7}
 8107baa:	b083      	sub	sp, #12
 8107bac:	af00      	add	r7, sp, #0
 8107bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8107bb0:	bf00      	nop
 8107bb2:	370c      	adds	r7, #12
 8107bb4:	46bd      	mov	sp, r7
 8107bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bba:	4770      	bx	lr

08107bbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8107bbc:	b480      	push	{r7}
 8107bbe:	b083      	sub	sp, #12
 8107bc0:	af00      	add	r7, sp, #0
 8107bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8107bc4:	bf00      	nop
 8107bc6:	370c      	adds	r7, #12
 8107bc8:	46bd      	mov	sp, r7
 8107bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107bce:	4770      	bx	lr

08107bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8107bd0:	b480      	push	{r7}
 8107bd2:	b085      	sub	sp, #20
 8107bd4:	af00      	add	r7, sp, #0
 8107bd6:	6078      	str	r0, [r7, #4]
 8107bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8107bda:	687b      	ldr	r3, [r7, #4]
 8107bdc:	681b      	ldr	r3, [r3, #0]
 8107bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8107be0:	687b      	ldr	r3, [r7, #4]
 8107be2:	4a46      	ldr	r2, [pc, #280]	; (8107cfc <TIM_Base_SetConfig+0x12c>)
 8107be4:	4293      	cmp	r3, r2
 8107be6:	d013      	beq.n	8107c10 <TIM_Base_SetConfig+0x40>
 8107be8:	687b      	ldr	r3, [r7, #4]
 8107bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107bee:	d00f      	beq.n	8107c10 <TIM_Base_SetConfig+0x40>
 8107bf0:	687b      	ldr	r3, [r7, #4]
 8107bf2:	4a43      	ldr	r2, [pc, #268]	; (8107d00 <TIM_Base_SetConfig+0x130>)
 8107bf4:	4293      	cmp	r3, r2
 8107bf6:	d00b      	beq.n	8107c10 <TIM_Base_SetConfig+0x40>
 8107bf8:	687b      	ldr	r3, [r7, #4]
 8107bfa:	4a42      	ldr	r2, [pc, #264]	; (8107d04 <TIM_Base_SetConfig+0x134>)
 8107bfc:	4293      	cmp	r3, r2
 8107bfe:	d007      	beq.n	8107c10 <TIM_Base_SetConfig+0x40>
 8107c00:	687b      	ldr	r3, [r7, #4]
 8107c02:	4a41      	ldr	r2, [pc, #260]	; (8107d08 <TIM_Base_SetConfig+0x138>)
 8107c04:	4293      	cmp	r3, r2
 8107c06:	d003      	beq.n	8107c10 <TIM_Base_SetConfig+0x40>
 8107c08:	687b      	ldr	r3, [r7, #4]
 8107c0a:	4a40      	ldr	r2, [pc, #256]	; (8107d0c <TIM_Base_SetConfig+0x13c>)
 8107c0c:	4293      	cmp	r3, r2
 8107c0e:	d108      	bne.n	8107c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8107c10:	68fb      	ldr	r3, [r7, #12]
 8107c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8107c18:	683b      	ldr	r3, [r7, #0]
 8107c1a:	685b      	ldr	r3, [r3, #4]
 8107c1c:	68fa      	ldr	r2, [r7, #12]
 8107c1e:	4313      	orrs	r3, r2
 8107c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8107c22:	687b      	ldr	r3, [r7, #4]
 8107c24:	4a35      	ldr	r2, [pc, #212]	; (8107cfc <TIM_Base_SetConfig+0x12c>)
 8107c26:	4293      	cmp	r3, r2
 8107c28:	d01f      	beq.n	8107c6a <TIM_Base_SetConfig+0x9a>
 8107c2a:	687b      	ldr	r3, [r7, #4]
 8107c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8107c30:	d01b      	beq.n	8107c6a <TIM_Base_SetConfig+0x9a>
 8107c32:	687b      	ldr	r3, [r7, #4]
 8107c34:	4a32      	ldr	r2, [pc, #200]	; (8107d00 <TIM_Base_SetConfig+0x130>)
 8107c36:	4293      	cmp	r3, r2
 8107c38:	d017      	beq.n	8107c6a <TIM_Base_SetConfig+0x9a>
 8107c3a:	687b      	ldr	r3, [r7, #4]
 8107c3c:	4a31      	ldr	r2, [pc, #196]	; (8107d04 <TIM_Base_SetConfig+0x134>)
 8107c3e:	4293      	cmp	r3, r2
 8107c40:	d013      	beq.n	8107c6a <TIM_Base_SetConfig+0x9a>
 8107c42:	687b      	ldr	r3, [r7, #4]
 8107c44:	4a30      	ldr	r2, [pc, #192]	; (8107d08 <TIM_Base_SetConfig+0x138>)
 8107c46:	4293      	cmp	r3, r2
 8107c48:	d00f      	beq.n	8107c6a <TIM_Base_SetConfig+0x9a>
 8107c4a:	687b      	ldr	r3, [r7, #4]
 8107c4c:	4a2f      	ldr	r2, [pc, #188]	; (8107d0c <TIM_Base_SetConfig+0x13c>)
 8107c4e:	4293      	cmp	r3, r2
 8107c50:	d00b      	beq.n	8107c6a <TIM_Base_SetConfig+0x9a>
 8107c52:	687b      	ldr	r3, [r7, #4]
 8107c54:	4a2e      	ldr	r2, [pc, #184]	; (8107d10 <TIM_Base_SetConfig+0x140>)
 8107c56:	4293      	cmp	r3, r2
 8107c58:	d007      	beq.n	8107c6a <TIM_Base_SetConfig+0x9a>
 8107c5a:	687b      	ldr	r3, [r7, #4]
 8107c5c:	4a2d      	ldr	r2, [pc, #180]	; (8107d14 <TIM_Base_SetConfig+0x144>)
 8107c5e:	4293      	cmp	r3, r2
 8107c60:	d003      	beq.n	8107c6a <TIM_Base_SetConfig+0x9a>
 8107c62:	687b      	ldr	r3, [r7, #4]
 8107c64:	4a2c      	ldr	r2, [pc, #176]	; (8107d18 <TIM_Base_SetConfig+0x148>)
 8107c66:	4293      	cmp	r3, r2
 8107c68:	d108      	bne.n	8107c7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8107c6a:	68fb      	ldr	r3, [r7, #12]
 8107c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8107c72:	683b      	ldr	r3, [r7, #0]
 8107c74:	68db      	ldr	r3, [r3, #12]
 8107c76:	68fa      	ldr	r2, [r7, #12]
 8107c78:	4313      	orrs	r3, r2
 8107c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8107c7c:	68fb      	ldr	r3, [r7, #12]
 8107c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8107c82:	683b      	ldr	r3, [r7, #0]
 8107c84:	695b      	ldr	r3, [r3, #20]
 8107c86:	4313      	orrs	r3, r2
 8107c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8107c8a:	687b      	ldr	r3, [r7, #4]
 8107c8c:	68fa      	ldr	r2, [r7, #12]
 8107c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8107c90:	683b      	ldr	r3, [r7, #0]
 8107c92:	689a      	ldr	r2, [r3, #8]
 8107c94:	687b      	ldr	r3, [r7, #4]
 8107c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8107c98:	683b      	ldr	r3, [r7, #0]
 8107c9a:	681a      	ldr	r2, [r3, #0]
 8107c9c:	687b      	ldr	r3, [r7, #4]
 8107c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8107ca0:	687b      	ldr	r3, [r7, #4]
 8107ca2:	4a16      	ldr	r2, [pc, #88]	; (8107cfc <TIM_Base_SetConfig+0x12c>)
 8107ca4:	4293      	cmp	r3, r2
 8107ca6:	d00f      	beq.n	8107cc8 <TIM_Base_SetConfig+0xf8>
 8107ca8:	687b      	ldr	r3, [r7, #4]
 8107caa:	4a18      	ldr	r2, [pc, #96]	; (8107d0c <TIM_Base_SetConfig+0x13c>)
 8107cac:	4293      	cmp	r3, r2
 8107cae:	d00b      	beq.n	8107cc8 <TIM_Base_SetConfig+0xf8>
 8107cb0:	687b      	ldr	r3, [r7, #4]
 8107cb2:	4a17      	ldr	r2, [pc, #92]	; (8107d10 <TIM_Base_SetConfig+0x140>)
 8107cb4:	4293      	cmp	r3, r2
 8107cb6:	d007      	beq.n	8107cc8 <TIM_Base_SetConfig+0xf8>
 8107cb8:	687b      	ldr	r3, [r7, #4]
 8107cba:	4a16      	ldr	r2, [pc, #88]	; (8107d14 <TIM_Base_SetConfig+0x144>)
 8107cbc:	4293      	cmp	r3, r2
 8107cbe:	d003      	beq.n	8107cc8 <TIM_Base_SetConfig+0xf8>
 8107cc0:	687b      	ldr	r3, [r7, #4]
 8107cc2:	4a15      	ldr	r2, [pc, #84]	; (8107d18 <TIM_Base_SetConfig+0x148>)
 8107cc4:	4293      	cmp	r3, r2
 8107cc6:	d103      	bne.n	8107cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8107cc8:	683b      	ldr	r3, [r7, #0]
 8107cca:	691a      	ldr	r2, [r3, #16]
 8107ccc:	687b      	ldr	r3, [r7, #4]
 8107cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8107cd0:	687b      	ldr	r3, [r7, #4]
 8107cd2:	2201      	movs	r2, #1
 8107cd4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8107cd6:	687b      	ldr	r3, [r7, #4]
 8107cd8:	691b      	ldr	r3, [r3, #16]
 8107cda:	f003 0301 	and.w	r3, r3, #1
 8107cde:	2b01      	cmp	r3, #1
 8107ce0:	d105      	bne.n	8107cee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8107ce2:	687b      	ldr	r3, [r7, #4]
 8107ce4:	691b      	ldr	r3, [r3, #16]
 8107ce6:	f023 0201 	bic.w	r2, r3, #1
 8107cea:	687b      	ldr	r3, [r7, #4]
 8107cec:	611a      	str	r2, [r3, #16]
  }
}
 8107cee:	bf00      	nop
 8107cf0:	3714      	adds	r7, #20
 8107cf2:	46bd      	mov	sp, r7
 8107cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cf8:	4770      	bx	lr
 8107cfa:	bf00      	nop
 8107cfc:	40010000 	.word	0x40010000
 8107d00:	40000400 	.word	0x40000400
 8107d04:	40000800 	.word	0x40000800
 8107d08:	40000c00 	.word	0x40000c00
 8107d0c:	40010400 	.word	0x40010400
 8107d10:	40014000 	.word	0x40014000
 8107d14:	40014400 	.word	0x40014400
 8107d18:	40014800 	.word	0x40014800

08107d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107d1c:	b480      	push	{r7}
 8107d1e:	b087      	sub	sp, #28
 8107d20:	af00      	add	r7, sp, #0
 8107d22:	6078      	str	r0, [r7, #4]
 8107d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107d26:	687b      	ldr	r3, [r7, #4]
 8107d28:	6a1b      	ldr	r3, [r3, #32]
 8107d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8107d2c:	687b      	ldr	r3, [r7, #4]
 8107d2e:	6a1b      	ldr	r3, [r3, #32]
 8107d30:	f023 0201 	bic.w	r2, r3, #1
 8107d34:	687b      	ldr	r3, [r7, #4]
 8107d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107d38:	687b      	ldr	r3, [r7, #4]
 8107d3a:	685b      	ldr	r3, [r3, #4]
 8107d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107d3e:	687b      	ldr	r3, [r7, #4]
 8107d40:	699b      	ldr	r3, [r3, #24]
 8107d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8107d44:	68fb      	ldr	r3, [r7, #12]
 8107d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8107d50:	68fb      	ldr	r3, [r7, #12]
 8107d52:	f023 0303 	bic.w	r3, r3, #3
 8107d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107d58:	683b      	ldr	r3, [r7, #0]
 8107d5a:	681b      	ldr	r3, [r3, #0]
 8107d5c:	68fa      	ldr	r2, [r7, #12]
 8107d5e:	4313      	orrs	r3, r2
 8107d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8107d62:	697b      	ldr	r3, [r7, #20]
 8107d64:	f023 0302 	bic.w	r3, r3, #2
 8107d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8107d6a:	683b      	ldr	r3, [r7, #0]
 8107d6c:	689b      	ldr	r3, [r3, #8]
 8107d6e:	697a      	ldr	r2, [r7, #20]
 8107d70:	4313      	orrs	r3, r2
 8107d72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	4a2c      	ldr	r2, [pc, #176]	; (8107e28 <TIM_OC1_SetConfig+0x10c>)
 8107d78:	4293      	cmp	r3, r2
 8107d7a:	d00f      	beq.n	8107d9c <TIM_OC1_SetConfig+0x80>
 8107d7c:	687b      	ldr	r3, [r7, #4]
 8107d7e:	4a2b      	ldr	r2, [pc, #172]	; (8107e2c <TIM_OC1_SetConfig+0x110>)
 8107d80:	4293      	cmp	r3, r2
 8107d82:	d00b      	beq.n	8107d9c <TIM_OC1_SetConfig+0x80>
 8107d84:	687b      	ldr	r3, [r7, #4]
 8107d86:	4a2a      	ldr	r2, [pc, #168]	; (8107e30 <TIM_OC1_SetConfig+0x114>)
 8107d88:	4293      	cmp	r3, r2
 8107d8a:	d007      	beq.n	8107d9c <TIM_OC1_SetConfig+0x80>
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	4a29      	ldr	r2, [pc, #164]	; (8107e34 <TIM_OC1_SetConfig+0x118>)
 8107d90:	4293      	cmp	r3, r2
 8107d92:	d003      	beq.n	8107d9c <TIM_OC1_SetConfig+0x80>
 8107d94:	687b      	ldr	r3, [r7, #4]
 8107d96:	4a28      	ldr	r2, [pc, #160]	; (8107e38 <TIM_OC1_SetConfig+0x11c>)
 8107d98:	4293      	cmp	r3, r2
 8107d9a:	d10c      	bne.n	8107db6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8107d9c:	697b      	ldr	r3, [r7, #20]
 8107d9e:	f023 0308 	bic.w	r3, r3, #8
 8107da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8107da4:	683b      	ldr	r3, [r7, #0]
 8107da6:	68db      	ldr	r3, [r3, #12]
 8107da8:	697a      	ldr	r2, [r7, #20]
 8107daa:	4313      	orrs	r3, r2
 8107dac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8107dae:	697b      	ldr	r3, [r7, #20]
 8107db0:	f023 0304 	bic.w	r3, r3, #4
 8107db4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107db6:	687b      	ldr	r3, [r7, #4]
 8107db8:	4a1b      	ldr	r2, [pc, #108]	; (8107e28 <TIM_OC1_SetConfig+0x10c>)
 8107dba:	4293      	cmp	r3, r2
 8107dbc:	d00f      	beq.n	8107dde <TIM_OC1_SetConfig+0xc2>
 8107dbe:	687b      	ldr	r3, [r7, #4]
 8107dc0:	4a1a      	ldr	r2, [pc, #104]	; (8107e2c <TIM_OC1_SetConfig+0x110>)
 8107dc2:	4293      	cmp	r3, r2
 8107dc4:	d00b      	beq.n	8107dde <TIM_OC1_SetConfig+0xc2>
 8107dc6:	687b      	ldr	r3, [r7, #4]
 8107dc8:	4a19      	ldr	r2, [pc, #100]	; (8107e30 <TIM_OC1_SetConfig+0x114>)
 8107dca:	4293      	cmp	r3, r2
 8107dcc:	d007      	beq.n	8107dde <TIM_OC1_SetConfig+0xc2>
 8107dce:	687b      	ldr	r3, [r7, #4]
 8107dd0:	4a18      	ldr	r2, [pc, #96]	; (8107e34 <TIM_OC1_SetConfig+0x118>)
 8107dd2:	4293      	cmp	r3, r2
 8107dd4:	d003      	beq.n	8107dde <TIM_OC1_SetConfig+0xc2>
 8107dd6:	687b      	ldr	r3, [r7, #4]
 8107dd8:	4a17      	ldr	r2, [pc, #92]	; (8107e38 <TIM_OC1_SetConfig+0x11c>)
 8107dda:	4293      	cmp	r3, r2
 8107ddc:	d111      	bne.n	8107e02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8107dde:	693b      	ldr	r3, [r7, #16]
 8107de0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8107de4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8107de6:	693b      	ldr	r3, [r7, #16]
 8107de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107dec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8107dee:	683b      	ldr	r3, [r7, #0]
 8107df0:	695b      	ldr	r3, [r3, #20]
 8107df2:	693a      	ldr	r2, [r7, #16]
 8107df4:	4313      	orrs	r3, r2
 8107df6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8107df8:	683b      	ldr	r3, [r7, #0]
 8107dfa:	699b      	ldr	r3, [r3, #24]
 8107dfc:	693a      	ldr	r2, [r7, #16]
 8107dfe:	4313      	orrs	r3, r2
 8107e00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107e02:	687b      	ldr	r3, [r7, #4]
 8107e04:	693a      	ldr	r2, [r7, #16]
 8107e06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107e08:	687b      	ldr	r3, [r7, #4]
 8107e0a:	68fa      	ldr	r2, [r7, #12]
 8107e0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8107e0e:	683b      	ldr	r3, [r7, #0]
 8107e10:	685a      	ldr	r2, [r3, #4]
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107e16:	687b      	ldr	r3, [r7, #4]
 8107e18:	697a      	ldr	r2, [r7, #20]
 8107e1a:	621a      	str	r2, [r3, #32]
}
 8107e1c:	bf00      	nop
 8107e1e:	371c      	adds	r7, #28
 8107e20:	46bd      	mov	sp, r7
 8107e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e26:	4770      	bx	lr
 8107e28:	40010000 	.word	0x40010000
 8107e2c:	40010400 	.word	0x40010400
 8107e30:	40014000 	.word	0x40014000
 8107e34:	40014400 	.word	0x40014400
 8107e38:	40014800 	.word	0x40014800

08107e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107e3c:	b480      	push	{r7}
 8107e3e:	b087      	sub	sp, #28
 8107e40:	af00      	add	r7, sp, #0
 8107e42:	6078      	str	r0, [r7, #4]
 8107e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107e46:	687b      	ldr	r3, [r7, #4]
 8107e48:	6a1b      	ldr	r3, [r3, #32]
 8107e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8107e4c:	687b      	ldr	r3, [r7, #4]
 8107e4e:	6a1b      	ldr	r3, [r3, #32]
 8107e50:	f023 0210 	bic.w	r2, r3, #16
 8107e54:	687b      	ldr	r3, [r7, #4]
 8107e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107e58:	687b      	ldr	r3, [r7, #4]
 8107e5a:	685b      	ldr	r3, [r3, #4]
 8107e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8107e5e:	687b      	ldr	r3, [r7, #4]
 8107e60:	699b      	ldr	r3, [r3, #24]
 8107e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8107e64:	68fb      	ldr	r3, [r7, #12]
 8107e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8107e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8107e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8107e70:	68fb      	ldr	r3, [r7, #12]
 8107e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107e78:	683b      	ldr	r3, [r7, #0]
 8107e7a:	681b      	ldr	r3, [r3, #0]
 8107e7c:	021b      	lsls	r3, r3, #8
 8107e7e:	68fa      	ldr	r2, [r7, #12]
 8107e80:	4313      	orrs	r3, r2
 8107e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8107e84:	697b      	ldr	r3, [r7, #20]
 8107e86:	f023 0320 	bic.w	r3, r3, #32
 8107e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8107e8c:	683b      	ldr	r3, [r7, #0]
 8107e8e:	689b      	ldr	r3, [r3, #8]
 8107e90:	011b      	lsls	r3, r3, #4
 8107e92:	697a      	ldr	r2, [r7, #20]
 8107e94:	4313      	orrs	r3, r2
 8107e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	4a28      	ldr	r2, [pc, #160]	; (8107f3c <TIM_OC2_SetConfig+0x100>)
 8107e9c:	4293      	cmp	r3, r2
 8107e9e:	d003      	beq.n	8107ea8 <TIM_OC2_SetConfig+0x6c>
 8107ea0:	687b      	ldr	r3, [r7, #4]
 8107ea2:	4a27      	ldr	r2, [pc, #156]	; (8107f40 <TIM_OC2_SetConfig+0x104>)
 8107ea4:	4293      	cmp	r3, r2
 8107ea6:	d10d      	bne.n	8107ec4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8107ea8:	697b      	ldr	r3, [r7, #20]
 8107eaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8107eae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8107eb0:	683b      	ldr	r3, [r7, #0]
 8107eb2:	68db      	ldr	r3, [r3, #12]
 8107eb4:	011b      	lsls	r3, r3, #4
 8107eb6:	697a      	ldr	r2, [r7, #20]
 8107eb8:	4313      	orrs	r3, r2
 8107eba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8107ebc:	697b      	ldr	r3, [r7, #20]
 8107ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8107ec2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107ec4:	687b      	ldr	r3, [r7, #4]
 8107ec6:	4a1d      	ldr	r2, [pc, #116]	; (8107f3c <TIM_OC2_SetConfig+0x100>)
 8107ec8:	4293      	cmp	r3, r2
 8107eca:	d00f      	beq.n	8107eec <TIM_OC2_SetConfig+0xb0>
 8107ecc:	687b      	ldr	r3, [r7, #4]
 8107ece:	4a1c      	ldr	r2, [pc, #112]	; (8107f40 <TIM_OC2_SetConfig+0x104>)
 8107ed0:	4293      	cmp	r3, r2
 8107ed2:	d00b      	beq.n	8107eec <TIM_OC2_SetConfig+0xb0>
 8107ed4:	687b      	ldr	r3, [r7, #4]
 8107ed6:	4a1b      	ldr	r2, [pc, #108]	; (8107f44 <TIM_OC2_SetConfig+0x108>)
 8107ed8:	4293      	cmp	r3, r2
 8107eda:	d007      	beq.n	8107eec <TIM_OC2_SetConfig+0xb0>
 8107edc:	687b      	ldr	r3, [r7, #4]
 8107ede:	4a1a      	ldr	r2, [pc, #104]	; (8107f48 <TIM_OC2_SetConfig+0x10c>)
 8107ee0:	4293      	cmp	r3, r2
 8107ee2:	d003      	beq.n	8107eec <TIM_OC2_SetConfig+0xb0>
 8107ee4:	687b      	ldr	r3, [r7, #4]
 8107ee6:	4a19      	ldr	r2, [pc, #100]	; (8107f4c <TIM_OC2_SetConfig+0x110>)
 8107ee8:	4293      	cmp	r3, r2
 8107eea:	d113      	bne.n	8107f14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8107eec:	693b      	ldr	r3, [r7, #16]
 8107eee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8107ef4:	693b      	ldr	r3, [r7, #16]
 8107ef6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8107efc:	683b      	ldr	r3, [r7, #0]
 8107efe:	695b      	ldr	r3, [r3, #20]
 8107f00:	009b      	lsls	r3, r3, #2
 8107f02:	693a      	ldr	r2, [r7, #16]
 8107f04:	4313      	orrs	r3, r2
 8107f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8107f08:	683b      	ldr	r3, [r7, #0]
 8107f0a:	699b      	ldr	r3, [r3, #24]
 8107f0c:	009b      	lsls	r3, r3, #2
 8107f0e:	693a      	ldr	r2, [r7, #16]
 8107f10:	4313      	orrs	r3, r2
 8107f12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107f14:	687b      	ldr	r3, [r7, #4]
 8107f16:	693a      	ldr	r2, [r7, #16]
 8107f18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8107f1a:	687b      	ldr	r3, [r7, #4]
 8107f1c:	68fa      	ldr	r2, [r7, #12]
 8107f1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8107f20:	683b      	ldr	r3, [r7, #0]
 8107f22:	685a      	ldr	r2, [r3, #4]
 8107f24:	687b      	ldr	r3, [r7, #4]
 8107f26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107f28:	687b      	ldr	r3, [r7, #4]
 8107f2a:	697a      	ldr	r2, [r7, #20]
 8107f2c:	621a      	str	r2, [r3, #32]
}
 8107f2e:	bf00      	nop
 8107f30:	371c      	adds	r7, #28
 8107f32:	46bd      	mov	sp, r7
 8107f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f38:	4770      	bx	lr
 8107f3a:	bf00      	nop
 8107f3c:	40010000 	.word	0x40010000
 8107f40:	40010400 	.word	0x40010400
 8107f44:	40014000 	.word	0x40014000
 8107f48:	40014400 	.word	0x40014400
 8107f4c:	40014800 	.word	0x40014800

08107f50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8107f50:	b480      	push	{r7}
 8107f52:	b087      	sub	sp, #28
 8107f54:	af00      	add	r7, sp, #0
 8107f56:	6078      	str	r0, [r7, #4]
 8107f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107f5a:	687b      	ldr	r3, [r7, #4]
 8107f5c:	6a1b      	ldr	r3, [r3, #32]
 8107f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8107f60:	687b      	ldr	r3, [r7, #4]
 8107f62:	6a1b      	ldr	r3, [r3, #32]
 8107f64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8107f6c:	687b      	ldr	r3, [r7, #4]
 8107f6e:	685b      	ldr	r3, [r3, #4]
 8107f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107f72:	687b      	ldr	r3, [r7, #4]
 8107f74:	69db      	ldr	r3, [r3, #28]
 8107f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8107f78:	68fb      	ldr	r3, [r7, #12]
 8107f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8107f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8107f84:	68fb      	ldr	r3, [r7, #12]
 8107f86:	f023 0303 	bic.w	r3, r3, #3
 8107f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107f8c:	683b      	ldr	r3, [r7, #0]
 8107f8e:	681b      	ldr	r3, [r3, #0]
 8107f90:	68fa      	ldr	r2, [r7, #12]
 8107f92:	4313      	orrs	r3, r2
 8107f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8107f96:	697b      	ldr	r3, [r7, #20]
 8107f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8107f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8107f9e:	683b      	ldr	r3, [r7, #0]
 8107fa0:	689b      	ldr	r3, [r3, #8]
 8107fa2:	021b      	lsls	r3, r3, #8
 8107fa4:	697a      	ldr	r2, [r7, #20]
 8107fa6:	4313      	orrs	r3, r2
 8107fa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8107faa:	687b      	ldr	r3, [r7, #4]
 8107fac:	4a27      	ldr	r2, [pc, #156]	; (810804c <TIM_OC3_SetConfig+0xfc>)
 8107fae:	4293      	cmp	r3, r2
 8107fb0:	d003      	beq.n	8107fba <TIM_OC3_SetConfig+0x6a>
 8107fb2:	687b      	ldr	r3, [r7, #4]
 8107fb4:	4a26      	ldr	r2, [pc, #152]	; (8108050 <TIM_OC3_SetConfig+0x100>)
 8107fb6:	4293      	cmp	r3, r2
 8107fb8:	d10d      	bne.n	8107fd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8107fba:	697b      	ldr	r3, [r7, #20]
 8107fbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8107fc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8107fc2:	683b      	ldr	r3, [r7, #0]
 8107fc4:	68db      	ldr	r3, [r3, #12]
 8107fc6:	021b      	lsls	r3, r3, #8
 8107fc8:	697a      	ldr	r2, [r7, #20]
 8107fca:	4313      	orrs	r3, r2
 8107fcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8107fce:	697b      	ldr	r3, [r7, #20]
 8107fd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8107fd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107fd6:	687b      	ldr	r3, [r7, #4]
 8107fd8:	4a1c      	ldr	r2, [pc, #112]	; (810804c <TIM_OC3_SetConfig+0xfc>)
 8107fda:	4293      	cmp	r3, r2
 8107fdc:	d00f      	beq.n	8107ffe <TIM_OC3_SetConfig+0xae>
 8107fde:	687b      	ldr	r3, [r7, #4]
 8107fe0:	4a1b      	ldr	r2, [pc, #108]	; (8108050 <TIM_OC3_SetConfig+0x100>)
 8107fe2:	4293      	cmp	r3, r2
 8107fe4:	d00b      	beq.n	8107ffe <TIM_OC3_SetConfig+0xae>
 8107fe6:	687b      	ldr	r3, [r7, #4]
 8107fe8:	4a1a      	ldr	r2, [pc, #104]	; (8108054 <TIM_OC3_SetConfig+0x104>)
 8107fea:	4293      	cmp	r3, r2
 8107fec:	d007      	beq.n	8107ffe <TIM_OC3_SetConfig+0xae>
 8107fee:	687b      	ldr	r3, [r7, #4]
 8107ff0:	4a19      	ldr	r2, [pc, #100]	; (8108058 <TIM_OC3_SetConfig+0x108>)
 8107ff2:	4293      	cmp	r3, r2
 8107ff4:	d003      	beq.n	8107ffe <TIM_OC3_SetConfig+0xae>
 8107ff6:	687b      	ldr	r3, [r7, #4]
 8107ff8:	4a18      	ldr	r2, [pc, #96]	; (810805c <TIM_OC3_SetConfig+0x10c>)
 8107ffa:	4293      	cmp	r3, r2
 8107ffc:	d113      	bne.n	8108026 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8107ffe:	693b      	ldr	r3, [r7, #16]
 8108000:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8108004:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8108006:	693b      	ldr	r3, [r7, #16]
 8108008:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810800c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810800e:	683b      	ldr	r3, [r7, #0]
 8108010:	695b      	ldr	r3, [r3, #20]
 8108012:	011b      	lsls	r3, r3, #4
 8108014:	693a      	ldr	r2, [r7, #16]
 8108016:	4313      	orrs	r3, r2
 8108018:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810801a:	683b      	ldr	r3, [r7, #0]
 810801c:	699b      	ldr	r3, [r3, #24]
 810801e:	011b      	lsls	r3, r3, #4
 8108020:	693a      	ldr	r2, [r7, #16]
 8108022:	4313      	orrs	r3, r2
 8108024:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108026:	687b      	ldr	r3, [r7, #4]
 8108028:	693a      	ldr	r2, [r7, #16]
 810802a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810802c:	687b      	ldr	r3, [r7, #4]
 810802e:	68fa      	ldr	r2, [r7, #12]
 8108030:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8108032:	683b      	ldr	r3, [r7, #0]
 8108034:	685a      	ldr	r2, [r3, #4]
 8108036:	687b      	ldr	r3, [r7, #4]
 8108038:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810803a:	687b      	ldr	r3, [r7, #4]
 810803c:	697a      	ldr	r2, [r7, #20]
 810803e:	621a      	str	r2, [r3, #32]
}
 8108040:	bf00      	nop
 8108042:	371c      	adds	r7, #28
 8108044:	46bd      	mov	sp, r7
 8108046:	f85d 7b04 	ldr.w	r7, [sp], #4
 810804a:	4770      	bx	lr
 810804c:	40010000 	.word	0x40010000
 8108050:	40010400 	.word	0x40010400
 8108054:	40014000 	.word	0x40014000
 8108058:	40014400 	.word	0x40014400
 810805c:	40014800 	.word	0x40014800

08108060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8108060:	b480      	push	{r7}
 8108062:	b087      	sub	sp, #28
 8108064:	af00      	add	r7, sp, #0
 8108066:	6078      	str	r0, [r7, #4]
 8108068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810806a:	687b      	ldr	r3, [r7, #4]
 810806c:	6a1b      	ldr	r3, [r3, #32]
 810806e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	6a1b      	ldr	r3, [r3, #32]
 8108074:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8108078:	687b      	ldr	r3, [r7, #4]
 810807a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810807c:	687b      	ldr	r3, [r7, #4]
 810807e:	685b      	ldr	r3, [r3, #4]
 8108080:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108082:	687b      	ldr	r3, [r7, #4]
 8108084:	69db      	ldr	r3, [r3, #28]
 8108086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8108088:	68fb      	ldr	r3, [r7, #12]
 810808a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810808e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8108092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8108094:	68fb      	ldr	r3, [r7, #12]
 8108096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810809a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810809c:	683b      	ldr	r3, [r7, #0]
 810809e:	681b      	ldr	r3, [r3, #0]
 81080a0:	021b      	lsls	r3, r3, #8
 81080a2:	68fa      	ldr	r2, [r7, #12]
 81080a4:	4313      	orrs	r3, r2
 81080a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 81080a8:	693b      	ldr	r3, [r7, #16]
 81080aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 81080ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 81080b0:	683b      	ldr	r3, [r7, #0]
 81080b2:	689b      	ldr	r3, [r3, #8]
 81080b4:	031b      	lsls	r3, r3, #12
 81080b6:	693a      	ldr	r2, [r7, #16]
 81080b8:	4313      	orrs	r3, r2
 81080ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81080bc:	687b      	ldr	r3, [r7, #4]
 81080be:	4a18      	ldr	r2, [pc, #96]	; (8108120 <TIM_OC4_SetConfig+0xc0>)
 81080c0:	4293      	cmp	r3, r2
 81080c2:	d00f      	beq.n	81080e4 <TIM_OC4_SetConfig+0x84>
 81080c4:	687b      	ldr	r3, [r7, #4]
 81080c6:	4a17      	ldr	r2, [pc, #92]	; (8108124 <TIM_OC4_SetConfig+0xc4>)
 81080c8:	4293      	cmp	r3, r2
 81080ca:	d00b      	beq.n	81080e4 <TIM_OC4_SetConfig+0x84>
 81080cc:	687b      	ldr	r3, [r7, #4]
 81080ce:	4a16      	ldr	r2, [pc, #88]	; (8108128 <TIM_OC4_SetConfig+0xc8>)
 81080d0:	4293      	cmp	r3, r2
 81080d2:	d007      	beq.n	81080e4 <TIM_OC4_SetConfig+0x84>
 81080d4:	687b      	ldr	r3, [r7, #4]
 81080d6:	4a15      	ldr	r2, [pc, #84]	; (810812c <TIM_OC4_SetConfig+0xcc>)
 81080d8:	4293      	cmp	r3, r2
 81080da:	d003      	beq.n	81080e4 <TIM_OC4_SetConfig+0x84>
 81080dc:	687b      	ldr	r3, [r7, #4]
 81080de:	4a14      	ldr	r2, [pc, #80]	; (8108130 <TIM_OC4_SetConfig+0xd0>)
 81080e0:	4293      	cmp	r3, r2
 81080e2:	d109      	bne.n	81080f8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 81080e4:	697b      	ldr	r3, [r7, #20]
 81080e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 81080ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 81080ec:	683b      	ldr	r3, [r7, #0]
 81080ee:	695b      	ldr	r3, [r3, #20]
 81080f0:	019b      	lsls	r3, r3, #6
 81080f2:	697a      	ldr	r2, [r7, #20]
 81080f4:	4313      	orrs	r3, r2
 81080f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	697a      	ldr	r2, [r7, #20]
 81080fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81080fe:	687b      	ldr	r3, [r7, #4]
 8108100:	68fa      	ldr	r2, [r7, #12]
 8108102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8108104:	683b      	ldr	r3, [r7, #0]
 8108106:	685a      	ldr	r2, [r3, #4]
 8108108:	687b      	ldr	r3, [r7, #4]
 810810a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810810c:	687b      	ldr	r3, [r7, #4]
 810810e:	693a      	ldr	r2, [r7, #16]
 8108110:	621a      	str	r2, [r3, #32]
}
 8108112:	bf00      	nop
 8108114:	371c      	adds	r7, #28
 8108116:	46bd      	mov	sp, r7
 8108118:	f85d 7b04 	ldr.w	r7, [sp], #4
 810811c:	4770      	bx	lr
 810811e:	bf00      	nop
 8108120:	40010000 	.word	0x40010000
 8108124:	40010400 	.word	0x40010400
 8108128:	40014000 	.word	0x40014000
 810812c:	40014400 	.word	0x40014400
 8108130:	40014800 	.word	0x40014800

08108134 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8108134:	b480      	push	{r7}
 8108136:	b087      	sub	sp, #28
 8108138:	af00      	add	r7, sp, #0
 810813a:	6078      	str	r0, [r7, #4]
 810813c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810813e:	687b      	ldr	r3, [r7, #4]
 8108140:	6a1b      	ldr	r3, [r3, #32]
 8108142:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8108144:	687b      	ldr	r3, [r7, #4]
 8108146:	6a1b      	ldr	r3, [r3, #32]
 8108148:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 810814c:	687b      	ldr	r3, [r7, #4]
 810814e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108150:	687b      	ldr	r3, [r7, #4]
 8108152:	685b      	ldr	r3, [r3, #4]
 8108154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108156:	687b      	ldr	r3, [r7, #4]
 8108158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810815a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810815c:	68fb      	ldr	r3, [r7, #12]
 810815e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8108162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8108166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108168:	683b      	ldr	r3, [r7, #0]
 810816a:	681b      	ldr	r3, [r3, #0]
 810816c:	68fa      	ldr	r2, [r7, #12]
 810816e:	4313      	orrs	r3, r2
 8108170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8108172:	693b      	ldr	r3, [r7, #16]
 8108174:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8108178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810817a:	683b      	ldr	r3, [r7, #0]
 810817c:	689b      	ldr	r3, [r3, #8]
 810817e:	041b      	lsls	r3, r3, #16
 8108180:	693a      	ldr	r2, [r7, #16]
 8108182:	4313      	orrs	r3, r2
 8108184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108186:	687b      	ldr	r3, [r7, #4]
 8108188:	4a17      	ldr	r2, [pc, #92]	; (81081e8 <TIM_OC5_SetConfig+0xb4>)
 810818a:	4293      	cmp	r3, r2
 810818c:	d00f      	beq.n	81081ae <TIM_OC5_SetConfig+0x7a>
 810818e:	687b      	ldr	r3, [r7, #4]
 8108190:	4a16      	ldr	r2, [pc, #88]	; (81081ec <TIM_OC5_SetConfig+0xb8>)
 8108192:	4293      	cmp	r3, r2
 8108194:	d00b      	beq.n	81081ae <TIM_OC5_SetConfig+0x7a>
 8108196:	687b      	ldr	r3, [r7, #4]
 8108198:	4a15      	ldr	r2, [pc, #84]	; (81081f0 <TIM_OC5_SetConfig+0xbc>)
 810819a:	4293      	cmp	r3, r2
 810819c:	d007      	beq.n	81081ae <TIM_OC5_SetConfig+0x7a>
 810819e:	687b      	ldr	r3, [r7, #4]
 81081a0:	4a14      	ldr	r2, [pc, #80]	; (81081f4 <TIM_OC5_SetConfig+0xc0>)
 81081a2:	4293      	cmp	r3, r2
 81081a4:	d003      	beq.n	81081ae <TIM_OC5_SetConfig+0x7a>
 81081a6:	687b      	ldr	r3, [r7, #4]
 81081a8:	4a13      	ldr	r2, [pc, #76]	; (81081f8 <TIM_OC5_SetConfig+0xc4>)
 81081aa:	4293      	cmp	r3, r2
 81081ac:	d109      	bne.n	81081c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 81081ae:	697b      	ldr	r3, [r7, #20]
 81081b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81081b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 81081b6:	683b      	ldr	r3, [r7, #0]
 81081b8:	695b      	ldr	r3, [r3, #20]
 81081ba:	021b      	lsls	r3, r3, #8
 81081bc:	697a      	ldr	r2, [r7, #20]
 81081be:	4313      	orrs	r3, r2
 81081c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81081c2:	687b      	ldr	r3, [r7, #4]
 81081c4:	697a      	ldr	r2, [r7, #20]
 81081c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 81081c8:	687b      	ldr	r3, [r7, #4]
 81081ca:	68fa      	ldr	r2, [r7, #12]
 81081cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 81081ce:	683b      	ldr	r3, [r7, #0]
 81081d0:	685a      	ldr	r2, [r3, #4]
 81081d2:	687b      	ldr	r3, [r7, #4]
 81081d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81081d6:	687b      	ldr	r3, [r7, #4]
 81081d8:	693a      	ldr	r2, [r7, #16]
 81081da:	621a      	str	r2, [r3, #32]
}
 81081dc:	bf00      	nop
 81081de:	371c      	adds	r7, #28
 81081e0:	46bd      	mov	sp, r7
 81081e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081e6:	4770      	bx	lr
 81081e8:	40010000 	.word	0x40010000
 81081ec:	40010400 	.word	0x40010400
 81081f0:	40014000 	.word	0x40014000
 81081f4:	40014400 	.word	0x40014400
 81081f8:	40014800 	.word	0x40014800

081081fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 81081fc:	b480      	push	{r7}
 81081fe:	b087      	sub	sp, #28
 8108200:	af00      	add	r7, sp, #0
 8108202:	6078      	str	r0, [r7, #4]
 8108204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108206:	687b      	ldr	r3, [r7, #4]
 8108208:	6a1b      	ldr	r3, [r3, #32]
 810820a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810820c:	687b      	ldr	r3, [r7, #4]
 810820e:	6a1b      	ldr	r3, [r3, #32]
 8108210:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8108214:	687b      	ldr	r3, [r7, #4]
 8108216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108218:	687b      	ldr	r3, [r7, #4]
 810821a:	685b      	ldr	r3, [r3, #4]
 810821c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810821e:	687b      	ldr	r3, [r7, #4]
 8108220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8108224:	68fb      	ldr	r3, [r7, #12]
 8108226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 810822a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810822e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108230:	683b      	ldr	r3, [r7, #0]
 8108232:	681b      	ldr	r3, [r3, #0]
 8108234:	021b      	lsls	r3, r3, #8
 8108236:	68fa      	ldr	r2, [r7, #12]
 8108238:	4313      	orrs	r3, r2
 810823a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810823c:	693b      	ldr	r3, [r7, #16]
 810823e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8108242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8108244:	683b      	ldr	r3, [r7, #0]
 8108246:	689b      	ldr	r3, [r3, #8]
 8108248:	051b      	lsls	r3, r3, #20
 810824a:	693a      	ldr	r2, [r7, #16]
 810824c:	4313      	orrs	r3, r2
 810824e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108250:	687b      	ldr	r3, [r7, #4]
 8108252:	4a18      	ldr	r2, [pc, #96]	; (81082b4 <TIM_OC6_SetConfig+0xb8>)
 8108254:	4293      	cmp	r3, r2
 8108256:	d00f      	beq.n	8108278 <TIM_OC6_SetConfig+0x7c>
 8108258:	687b      	ldr	r3, [r7, #4]
 810825a:	4a17      	ldr	r2, [pc, #92]	; (81082b8 <TIM_OC6_SetConfig+0xbc>)
 810825c:	4293      	cmp	r3, r2
 810825e:	d00b      	beq.n	8108278 <TIM_OC6_SetConfig+0x7c>
 8108260:	687b      	ldr	r3, [r7, #4]
 8108262:	4a16      	ldr	r2, [pc, #88]	; (81082bc <TIM_OC6_SetConfig+0xc0>)
 8108264:	4293      	cmp	r3, r2
 8108266:	d007      	beq.n	8108278 <TIM_OC6_SetConfig+0x7c>
 8108268:	687b      	ldr	r3, [r7, #4]
 810826a:	4a15      	ldr	r2, [pc, #84]	; (81082c0 <TIM_OC6_SetConfig+0xc4>)
 810826c:	4293      	cmp	r3, r2
 810826e:	d003      	beq.n	8108278 <TIM_OC6_SetConfig+0x7c>
 8108270:	687b      	ldr	r3, [r7, #4]
 8108272:	4a14      	ldr	r2, [pc, #80]	; (81082c4 <TIM_OC6_SetConfig+0xc8>)
 8108274:	4293      	cmp	r3, r2
 8108276:	d109      	bne.n	810828c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8108278:	697b      	ldr	r3, [r7, #20]
 810827a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 810827e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8108280:	683b      	ldr	r3, [r7, #0]
 8108282:	695b      	ldr	r3, [r3, #20]
 8108284:	029b      	lsls	r3, r3, #10
 8108286:	697a      	ldr	r2, [r7, #20]
 8108288:	4313      	orrs	r3, r2
 810828a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810828c:	687b      	ldr	r3, [r7, #4]
 810828e:	697a      	ldr	r2, [r7, #20]
 8108290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8108292:	687b      	ldr	r3, [r7, #4]
 8108294:	68fa      	ldr	r2, [r7, #12]
 8108296:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8108298:	683b      	ldr	r3, [r7, #0]
 810829a:	685a      	ldr	r2, [r3, #4]
 810829c:	687b      	ldr	r3, [r7, #4]
 810829e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81082a0:	687b      	ldr	r3, [r7, #4]
 81082a2:	693a      	ldr	r2, [r7, #16]
 81082a4:	621a      	str	r2, [r3, #32]
}
 81082a6:	bf00      	nop
 81082a8:	371c      	adds	r7, #28
 81082aa:	46bd      	mov	sp, r7
 81082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81082b0:	4770      	bx	lr
 81082b2:	bf00      	nop
 81082b4:	40010000 	.word	0x40010000
 81082b8:	40010400 	.word	0x40010400
 81082bc:	40014000 	.word	0x40014000
 81082c0:	40014400 	.word	0x40014400
 81082c4:	40014800 	.word	0x40014800

081082c8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 81082c8:	b580      	push	{r7, lr}
 81082ca:	b086      	sub	sp, #24
 81082cc:	af00      	add	r7, sp, #0
 81082ce:	6078      	str	r0, [r7, #4]
 81082d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 81082d2:	2300      	movs	r3, #0
 81082d4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81082d6:	687b      	ldr	r3, [r7, #4]
 81082d8:	681b      	ldr	r3, [r3, #0]
 81082da:	689b      	ldr	r3, [r3, #8]
 81082dc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81082de:	693b      	ldr	r3, [r7, #16]
 81082e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81082e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81082e8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 81082ea:	683b      	ldr	r3, [r7, #0]
 81082ec:	685b      	ldr	r3, [r3, #4]
 81082ee:	693a      	ldr	r2, [r7, #16]
 81082f0:	4313      	orrs	r3, r2
 81082f2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 81082f4:	693b      	ldr	r3, [r7, #16]
 81082f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81082fa:	f023 0307 	bic.w	r3, r3, #7
 81082fe:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8108300:	683b      	ldr	r3, [r7, #0]
 8108302:	681b      	ldr	r3, [r3, #0]
 8108304:	693a      	ldr	r2, [r7, #16]
 8108306:	4313      	orrs	r3, r2
 8108308:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 810830a:	687b      	ldr	r3, [r7, #4]
 810830c:	681b      	ldr	r3, [r3, #0]
 810830e:	693a      	ldr	r2, [r7, #16]
 8108310:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8108312:	683b      	ldr	r3, [r7, #0]
 8108314:	685b      	ldr	r3, [r3, #4]
 8108316:	4a5a      	ldr	r2, [pc, #360]	; (8108480 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8108318:	4293      	cmp	r3, r2
 810831a:	f000 80ab 	beq.w	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 810831e:	4a58      	ldr	r2, [pc, #352]	; (8108480 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8108320:	4293      	cmp	r3, r2
 8108322:	f200 80a4 	bhi.w	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 8108326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810832a:	f000 80a3 	beq.w	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 810832e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8108332:	f200 809c 	bhi.w	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 8108336:	4a53      	ldr	r2, [pc, #332]	; (8108484 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8108338:	4293      	cmp	r3, r2
 810833a:	f000 809b 	beq.w	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 810833e:	4a51      	ldr	r2, [pc, #324]	; (8108484 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8108340:	4293      	cmp	r3, r2
 8108342:	f200 8094 	bhi.w	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 8108346:	4a50      	ldr	r2, [pc, #320]	; (8108488 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8108348:	4293      	cmp	r3, r2
 810834a:	f000 8093 	beq.w	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 810834e:	4a4e      	ldr	r2, [pc, #312]	; (8108488 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8108350:	4293      	cmp	r3, r2
 8108352:	f200 808c 	bhi.w	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 8108356:	4a4d      	ldr	r2, [pc, #308]	; (810848c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8108358:	4293      	cmp	r3, r2
 810835a:	f000 808b 	beq.w	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 810835e:	4a4b      	ldr	r2, [pc, #300]	; (810848c <TIM_SlaveTimer_SetConfig+0x1c4>)
 8108360:	4293      	cmp	r3, r2
 8108362:	f200 8084 	bhi.w	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 8108366:	4a4a      	ldr	r2, [pc, #296]	; (8108490 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8108368:	4293      	cmp	r3, r2
 810836a:	f000 8083 	beq.w	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 810836e:	4a48      	ldr	r2, [pc, #288]	; (8108490 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8108370:	4293      	cmp	r3, r2
 8108372:	d87c      	bhi.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 8108374:	4a47      	ldr	r2, [pc, #284]	; (8108494 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8108376:	4293      	cmp	r3, r2
 8108378:	d07c      	beq.n	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 810837a:	4a46      	ldr	r2, [pc, #280]	; (8108494 <TIM_SlaveTimer_SetConfig+0x1cc>)
 810837c:	4293      	cmp	r3, r2
 810837e:	d876      	bhi.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 8108380:	4a45      	ldr	r2, [pc, #276]	; (8108498 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8108382:	4293      	cmp	r3, r2
 8108384:	d076      	beq.n	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 8108386:	4a44      	ldr	r2, [pc, #272]	; (8108498 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8108388:	4293      	cmp	r3, r2
 810838a:	d870      	bhi.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 810838c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8108390:	d070      	beq.n	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 8108392:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8108396:	d86a      	bhi.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 8108398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810839c:	d06a      	beq.n	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 810839e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81083a2:	d864      	bhi.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 81083a4:	2b70      	cmp	r3, #112	; 0x70
 81083a6:	d01a      	beq.n	81083de <TIM_SlaveTimer_SetConfig+0x116>
 81083a8:	2b70      	cmp	r3, #112	; 0x70
 81083aa:	d860      	bhi.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 81083ac:	2b60      	cmp	r3, #96	; 0x60
 81083ae:	d054      	beq.n	810845a <TIM_SlaveTimer_SetConfig+0x192>
 81083b0:	2b60      	cmp	r3, #96	; 0x60
 81083b2:	d85c      	bhi.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 81083b4:	2b50      	cmp	r3, #80	; 0x50
 81083b6:	d046      	beq.n	8108446 <TIM_SlaveTimer_SetConfig+0x17e>
 81083b8:	2b50      	cmp	r3, #80	; 0x50
 81083ba:	d858      	bhi.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 81083bc:	2b40      	cmp	r3, #64	; 0x40
 81083be:	d019      	beq.n	81083f4 <TIM_SlaveTimer_SetConfig+0x12c>
 81083c0:	2b40      	cmp	r3, #64	; 0x40
 81083c2:	d854      	bhi.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 81083c4:	2b30      	cmp	r3, #48	; 0x30
 81083c6:	d055      	beq.n	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 81083c8:	2b30      	cmp	r3, #48	; 0x30
 81083ca:	d850      	bhi.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 81083cc:	2b20      	cmp	r3, #32
 81083ce:	d051      	beq.n	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 81083d0:	2b20      	cmp	r3, #32
 81083d2:	d84c      	bhi.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
 81083d4:	2b00      	cmp	r3, #0
 81083d6:	d04d      	beq.n	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 81083d8:	2b10      	cmp	r3, #16
 81083da:	d04b      	beq.n	8108474 <TIM_SlaveTimer_SetConfig+0x1ac>
 81083dc:	e047      	b.n	810846e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 81083de:	687b      	ldr	r3, [r7, #4]
 81083e0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 81083e2:	683b      	ldr	r3, [r7, #0]
 81083e4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 81083e6:	683b      	ldr	r3, [r7, #0]
 81083e8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 81083ea:	683b      	ldr	r3, [r7, #0]
 81083ec:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 81083ee:	f000 f9fb 	bl	81087e8 <TIM_ETR_SetConfig>
      break;
 81083f2:	e040      	b.n	8108476 <TIM_SlaveTimer_SetConfig+0x1ae>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 81083f4:	683b      	ldr	r3, [r7, #0]
 81083f6:	681b      	ldr	r3, [r3, #0]
 81083f8:	2b05      	cmp	r3, #5
 81083fa:	d101      	bne.n	8108400 <TIM_SlaveTimer_SetConfig+0x138>
      {
        return HAL_ERROR;
 81083fc:	2301      	movs	r3, #1
 81083fe:	e03b      	b.n	8108478 <TIM_SlaveTimer_SetConfig+0x1b0>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8108400:	687b      	ldr	r3, [r7, #4]
 8108402:	681b      	ldr	r3, [r3, #0]
 8108404:	6a1b      	ldr	r3, [r3, #32]
 8108406:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8108408:	687b      	ldr	r3, [r7, #4]
 810840a:	681b      	ldr	r3, [r3, #0]
 810840c:	6a1a      	ldr	r2, [r3, #32]
 810840e:	687b      	ldr	r3, [r7, #4]
 8108410:	681b      	ldr	r3, [r3, #0]
 8108412:	f022 0201 	bic.w	r2, r2, #1
 8108416:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8108418:	687b      	ldr	r3, [r7, #4]
 810841a:	681b      	ldr	r3, [r3, #0]
 810841c:	699b      	ldr	r3, [r3, #24]
 810841e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108420:	68bb      	ldr	r3, [r7, #8]
 8108422:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8108426:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8108428:	683b      	ldr	r3, [r7, #0]
 810842a:	691b      	ldr	r3, [r3, #16]
 810842c:	011b      	lsls	r3, r3, #4
 810842e:	68ba      	ldr	r2, [r7, #8]
 8108430:	4313      	orrs	r3, r2
 8108432:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8108434:	687b      	ldr	r3, [r7, #4]
 8108436:	681b      	ldr	r3, [r3, #0]
 8108438:	68ba      	ldr	r2, [r7, #8]
 810843a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 810843c:	687b      	ldr	r3, [r7, #4]
 810843e:	681b      	ldr	r3, [r3, #0]
 8108440:	68fa      	ldr	r2, [r7, #12]
 8108442:	621a      	str	r2, [r3, #32]
      break;
 8108444:	e017      	b.n	8108476 <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8108446:	687b      	ldr	r3, [r7, #4]
 8108448:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 810844a:	683b      	ldr	r3, [r7, #0]
 810844c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 810844e:	683b      	ldr	r3, [r7, #0]
 8108450:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8108452:	461a      	mov	r2, r3
 8108454:	f000 f896 	bl	8108584 <TIM_TI1_ConfigInputStage>
      break;
 8108458:	e00d      	b.n	8108476 <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 810845a:	687b      	ldr	r3, [r7, #4]
 810845c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 810845e:	683b      	ldr	r3, [r7, #0]
 8108460:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8108462:	683b      	ldr	r3, [r7, #0]
 8108464:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8108466:	461a      	mov	r2, r3
 8108468:	f000 f8f8 	bl	810865c <TIM_TI2_ConfigInputStage>
      break;
 810846c:	e003      	b.n	8108476 <TIM_SlaveTimer_SetConfig+0x1ae>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 810846e:	2301      	movs	r3, #1
 8108470:	75fb      	strb	r3, [r7, #23]
      break;
 8108472:	e000      	b.n	8108476 <TIM_SlaveTimer_SetConfig+0x1ae>
      break;
 8108474:	bf00      	nop
  }

  return status;
 8108476:	7dfb      	ldrb	r3, [r7, #23]
}
 8108478:	4618      	mov	r0, r3
 810847a:	3718      	adds	r7, #24
 810847c:	46bd      	mov	sp, r7
 810847e:	bd80      	pop	{r7, pc}
 8108480:	00200010 	.word	0x00200010
 8108484:	00100070 	.word	0x00100070
 8108488:	00100060 	.word	0x00100060
 810848c:	00100050 	.word	0x00100050
 8108490:	00100040 	.word	0x00100040
 8108494:	00100030 	.word	0x00100030
 8108498:	00100020 	.word	0x00100020

0810849c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 810849c:	b480      	push	{r7}
 810849e:	b087      	sub	sp, #28
 81084a0:	af00      	add	r7, sp, #0
 81084a2:	60f8      	str	r0, [r7, #12]
 81084a4:	60b9      	str	r1, [r7, #8]
 81084a6:	607a      	str	r2, [r7, #4]
 81084a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 81084aa:	68fb      	ldr	r3, [r7, #12]
 81084ac:	6a1b      	ldr	r3, [r3, #32]
 81084ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 81084b0:	68fb      	ldr	r3, [r7, #12]
 81084b2:	6a1b      	ldr	r3, [r3, #32]
 81084b4:	f023 0201 	bic.w	r2, r3, #1
 81084b8:	68fb      	ldr	r3, [r7, #12]
 81084ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81084bc:	68fb      	ldr	r3, [r7, #12]
 81084be:	699b      	ldr	r3, [r3, #24]
 81084c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 81084c2:	68fb      	ldr	r3, [r7, #12]
 81084c4:	4a28      	ldr	r2, [pc, #160]	; (8108568 <TIM_TI1_SetConfig+0xcc>)
 81084c6:	4293      	cmp	r3, r2
 81084c8:	d01b      	beq.n	8108502 <TIM_TI1_SetConfig+0x66>
 81084ca:	68fb      	ldr	r3, [r7, #12]
 81084cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81084d0:	d017      	beq.n	8108502 <TIM_TI1_SetConfig+0x66>
 81084d2:	68fb      	ldr	r3, [r7, #12]
 81084d4:	4a25      	ldr	r2, [pc, #148]	; (810856c <TIM_TI1_SetConfig+0xd0>)
 81084d6:	4293      	cmp	r3, r2
 81084d8:	d013      	beq.n	8108502 <TIM_TI1_SetConfig+0x66>
 81084da:	68fb      	ldr	r3, [r7, #12]
 81084dc:	4a24      	ldr	r2, [pc, #144]	; (8108570 <TIM_TI1_SetConfig+0xd4>)
 81084de:	4293      	cmp	r3, r2
 81084e0:	d00f      	beq.n	8108502 <TIM_TI1_SetConfig+0x66>
 81084e2:	68fb      	ldr	r3, [r7, #12]
 81084e4:	4a23      	ldr	r2, [pc, #140]	; (8108574 <TIM_TI1_SetConfig+0xd8>)
 81084e6:	4293      	cmp	r3, r2
 81084e8:	d00b      	beq.n	8108502 <TIM_TI1_SetConfig+0x66>
 81084ea:	68fb      	ldr	r3, [r7, #12]
 81084ec:	4a22      	ldr	r2, [pc, #136]	; (8108578 <TIM_TI1_SetConfig+0xdc>)
 81084ee:	4293      	cmp	r3, r2
 81084f0:	d007      	beq.n	8108502 <TIM_TI1_SetConfig+0x66>
 81084f2:	68fb      	ldr	r3, [r7, #12]
 81084f4:	4a21      	ldr	r2, [pc, #132]	; (810857c <TIM_TI1_SetConfig+0xe0>)
 81084f6:	4293      	cmp	r3, r2
 81084f8:	d003      	beq.n	8108502 <TIM_TI1_SetConfig+0x66>
 81084fa:	68fb      	ldr	r3, [r7, #12]
 81084fc:	4a20      	ldr	r2, [pc, #128]	; (8108580 <TIM_TI1_SetConfig+0xe4>)
 81084fe:	4293      	cmp	r3, r2
 8108500:	d101      	bne.n	8108506 <TIM_TI1_SetConfig+0x6a>
 8108502:	2301      	movs	r3, #1
 8108504:	e000      	b.n	8108508 <TIM_TI1_SetConfig+0x6c>
 8108506:	2300      	movs	r3, #0
 8108508:	2b00      	cmp	r3, #0
 810850a:	d008      	beq.n	810851e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 810850c:	697b      	ldr	r3, [r7, #20]
 810850e:	f023 0303 	bic.w	r3, r3, #3
 8108512:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8108514:	697a      	ldr	r2, [r7, #20]
 8108516:	687b      	ldr	r3, [r7, #4]
 8108518:	4313      	orrs	r3, r2
 810851a:	617b      	str	r3, [r7, #20]
 810851c:	e003      	b.n	8108526 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810851e:	697b      	ldr	r3, [r7, #20]
 8108520:	f043 0301 	orr.w	r3, r3, #1
 8108524:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8108526:	697b      	ldr	r3, [r7, #20]
 8108528:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 810852c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810852e:	683b      	ldr	r3, [r7, #0]
 8108530:	011b      	lsls	r3, r3, #4
 8108532:	b2db      	uxtb	r3, r3
 8108534:	697a      	ldr	r2, [r7, #20]
 8108536:	4313      	orrs	r3, r2
 8108538:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810853a:	693b      	ldr	r3, [r7, #16]
 810853c:	f023 030a 	bic.w	r3, r3, #10
 8108540:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8108542:	68bb      	ldr	r3, [r7, #8]
 8108544:	f003 030a 	and.w	r3, r3, #10
 8108548:	693a      	ldr	r2, [r7, #16]
 810854a:	4313      	orrs	r3, r2
 810854c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810854e:	68fb      	ldr	r3, [r7, #12]
 8108550:	697a      	ldr	r2, [r7, #20]
 8108552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8108554:	68fb      	ldr	r3, [r7, #12]
 8108556:	693a      	ldr	r2, [r7, #16]
 8108558:	621a      	str	r2, [r3, #32]
}
 810855a:	bf00      	nop
 810855c:	371c      	adds	r7, #28
 810855e:	46bd      	mov	sp, r7
 8108560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108564:	4770      	bx	lr
 8108566:	bf00      	nop
 8108568:	40010000 	.word	0x40010000
 810856c:	40000400 	.word	0x40000400
 8108570:	40000800 	.word	0x40000800
 8108574:	40000c00 	.word	0x40000c00
 8108578:	40010400 	.word	0x40010400
 810857c:	40001800 	.word	0x40001800
 8108580:	40014000 	.word	0x40014000

08108584 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8108584:	b480      	push	{r7}
 8108586:	b087      	sub	sp, #28
 8108588:	af00      	add	r7, sp, #0
 810858a:	60f8      	str	r0, [r7, #12]
 810858c:	60b9      	str	r1, [r7, #8]
 810858e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8108590:	68fb      	ldr	r3, [r7, #12]
 8108592:	6a1b      	ldr	r3, [r3, #32]
 8108594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108596:	68fb      	ldr	r3, [r7, #12]
 8108598:	6a1b      	ldr	r3, [r3, #32]
 810859a:	f023 0201 	bic.w	r2, r3, #1
 810859e:	68fb      	ldr	r3, [r7, #12]
 81085a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81085a2:	68fb      	ldr	r3, [r7, #12]
 81085a4:	699b      	ldr	r3, [r3, #24]
 81085a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 81085a8:	693b      	ldr	r3, [r7, #16]
 81085aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81085ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 81085b0:	687b      	ldr	r3, [r7, #4]
 81085b2:	011b      	lsls	r3, r3, #4
 81085b4:	693a      	ldr	r2, [r7, #16]
 81085b6:	4313      	orrs	r3, r2
 81085b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81085ba:	697b      	ldr	r3, [r7, #20]
 81085bc:	f023 030a 	bic.w	r3, r3, #10
 81085c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81085c2:	697a      	ldr	r2, [r7, #20]
 81085c4:	68bb      	ldr	r3, [r7, #8]
 81085c6:	4313      	orrs	r3, r2
 81085c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81085ca:	68fb      	ldr	r3, [r7, #12]
 81085cc:	693a      	ldr	r2, [r7, #16]
 81085ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81085d0:	68fb      	ldr	r3, [r7, #12]
 81085d2:	697a      	ldr	r2, [r7, #20]
 81085d4:	621a      	str	r2, [r3, #32]
}
 81085d6:	bf00      	nop
 81085d8:	371c      	adds	r7, #28
 81085da:	46bd      	mov	sp, r7
 81085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81085e0:	4770      	bx	lr

081085e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81085e2:	b480      	push	{r7}
 81085e4:	b087      	sub	sp, #28
 81085e6:	af00      	add	r7, sp, #0
 81085e8:	60f8      	str	r0, [r7, #12]
 81085ea:	60b9      	str	r1, [r7, #8]
 81085ec:	607a      	str	r2, [r7, #4]
 81085ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 81085f0:	68fb      	ldr	r3, [r7, #12]
 81085f2:	6a1b      	ldr	r3, [r3, #32]
 81085f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81085f6:	68fb      	ldr	r3, [r7, #12]
 81085f8:	6a1b      	ldr	r3, [r3, #32]
 81085fa:	f023 0210 	bic.w	r2, r3, #16
 81085fe:	68fb      	ldr	r3, [r7, #12]
 8108600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8108602:	68fb      	ldr	r3, [r7, #12]
 8108604:	699b      	ldr	r3, [r3, #24]
 8108606:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8108608:	693b      	ldr	r3, [r7, #16]
 810860a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810860e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8108610:	687b      	ldr	r3, [r7, #4]
 8108612:	021b      	lsls	r3, r3, #8
 8108614:	693a      	ldr	r2, [r7, #16]
 8108616:	4313      	orrs	r3, r2
 8108618:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810861a:	693b      	ldr	r3, [r7, #16]
 810861c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8108620:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8108622:	683b      	ldr	r3, [r7, #0]
 8108624:	031b      	lsls	r3, r3, #12
 8108626:	b29b      	uxth	r3, r3
 8108628:	693a      	ldr	r2, [r7, #16]
 810862a:	4313      	orrs	r3, r2
 810862c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810862e:	697b      	ldr	r3, [r7, #20]
 8108630:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8108634:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8108636:	68bb      	ldr	r3, [r7, #8]
 8108638:	011b      	lsls	r3, r3, #4
 810863a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 810863e:	697a      	ldr	r2, [r7, #20]
 8108640:	4313      	orrs	r3, r2
 8108642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8108644:	68fb      	ldr	r3, [r7, #12]
 8108646:	693a      	ldr	r2, [r7, #16]
 8108648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810864a:	68fb      	ldr	r3, [r7, #12]
 810864c:	697a      	ldr	r2, [r7, #20]
 810864e:	621a      	str	r2, [r3, #32]
}
 8108650:	bf00      	nop
 8108652:	371c      	adds	r7, #28
 8108654:	46bd      	mov	sp, r7
 8108656:	f85d 7b04 	ldr.w	r7, [sp], #4
 810865a:	4770      	bx	lr

0810865c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810865c:	b480      	push	{r7}
 810865e:	b087      	sub	sp, #28
 8108660:	af00      	add	r7, sp, #0
 8108662:	60f8      	str	r0, [r7, #12]
 8108664:	60b9      	str	r1, [r7, #8]
 8108666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8108668:	68fb      	ldr	r3, [r7, #12]
 810866a:	6a1b      	ldr	r3, [r3, #32]
 810866c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810866e:	68fb      	ldr	r3, [r7, #12]
 8108670:	6a1b      	ldr	r3, [r3, #32]
 8108672:	f023 0210 	bic.w	r2, r3, #16
 8108676:	68fb      	ldr	r3, [r7, #12]
 8108678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810867a:	68fb      	ldr	r3, [r7, #12]
 810867c:	699b      	ldr	r3, [r3, #24]
 810867e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8108680:	693b      	ldr	r3, [r7, #16]
 8108682:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8108686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8108688:	687b      	ldr	r3, [r7, #4]
 810868a:	031b      	lsls	r3, r3, #12
 810868c:	693a      	ldr	r2, [r7, #16]
 810868e:	4313      	orrs	r3, r2
 8108690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8108692:	697b      	ldr	r3, [r7, #20]
 8108694:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8108698:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 810869a:	68bb      	ldr	r3, [r7, #8]
 810869c:	011b      	lsls	r3, r3, #4
 810869e:	697a      	ldr	r2, [r7, #20]
 81086a0:	4313      	orrs	r3, r2
 81086a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81086a4:	68fb      	ldr	r3, [r7, #12]
 81086a6:	693a      	ldr	r2, [r7, #16]
 81086a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81086aa:	68fb      	ldr	r3, [r7, #12]
 81086ac:	697a      	ldr	r2, [r7, #20]
 81086ae:	621a      	str	r2, [r3, #32]
}
 81086b0:	bf00      	nop
 81086b2:	371c      	adds	r7, #28
 81086b4:	46bd      	mov	sp, r7
 81086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81086ba:	4770      	bx	lr

081086bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 81086bc:	b480      	push	{r7}
 81086be:	b087      	sub	sp, #28
 81086c0:	af00      	add	r7, sp, #0
 81086c2:	60f8      	str	r0, [r7, #12]
 81086c4:	60b9      	str	r1, [r7, #8]
 81086c6:	607a      	str	r2, [r7, #4]
 81086c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 81086ca:	68fb      	ldr	r3, [r7, #12]
 81086cc:	6a1b      	ldr	r3, [r3, #32]
 81086ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 81086d0:	68fb      	ldr	r3, [r7, #12]
 81086d2:	6a1b      	ldr	r3, [r3, #32]
 81086d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81086d8:	68fb      	ldr	r3, [r7, #12]
 81086da:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 81086dc:	68fb      	ldr	r3, [r7, #12]
 81086de:	69db      	ldr	r3, [r3, #28]
 81086e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 81086e2:	693b      	ldr	r3, [r7, #16]
 81086e4:	f023 0303 	bic.w	r3, r3, #3
 81086e8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 81086ea:	693a      	ldr	r2, [r7, #16]
 81086ec:	687b      	ldr	r3, [r7, #4]
 81086ee:	4313      	orrs	r3, r2
 81086f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 81086f2:	693b      	ldr	r3, [r7, #16]
 81086f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 81086f8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 81086fa:	683b      	ldr	r3, [r7, #0]
 81086fc:	011b      	lsls	r3, r3, #4
 81086fe:	b2db      	uxtb	r3, r3
 8108700:	693a      	ldr	r2, [r7, #16]
 8108702:	4313      	orrs	r3, r2
 8108704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8108706:	697b      	ldr	r3, [r7, #20]
 8108708:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 810870c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 810870e:	68bb      	ldr	r3, [r7, #8]
 8108710:	021b      	lsls	r3, r3, #8
 8108712:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8108716:	697a      	ldr	r2, [r7, #20]
 8108718:	4313      	orrs	r3, r2
 810871a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810871c:	68fb      	ldr	r3, [r7, #12]
 810871e:	693a      	ldr	r2, [r7, #16]
 8108720:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8108722:	68fb      	ldr	r3, [r7, #12]
 8108724:	697a      	ldr	r2, [r7, #20]
 8108726:	621a      	str	r2, [r3, #32]
}
 8108728:	bf00      	nop
 810872a:	371c      	adds	r7, #28
 810872c:	46bd      	mov	sp, r7
 810872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108732:	4770      	bx	lr

08108734 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8108734:	b480      	push	{r7}
 8108736:	b087      	sub	sp, #28
 8108738:	af00      	add	r7, sp, #0
 810873a:	60f8      	str	r0, [r7, #12]
 810873c:	60b9      	str	r1, [r7, #8]
 810873e:	607a      	str	r2, [r7, #4]
 8108740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8108742:	68fb      	ldr	r3, [r7, #12]
 8108744:	6a1b      	ldr	r3, [r3, #32]
 8108746:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8108748:	68fb      	ldr	r3, [r7, #12]
 810874a:	6a1b      	ldr	r3, [r3, #32]
 810874c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8108750:	68fb      	ldr	r3, [r7, #12]
 8108752:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8108754:	68fb      	ldr	r3, [r7, #12]
 8108756:	69db      	ldr	r3, [r3, #28]
 8108758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 810875a:	693b      	ldr	r3, [r7, #16]
 810875c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8108760:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8108762:	687b      	ldr	r3, [r7, #4]
 8108764:	021b      	lsls	r3, r3, #8
 8108766:	693a      	ldr	r2, [r7, #16]
 8108768:	4313      	orrs	r3, r2
 810876a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810876c:	693b      	ldr	r3, [r7, #16]
 810876e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8108772:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8108774:	683b      	ldr	r3, [r7, #0]
 8108776:	031b      	lsls	r3, r3, #12
 8108778:	b29b      	uxth	r3, r3
 810877a:	693a      	ldr	r2, [r7, #16]
 810877c:	4313      	orrs	r3, r2
 810877e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8108780:	697b      	ldr	r3, [r7, #20]
 8108782:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8108786:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8108788:	68bb      	ldr	r3, [r7, #8]
 810878a:	031b      	lsls	r3, r3, #12
 810878c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8108790:	697a      	ldr	r2, [r7, #20]
 8108792:	4313      	orrs	r3, r2
 8108794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8108796:	68fb      	ldr	r3, [r7, #12]
 8108798:	693a      	ldr	r2, [r7, #16]
 810879a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810879c:	68fb      	ldr	r3, [r7, #12]
 810879e:	697a      	ldr	r2, [r7, #20]
 81087a0:	621a      	str	r2, [r3, #32]
}
 81087a2:	bf00      	nop
 81087a4:	371c      	adds	r7, #28
 81087a6:	46bd      	mov	sp, r7
 81087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81087ac:	4770      	bx	lr

081087ae <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 81087ae:	b480      	push	{r7}
 81087b0:	b085      	sub	sp, #20
 81087b2:	af00      	add	r7, sp, #0
 81087b4:	6078      	str	r0, [r7, #4]
 81087b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 81087b8:	687b      	ldr	r3, [r7, #4]
 81087ba:	689b      	ldr	r3, [r3, #8]
 81087bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 81087be:	68fb      	ldr	r3, [r7, #12]
 81087c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 81087c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81087c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 81087ca:	683a      	ldr	r2, [r7, #0]
 81087cc:	68fb      	ldr	r3, [r7, #12]
 81087ce:	4313      	orrs	r3, r2
 81087d0:	f043 0307 	orr.w	r3, r3, #7
 81087d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 81087d6:	687b      	ldr	r3, [r7, #4]
 81087d8:	68fa      	ldr	r2, [r7, #12]
 81087da:	609a      	str	r2, [r3, #8]
}
 81087dc:	bf00      	nop
 81087de:	3714      	adds	r7, #20
 81087e0:	46bd      	mov	sp, r7
 81087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81087e6:	4770      	bx	lr

081087e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 81087e8:	b480      	push	{r7}
 81087ea:	b087      	sub	sp, #28
 81087ec:	af00      	add	r7, sp, #0
 81087ee:	60f8      	str	r0, [r7, #12]
 81087f0:	60b9      	str	r1, [r7, #8]
 81087f2:	607a      	str	r2, [r7, #4]
 81087f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 81087f6:	68fb      	ldr	r3, [r7, #12]
 81087f8:	689b      	ldr	r3, [r3, #8]
 81087fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81087fc:	697b      	ldr	r3, [r7, #20]
 81087fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8108802:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8108804:	683b      	ldr	r3, [r7, #0]
 8108806:	021a      	lsls	r2, r3, #8
 8108808:	687b      	ldr	r3, [r7, #4]
 810880a:	431a      	orrs	r2, r3
 810880c:	68bb      	ldr	r3, [r7, #8]
 810880e:	4313      	orrs	r3, r2
 8108810:	697a      	ldr	r2, [r7, #20]
 8108812:	4313      	orrs	r3, r2
 8108814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8108816:	68fb      	ldr	r3, [r7, #12]
 8108818:	697a      	ldr	r2, [r7, #20]
 810881a:	609a      	str	r2, [r3, #8]
}
 810881c:	bf00      	nop
 810881e:	371c      	adds	r7, #28
 8108820:	46bd      	mov	sp, r7
 8108822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108826:	4770      	bx	lr

08108828 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8108828:	b480      	push	{r7}
 810882a:	b087      	sub	sp, #28
 810882c:	af00      	add	r7, sp, #0
 810882e:	60f8      	str	r0, [r7, #12]
 8108830:	60b9      	str	r1, [r7, #8]
 8108832:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8108834:	68bb      	ldr	r3, [r7, #8]
 8108836:	f003 031f 	and.w	r3, r3, #31
 810883a:	2201      	movs	r2, #1
 810883c:	fa02 f303 	lsl.w	r3, r2, r3
 8108840:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8108842:	68fb      	ldr	r3, [r7, #12]
 8108844:	6a1a      	ldr	r2, [r3, #32]
 8108846:	697b      	ldr	r3, [r7, #20]
 8108848:	43db      	mvns	r3, r3
 810884a:	401a      	ands	r2, r3
 810884c:	68fb      	ldr	r3, [r7, #12]
 810884e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8108850:	68fb      	ldr	r3, [r7, #12]
 8108852:	6a1a      	ldr	r2, [r3, #32]
 8108854:	68bb      	ldr	r3, [r7, #8]
 8108856:	f003 031f 	and.w	r3, r3, #31
 810885a:	6879      	ldr	r1, [r7, #4]
 810885c:	fa01 f303 	lsl.w	r3, r1, r3
 8108860:	431a      	orrs	r2, r3
 8108862:	68fb      	ldr	r3, [r7, #12]
 8108864:	621a      	str	r2, [r3, #32]
}
 8108866:	bf00      	nop
 8108868:	371c      	adds	r7, #28
 810886a:	46bd      	mov	sp, r7
 810886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108870:	4770      	bx	lr
	...

08108874 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8108874:	b480      	push	{r7}
 8108876:	b085      	sub	sp, #20
 8108878:	af00      	add	r7, sp, #0
 810887a:	6078      	str	r0, [r7, #4]
 810887c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810887e:	687b      	ldr	r3, [r7, #4]
 8108880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8108884:	2b01      	cmp	r3, #1
 8108886:	d101      	bne.n	810888c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8108888:	2302      	movs	r3, #2
 810888a:	e06d      	b.n	8108968 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810888c:	687b      	ldr	r3, [r7, #4]
 810888e:	2201      	movs	r2, #1
 8108890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8108894:	687b      	ldr	r3, [r7, #4]
 8108896:	2202      	movs	r2, #2
 8108898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810889c:	687b      	ldr	r3, [r7, #4]
 810889e:	681b      	ldr	r3, [r3, #0]
 81088a0:	685b      	ldr	r3, [r3, #4]
 81088a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 81088a4:	687b      	ldr	r3, [r7, #4]
 81088a6:	681b      	ldr	r3, [r3, #0]
 81088a8:	689b      	ldr	r3, [r3, #8]
 81088aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 81088ac:	687b      	ldr	r3, [r7, #4]
 81088ae:	681b      	ldr	r3, [r3, #0]
 81088b0:	4a30      	ldr	r2, [pc, #192]	; (8108974 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81088b2:	4293      	cmp	r3, r2
 81088b4:	d004      	beq.n	81088c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 81088b6:	687b      	ldr	r3, [r7, #4]
 81088b8:	681b      	ldr	r3, [r3, #0]
 81088ba:	4a2f      	ldr	r2, [pc, #188]	; (8108978 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81088bc:	4293      	cmp	r3, r2
 81088be:	d108      	bne.n	81088d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 81088c0:	68fb      	ldr	r3, [r7, #12]
 81088c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 81088c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 81088c8:	683b      	ldr	r3, [r7, #0]
 81088ca:	685b      	ldr	r3, [r3, #4]
 81088cc:	68fa      	ldr	r2, [r7, #12]
 81088ce:	4313      	orrs	r3, r2
 81088d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 81088d2:	68fb      	ldr	r3, [r7, #12]
 81088d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 81088d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 81088da:	683b      	ldr	r3, [r7, #0]
 81088dc:	681b      	ldr	r3, [r3, #0]
 81088de:	68fa      	ldr	r2, [r7, #12]
 81088e0:	4313      	orrs	r3, r2
 81088e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 81088e4:	687b      	ldr	r3, [r7, #4]
 81088e6:	681b      	ldr	r3, [r3, #0]
 81088e8:	68fa      	ldr	r2, [r7, #12]
 81088ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81088ec:	687b      	ldr	r3, [r7, #4]
 81088ee:	681b      	ldr	r3, [r3, #0]
 81088f0:	4a20      	ldr	r2, [pc, #128]	; (8108974 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 81088f2:	4293      	cmp	r3, r2
 81088f4:	d022      	beq.n	810893c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81088f6:	687b      	ldr	r3, [r7, #4]
 81088f8:	681b      	ldr	r3, [r3, #0]
 81088fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81088fe:	d01d      	beq.n	810893c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108900:	687b      	ldr	r3, [r7, #4]
 8108902:	681b      	ldr	r3, [r3, #0]
 8108904:	4a1d      	ldr	r2, [pc, #116]	; (810897c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8108906:	4293      	cmp	r3, r2
 8108908:	d018      	beq.n	810893c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810890a:	687b      	ldr	r3, [r7, #4]
 810890c:	681b      	ldr	r3, [r3, #0]
 810890e:	4a1c      	ldr	r2, [pc, #112]	; (8108980 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8108910:	4293      	cmp	r3, r2
 8108912:	d013      	beq.n	810893c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108914:	687b      	ldr	r3, [r7, #4]
 8108916:	681b      	ldr	r3, [r3, #0]
 8108918:	4a1a      	ldr	r2, [pc, #104]	; (8108984 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810891a:	4293      	cmp	r3, r2
 810891c:	d00e      	beq.n	810893c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810891e:	687b      	ldr	r3, [r7, #4]
 8108920:	681b      	ldr	r3, [r3, #0]
 8108922:	4a15      	ldr	r2, [pc, #84]	; (8108978 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8108924:	4293      	cmp	r3, r2
 8108926:	d009      	beq.n	810893c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108928:	687b      	ldr	r3, [r7, #4]
 810892a:	681b      	ldr	r3, [r3, #0]
 810892c:	4a16      	ldr	r2, [pc, #88]	; (8108988 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810892e:	4293      	cmp	r3, r2
 8108930:	d004      	beq.n	810893c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8108932:	687b      	ldr	r3, [r7, #4]
 8108934:	681b      	ldr	r3, [r3, #0]
 8108936:	4a15      	ldr	r2, [pc, #84]	; (810898c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8108938:	4293      	cmp	r3, r2
 810893a:	d10c      	bne.n	8108956 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810893c:	68bb      	ldr	r3, [r7, #8]
 810893e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8108942:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8108944:	683b      	ldr	r3, [r7, #0]
 8108946:	689b      	ldr	r3, [r3, #8]
 8108948:	68ba      	ldr	r2, [r7, #8]
 810894a:	4313      	orrs	r3, r2
 810894c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810894e:	687b      	ldr	r3, [r7, #4]
 8108950:	681b      	ldr	r3, [r3, #0]
 8108952:	68ba      	ldr	r2, [r7, #8]
 8108954:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8108956:	687b      	ldr	r3, [r7, #4]
 8108958:	2201      	movs	r2, #1
 810895a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 810895e:	687b      	ldr	r3, [r7, #4]
 8108960:	2200      	movs	r2, #0
 8108962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8108966:	2300      	movs	r3, #0
}
 8108968:	4618      	mov	r0, r3
 810896a:	3714      	adds	r7, #20
 810896c:	46bd      	mov	sp, r7
 810896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108972:	4770      	bx	lr
 8108974:	40010000 	.word	0x40010000
 8108978:	40010400 	.word	0x40010400
 810897c:	40000400 	.word	0x40000400
 8108980:	40000800 	.word	0x40000800
 8108984:	40000c00 	.word	0x40000c00
 8108988:	40001800 	.word	0x40001800
 810898c:	40014000 	.word	0x40014000

08108990 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8108990:	b480      	push	{r7}
 8108992:	b083      	sub	sp, #12
 8108994:	af00      	add	r7, sp, #0
 8108996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8108998:	bf00      	nop
 810899a:	370c      	adds	r7, #12
 810899c:	46bd      	mov	sp, r7
 810899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089a2:	4770      	bx	lr

081089a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 81089a4:	b480      	push	{r7}
 81089a6:	b083      	sub	sp, #12
 81089a8:	af00      	add	r7, sp, #0
 81089aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 81089ac:	bf00      	nop
 81089ae:	370c      	adds	r7, #12
 81089b0:	46bd      	mov	sp, r7
 81089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089b6:	4770      	bx	lr

081089b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 81089b8:	b480      	push	{r7}
 81089ba:	b083      	sub	sp, #12
 81089bc:	af00      	add	r7, sp, #0
 81089be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 81089c0:	bf00      	nop
 81089c2:	370c      	adds	r7, #12
 81089c4:	46bd      	mov	sp, r7
 81089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81089ca:	4770      	bx	lr

081089cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81089cc:	b580      	push	{r7, lr}
 81089ce:	b082      	sub	sp, #8
 81089d0:	af00      	add	r7, sp, #0
 81089d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81089d4:	687b      	ldr	r3, [r7, #4]
 81089d6:	2b00      	cmp	r3, #0
 81089d8:	d101      	bne.n	81089de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81089da:	2301      	movs	r3, #1
 81089dc:	e042      	b.n	8108a64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81089de:	687b      	ldr	r3, [r7, #4]
 81089e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81089e4:	2b00      	cmp	r3, #0
 81089e6:	d106      	bne.n	81089f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81089e8:	687b      	ldr	r3, [r7, #4]
 81089ea:	2200      	movs	r2, #0
 81089ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81089f0:	6878      	ldr	r0, [r7, #4]
 81089f2:	f7fa fb77 	bl	81030e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81089f6:	687b      	ldr	r3, [r7, #4]
 81089f8:	2224      	movs	r2, #36	; 0x24
 81089fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 81089fe:	687b      	ldr	r3, [r7, #4]
 8108a00:	681b      	ldr	r3, [r3, #0]
 8108a02:	681a      	ldr	r2, [r3, #0]
 8108a04:	687b      	ldr	r3, [r7, #4]
 8108a06:	681b      	ldr	r3, [r3, #0]
 8108a08:	f022 0201 	bic.w	r2, r2, #1
 8108a0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8108a0e:	687b      	ldr	r3, [r7, #4]
 8108a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8108a12:	2b00      	cmp	r3, #0
 8108a14:	d002      	beq.n	8108a1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8108a16:	6878      	ldr	r0, [r7, #4]
 8108a18:	f000 fe1e 	bl	8109658 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8108a1c:	6878      	ldr	r0, [r7, #4]
 8108a1e:	f000 f8b3 	bl	8108b88 <UART_SetConfig>
 8108a22:	4603      	mov	r3, r0
 8108a24:	2b01      	cmp	r3, #1
 8108a26:	d101      	bne.n	8108a2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8108a28:	2301      	movs	r3, #1
 8108a2a:	e01b      	b.n	8108a64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8108a2c:	687b      	ldr	r3, [r7, #4]
 8108a2e:	681b      	ldr	r3, [r3, #0]
 8108a30:	685a      	ldr	r2, [r3, #4]
 8108a32:	687b      	ldr	r3, [r7, #4]
 8108a34:	681b      	ldr	r3, [r3, #0]
 8108a36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8108a3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8108a3c:	687b      	ldr	r3, [r7, #4]
 8108a3e:	681b      	ldr	r3, [r3, #0]
 8108a40:	689a      	ldr	r2, [r3, #8]
 8108a42:	687b      	ldr	r3, [r7, #4]
 8108a44:	681b      	ldr	r3, [r3, #0]
 8108a46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8108a4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8108a4c:	687b      	ldr	r3, [r7, #4]
 8108a4e:	681b      	ldr	r3, [r3, #0]
 8108a50:	681a      	ldr	r2, [r3, #0]
 8108a52:	687b      	ldr	r3, [r7, #4]
 8108a54:	681b      	ldr	r3, [r3, #0]
 8108a56:	f042 0201 	orr.w	r2, r2, #1
 8108a5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8108a5c:	6878      	ldr	r0, [r7, #4]
 8108a5e:	f000 fe9d 	bl	810979c <UART_CheckIdleState>
 8108a62:	4603      	mov	r3, r0
}
 8108a64:	4618      	mov	r0, r3
 8108a66:	3708      	adds	r7, #8
 8108a68:	46bd      	mov	sp, r7
 8108a6a:	bd80      	pop	{r7, pc}

08108a6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8108a6c:	b580      	push	{r7, lr}
 8108a6e:	b08a      	sub	sp, #40	; 0x28
 8108a70:	af02      	add	r7, sp, #8
 8108a72:	60f8      	str	r0, [r7, #12]
 8108a74:	60b9      	str	r1, [r7, #8]
 8108a76:	603b      	str	r3, [r7, #0]
 8108a78:	4613      	mov	r3, r2
 8108a7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8108a7c:	68fb      	ldr	r3, [r7, #12]
 8108a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8108a82:	2b20      	cmp	r3, #32
 8108a84:	d17b      	bne.n	8108b7e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8108a86:	68bb      	ldr	r3, [r7, #8]
 8108a88:	2b00      	cmp	r3, #0
 8108a8a:	d002      	beq.n	8108a92 <HAL_UART_Transmit+0x26>
 8108a8c:	88fb      	ldrh	r3, [r7, #6]
 8108a8e:	2b00      	cmp	r3, #0
 8108a90:	d101      	bne.n	8108a96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8108a92:	2301      	movs	r3, #1
 8108a94:	e074      	b.n	8108b80 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8108a96:	68fb      	ldr	r3, [r7, #12]
 8108a98:	2200      	movs	r2, #0
 8108a9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8108a9e:	68fb      	ldr	r3, [r7, #12]
 8108aa0:	2221      	movs	r2, #33	; 0x21
 8108aa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8108aa6:	f7fa fd69 	bl	810357c <HAL_GetTick>
 8108aaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8108aac:	68fb      	ldr	r3, [r7, #12]
 8108aae:	88fa      	ldrh	r2, [r7, #6]
 8108ab0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8108ab4:	68fb      	ldr	r3, [r7, #12]
 8108ab6:	88fa      	ldrh	r2, [r7, #6]
 8108ab8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8108abc:	68fb      	ldr	r3, [r7, #12]
 8108abe:	689b      	ldr	r3, [r3, #8]
 8108ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8108ac4:	d108      	bne.n	8108ad8 <HAL_UART_Transmit+0x6c>
 8108ac6:	68fb      	ldr	r3, [r7, #12]
 8108ac8:	691b      	ldr	r3, [r3, #16]
 8108aca:	2b00      	cmp	r3, #0
 8108acc:	d104      	bne.n	8108ad8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8108ace:	2300      	movs	r3, #0
 8108ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8108ad2:	68bb      	ldr	r3, [r7, #8]
 8108ad4:	61bb      	str	r3, [r7, #24]
 8108ad6:	e003      	b.n	8108ae0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8108ad8:	68bb      	ldr	r3, [r7, #8]
 8108ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8108adc:	2300      	movs	r3, #0
 8108ade:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8108ae0:	e030      	b.n	8108b44 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8108ae2:	683b      	ldr	r3, [r7, #0]
 8108ae4:	9300      	str	r3, [sp, #0]
 8108ae6:	697b      	ldr	r3, [r7, #20]
 8108ae8:	2200      	movs	r2, #0
 8108aea:	2180      	movs	r1, #128	; 0x80
 8108aec:	68f8      	ldr	r0, [r7, #12]
 8108aee:	f000 feff 	bl	81098f0 <UART_WaitOnFlagUntilTimeout>
 8108af2:	4603      	mov	r3, r0
 8108af4:	2b00      	cmp	r3, #0
 8108af6:	d005      	beq.n	8108b04 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8108af8:	68fb      	ldr	r3, [r7, #12]
 8108afa:	2220      	movs	r2, #32
 8108afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8108b00:	2303      	movs	r3, #3
 8108b02:	e03d      	b.n	8108b80 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8108b04:	69fb      	ldr	r3, [r7, #28]
 8108b06:	2b00      	cmp	r3, #0
 8108b08:	d10b      	bne.n	8108b22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8108b0a:	69bb      	ldr	r3, [r7, #24]
 8108b0c:	881b      	ldrh	r3, [r3, #0]
 8108b0e:	461a      	mov	r2, r3
 8108b10:	68fb      	ldr	r3, [r7, #12]
 8108b12:	681b      	ldr	r3, [r3, #0]
 8108b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8108b18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8108b1a:	69bb      	ldr	r3, [r7, #24]
 8108b1c:	3302      	adds	r3, #2
 8108b1e:	61bb      	str	r3, [r7, #24]
 8108b20:	e007      	b.n	8108b32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8108b22:	69fb      	ldr	r3, [r7, #28]
 8108b24:	781a      	ldrb	r2, [r3, #0]
 8108b26:	68fb      	ldr	r3, [r7, #12]
 8108b28:	681b      	ldr	r3, [r3, #0]
 8108b2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8108b2c:	69fb      	ldr	r3, [r7, #28]
 8108b2e:	3301      	adds	r3, #1
 8108b30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8108b32:	68fb      	ldr	r3, [r7, #12]
 8108b34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108b38:	b29b      	uxth	r3, r3
 8108b3a:	3b01      	subs	r3, #1
 8108b3c:	b29a      	uxth	r2, r3
 8108b3e:	68fb      	ldr	r3, [r7, #12]
 8108b40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8108b44:	68fb      	ldr	r3, [r7, #12]
 8108b46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8108b4a:	b29b      	uxth	r3, r3
 8108b4c:	2b00      	cmp	r3, #0
 8108b4e:	d1c8      	bne.n	8108ae2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8108b50:	683b      	ldr	r3, [r7, #0]
 8108b52:	9300      	str	r3, [sp, #0]
 8108b54:	697b      	ldr	r3, [r7, #20]
 8108b56:	2200      	movs	r2, #0
 8108b58:	2140      	movs	r1, #64	; 0x40
 8108b5a:	68f8      	ldr	r0, [r7, #12]
 8108b5c:	f000 fec8 	bl	81098f0 <UART_WaitOnFlagUntilTimeout>
 8108b60:	4603      	mov	r3, r0
 8108b62:	2b00      	cmp	r3, #0
 8108b64:	d005      	beq.n	8108b72 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8108b66:	68fb      	ldr	r3, [r7, #12]
 8108b68:	2220      	movs	r2, #32
 8108b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8108b6e:	2303      	movs	r3, #3
 8108b70:	e006      	b.n	8108b80 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8108b72:	68fb      	ldr	r3, [r7, #12]
 8108b74:	2220      	movs	r2, #32
 8108b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8108b7a:	2300      	movs	r3, #0
 8108b7c:	e000      	b.n	8108b80 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8108b7e:	2302      	movs	r3, #2
  }
}
 8108b80:	4618      	mov	r0, r3
 8108b82:	3720      	adds	r7, #32
 8108b84:	46bd      	mov	sp, r7
 8108b86:	bd80      	pop	{r7, pc}

08108b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8108b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8108b8c:	b092      	sub	sp, #72	; 0x48
 8108b8e:	af00      	add	r7, sp, #0
 8108b90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8108b92:	2300      	movs	r3, #0
 8108b94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8108b98:	697b      	ldr	r3, [r7, #20]
 8108b9a:	689a      	ldr	r2, [r3, #8]
 8108b9c:	697b      	ldr	r3, [r7, #20]
 8108b9e:	691b      	ldr	r3, [r3, #16]
 8108ba0:	431a      	orrs	r2, r3
 8108ba2:	697b      	ldr	r3, [r7, #20]
 8108ba4:	695b      	ldr	r3, [r3, #20]
 8108ba6:	431a      	orrs	r2, r3
 8108ba8:	697b      	ldr	r3, [r7, #20]
 8108baa:	69db      	ldr	r3, [r3, #28]
 8108bac:	4313      	orrs	r3, r2
 8108bae:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8108bb0:	697b      	ldr	r3, [r7, #20]
 8108bb2:	681b      	ldr	r3, [r3, #0]
 8108bb4:	681a      	ldr	r2, [r3, #0]
 8108bb6:	4bbd      	ldr	r3, [pc, #756]	; (8108eac <UART_SetConfig+0x324>)
 8108bb8:	4013      	ands	r3, r2
 8108bba:	697a      	ldr	r2, [r7, #20]
 8108bbc:	6812      	ldr	r2, [r2, #0]
 8108bbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108bc0:	430b      	orrs	r3, r1
 8108bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8108bc4:	697b      	ldr	r3, [r7, #20]
 8108bc6:	681b      	ldr	r3, [r3, #0]
 8108bc8:	685b      	ldr	r3, [r3, #4]
 8108bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8108bce:	697b      	ldr	r3, [r7, #20]
 8108bd0:	68da      	ldr	r2, [r3, #12]
 8108bd2:	697b      	ldr	r3, [r7, #20]
 8108bd4:	681b      	ldr	r3, [r3, #0]
 8108bd6:	430a      	orrs	r2, r1
 8108bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8108bda:	697b      	ldr	r3, [r7, #20]
 8108bdc:	699b      	ldr	r3, [r3, #24]
 8108bde:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8108be0:	697b      	ldr	r3, [r7, #20]
 8108be2:	681b      	ldr	r3, [r3, #0]
 8108be4:	4ab2      	ldr	r2, [pc, #712]	; (8108eb0 <UART_SetConfig+0x328>)
 8108be6:	4293      	cmp	r3, r2
 8108be8:	d004      	beq.n	8108bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8108bea:	697b      	ldr	r3, [r7, #20]
 8108bec:	6a1b      	ldr	r3, [r3, #32]
 8108bee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8108bf0:	4313      	orrs	r3, r2
 8108bf2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8108bf4:	697b      	ldr	r3, [r7, #20]
 8108bf6:	681b      	ldr	r3, [r3, #0]
 8108bf8:	689b      	ldr	r3, [r3, #8]
 8108bfa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8108bfe:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8108c02:	697a      	ldr	r2, [r7, #20]
 8108c04:	6812      	ldr	r2, [r2, #0]
 8108c06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8108c08:	430b      	orrs	r3, r1
 8108c0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8108c0c:	697b      	ldr	r3, [r7, #20]
 8108c0e:	681b      	ldr	r3, [r3, #0]
 8108c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8108c12:	f023 010f 	bic.w	r1, r3, #15
 8108c16:	697b      	ldr	r3, [r7, #20]
 8108c18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8108c1a:	697b      	ldr	r3, [r7, #20]
 8108c1c:	681b      	ldr	r3, [r3, #0]
 8108c1e:	430a      	orrs	r2, r1
 8108c20:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8108c22:	697b      	ldr	r3, [r7, #20]
 8108c24:	681b      	ldr	r3, [r3, #0]
 8108c26:	4aa3      	ldr	r2, [pc, #652]	; (8108eb4 <UART_SetConfig+0x32c>)
 8108c28:	4293      	cmp	r3, r2
 8108c2a:	d177      	bne.n	8108d1c <UART_SetConfig+0x194>
 8108c2c:	4ba2      	ldr	r3, [pc, #648]	; (8108eb8 <UART_SetConfig+0x330>)
 8108c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108c30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108c34:	2b28      	cmp	r3, #40	; 0x28
 8108c36:	d86d      	bhi.n	8108d14 <UART_SetConfig+0x18c>
 8108c38:	a201      	add	r2, pc, #4	; (adr r2, 8108c40 <UART_SetConfig+0xb8>)
 8108c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108c3e:	bf00      	nop
 8108c40:	08108ce5 	.word	0x08108ce5
 8108c44:	08108d15 	.word	0x08108d15
 8108c48:	08108d15 	.word	0x08108d15
 8108c4c:	08108d15 	.word	0x08108d15
 8108c50:	08108d15 	.word	0x08108d15
 8108c54:	08108d15 	.word	0x08108d15
 8108c58:	08108d15 	.word	0x08108d15
 8108c5c:	08108d15 	.word	0x08108d15
 8108c60:	08108ced 	.word	0x08108ced
 8108c64:	08108d15 	.word	0x08108d15
 8108c68:	08108d15 	.word	0x08108d15
 8108c6c:	08108d15 	.word	0x08108d15
 8108c70:	08108d15 	.word	0x08108d15
 8108c74:	08108d15 	.word	0x08108d15
 8108c78:	08108d15 	.word	0x08108d15
 8108c7c:	08108d15 	.word	0x08108d15
 8108c80:	08108cf5 	.word	0x08108cf5
 8108c84:	08108d15 	.word	0x08108d15
 8108c88:	08108d15 	.word	0x08108d15
 8108c8c:	08108d15 	.word	0x08108d15
 8108c90:	08108d15 	.word	0x08108d15
 8108c94:	08108d15 	.word	0x08108d15
 8108c98:	08108d15 	.word	0x08108d15
 8108c9c:	08108d15 	.word	0x08108d15
 8108ca0:	08108cfd 	.word	0x08108cfd
 8108ca4:	08108d15 	.word	0x08108d15
 8108ca8:	08108d15 	.word	0x08108d15
 8108cac:	08108d15 	.word	0x08108d15
 8108cb0:	08108d15 	.word	0x08108d15
 8108cb4:	08108d15 	.word	0x08108d15
 8108cb8:	08108d15 	.word	0x08108d15
 8108cbc:	08108d15 	.word	0x08108d15
 8108cc0:	08108d05 	.word	0x08108d05
 8108cc4:	08108d15 	.word	0x08108d15
 8108cc8:	08108d15 	.word	0x08108d15
 8108ccc:	08108d15 	.word	0x08108d15
 8108cd0:	08108d15 	.word	0x08108d15
 8108cd4:	08108d15 	.word	0x08108d15
 8108cd8:	08108d15 	.word	0x08108d15
 8108cdc:	08108d15 	.word	0x08108d15
 8108ce0:	08108d0d 	.word	0x08108d0d
 8108ce4:	2301      	movs	r3, #1
 8108ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108cea:	e220      	b.n	810912e <UART_SetConfig+0x5a6>
 8108cec:	2304      	movs	r3, #4
 8108cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108cf2:	e21c      	b.n	810912e <UART_SetConfig+0x5a6>
 8108cf4:	2308      	movs	r3, #8
 8108cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108cfa:	e218      	b.n	810912e <UART_SetConfig+0x5a6>
 8108cfc:	2310      	movs	r3, #16
 8108cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d02:	e214      	b.n	810912e <UART_SetConfig+0x5a6>
 8108d04:	2320      	movs	r3, #32
 8108d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d0a:	e210      	b.n	810912e <UART_SetConfig+0x5a6>
 8108d0c:	2340      	movs	r3, #64	; 0x40
 8108d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d12:	e20c      	b.n	810912e <UART_SetConfig+0x5a6>
 8108d14:	2380      	movs	r3, #128	; 0x80
 8108d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d1a:	e208      	b.n	810912e <UART_SetConfig+0x5a6>
 8108d1c:	697b      	ldr	r3, [r7, #20]
 8108d1e:	681b      	ldr	r3, [r3, #0]
 8108d20:	4a66      	ldr	r2, [pc, #408]	; (8108ebc <UART_SetConfig+0x334>)
 8108d22:	4293      	cmp	r3, r2
 8108d24:	d130      	bne.n	8108d88 <UART_SetConfig+0x200>
 8108d26:	4b64      	ldr	r3, [pc, #400]	; (8108eb8 <UART_SetConfig+0x330>)
 8108d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108d2a:	f003 0307 	and.w	r3, r3, #7
 8108d2e:	2b05      	cmp	r3, #5
 8108d30:	d826      	bhi.n	8108d80 <UART_SetConfig+0x1f8>
 8108d32:	a201      	add	r2, pc, #4	; (adr r2, 8108d38 <UART_SetConfig+0x1b0>)
 8108d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108d38:	08108d51 	.word	0x08108d51
 8108d3c:	08108d59 	.word	0x08108d59
 8108d40:	08108d61 	.word	0x08108d61
 8108d44:	08108d69 	.word	0x08108d69
 8108d48:	08108d71 	.word	0x08108d71
 8108d4c:	08108d79 	.word	0x08108d79
 8108d50:	2300      	movs	r3, #0
 8108d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d56:	e1ea      	b.n	810912e <UART_SetConfig+0x5a6>
 8108d58:	2304      	movs	r3, #4
 8108d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d5e:	e1e6      	b.n	810912e <UART_SetConfig+0x5a6>
 8108d60:	2308      	movs	r3, #8
 8108d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d66:	e1e2      	b.n	810912e <UART_SetConfig+0x5a6>
 8108d68:	2310      	movs	r3, #16
 8108d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d6e:	e1de      	b.n	810912e <UART_SetConfig+0x5a6>
 8108d70:	2320      	movs	r3, #32
 8108d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d76:	e1da      	b.n	810912e <UART_SetConfig+0x5a6>
 8108d78:	2340      	movs	r3, #64	; 0x40
 8108d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d7e:	e1d6      	b.n	810912e <UART_SetConfig+0x5a6>
 8108d80:	2380      	movs	r3, #128	; 0x80
 8108d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108d86:	e1d2      	b.n	810912e <UART_SetConfig+0x5a6>
 8108d88:	697b      	ldr	r3, [r7, #20]
 8108d8a:	681b      	ldr	r3, [r3, #0]
 8108d8c:	4a4c      	ldr	r2, [pc, #304]	; (8108ec0 <UART_SetConfig+0x338>)
 8108d8e:	4293      	cmp	r3, r2
 8108d90:	d130      	bne.n	8108df4 <UART_SetConfig+0x26c>
 8108d92:	4b49      	ldr	r3, [pc, #292]	; (8108eb8 <UART_SetConfig+0x330>)
 8108d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108d96:	f003 0307 	and.w	r3, r3, #7
 8108d9a:	2b05      	cmp	r3, #5
 8108d9c:	d826      	bhi.n	8108dec <UART_SetConfig+0x264>
 8108d9e:	a201      	add	r2, pc, #4	; (adr r2, 8108da4 <UART_SetConfig+0x21c>)
 8108da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108da4:	08108dbd 	.word	0x08108dbd
 8108da8:	08108dc5 	.word	0x08108dc5
 8108dac:	08108dcd 	.word	0x08108dcd
 8108db0:	08108dd5 	.word	0x08108dd5
 8108db4:	08108ddd 	.word	0x08108ddd
 8108db8:	08108de5 	.word	0x08108de5
 8108dbc:	2300      	movs	r3, #0
 8108dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108dc2:	e1b4      	b.n	810912e <UART_SetConfig+0x5a6>
 8108dc4:	2304      	movs	r3, #4
 8108dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108dca:	e1b0      	b.n	810912e <UART_SetConfig+0x5a6>
 8108dcc:	2308      	movs	r3, #8
 8108dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108dd2:	e1ac      	b.n	810912e <UART_SetConfig+0x5a6>
 8108dd4:	2310      	movs	r3, #16
 8108dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108dda:	e1a8      	b.n	810912e <UART_SetConfig+0x5a6>
 8108ddc:	2320      	movs	r3, #32
 8108dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108de2:	e1a4      	b.n	810912e <UART_SetConfig+0x5a6>
 8108de4:	2340      	movs	r3, #64	; 0x40
 8108de6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108dea:	e1a0      	b.n	810912e <UART_SetConfig+0x5a6>
 8108dec:	2380      	movs	r3, #128	; 0x80
 8108dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108df2:	e19c      	b.n	810912e <UART_SetConfig+0x5a6>
 8108df4:	697b      	ldr	r3, [r7, #20]
 8108df6:	681b      	ldr	r3, [r3, #0]
 8108df8:	4a32      	ldr	r2, [pc, #200]	; (8108ec4 <UART_SetConfig+0x33c>)
 8108dfa:	4293      	cmp	r3, r2
 8108dfc:	d130      	bne.n	8108e60 <UART_SetConfig+0x2d8>
 8108dfe:	4b2e      	ldr	r3, [pc, #184]	; (8108eb8 <UART_SetConfig+0x330>)
 8108e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108e02:	f003 0307 	and.w	r3, r3, #7
 8108e06:	2b05      	cmp	r3, #5
 8108e08:	d826      	bhi.n	8108e58 <UART_SetConfig+0x2d0>
 8108e0a:	a201      	add	r2, pc, #4	; (adr r2, 8108e10 <UART_SetConfig+0x288>)
 8108e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108e10:	08108e29 	.word	0x08108e29
 8108e14:	08108e31 	.word	0x08108e31
 8108e18:	08108e39 	.word	0x08108e39
 8108e1c:	08108e41 	.word	0x08108e41
 8108e20:	08108e49 	.word	0x08108e49
 8108e24:	08108e51 	.word	0x08108e51
 8108e28:	2300      	movs	r3, #0
 8108e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e2e:	e17e      	b.n	810912e <UART_SetConfig+0x5a6>
 8108e30:	2304      	movs	r3, #4
 8108e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e36:	e17a      	b.n	810912e <UART_SetConfig+0x5a6>
 8108e38:	2308      	movs	r3, #8
 8108e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e3e:	e176      	b.n	810912e <UART_SetConfig+0x5a6>
 8108e40:	2310      	movs	r3, #16
 8108e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e46:	e172      	b.n	810912e <UART_SetConfig+0x5a6>
 8108e48:	2320      	movs	r3, #32
 8108e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e4e:	e16e      	b.n	810912e <UART_SetConfig+0x5a6>
 8108e50:	2340      	movs	r3, #64	; 0x40
 8108e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e56:	e16a      	b.n	810912e <UART_SetConfig+0x5a6>
 8108e58:	2380      	movs	r3, #128	; 0x80
 8108e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e5e:	e166      	b.n	810912e <UART_SetConfig+0x5a6>
 8108e60:	697b      	ldr	r3, [r7, #20]
 8108e62:	681b      	ldr	r3, [r3, #0]
 8108e64:	4a18      	ldr	r2, [pc, #96]	; (8108ec8 <UART_SetConfig+0x340>)
 8108e66:	4293      	cmp	r3, r2
 8108e68:	d140      	bne.n	8108eec <UART_SetConfig+0x364>
 8108e6a:	4b13      	ldr	r3, [pc, #76]	; (8108eb8 <UART_SetConfig+0x330>)
 8108e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108e6e:	f003 0307 	and.w	r3, r3, #7
 8108e72:	2b05      	cmp	r3, #5
 8108e74:	d836      	bhi.n	8108ee4 <UART_SetConfig+0x35c>
 8108e76:	a201      	add	r2, pc, #4	; (adr r2, 8108e7c <UART_SetConfig+0x2f4>)
 8108e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108e7c:	08108e95 	.word	0x08108e95
 8108e80:	08108e9d 	.word	0x08108e9d
 8108e84:	08108ea5 	.word	0x08108ea5
 8108e88:	08108ecd 	.word	0x08108ecd
 8108e8c:	08108ed5 	.word	0x08108ed5
 8108e90:	08108edd 	.word	0x08108edd
 8108e94:	2300      	movs	r3, #0
 8108e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108e9a:	e148      	b.n	810912e <UART_SetConfig+0x5a6>
 8108e9c:	2304      	movs	r3, #4
 8108e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ea2:	e144      	b.n	810912e <UART_SetConfig+0x5a6>
 8108ea4:	2308      	movs	r3, #8
 8108ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108eaa:	e140      	b.n	810912e <UART_SetConfig+0x5a6>
 8108eac:	cfff69f3 	.word	0xcfff69f3
 8108eb0:	58000c00 	.word	0x58000c00
 8108eb4:	40011000 	.word	0x40011000
 8108eb8:	58024400 	.word	0x58024400
 8108ebc:	40004400 	.word	0x40004400
 8108ec0:	40004800 	.word	0x40004800
 8108ec4:	40004c00 	.word	0x40004c00
 8108ec8:	40005000 	.word	0x40005000
 8108ecc:	2310      	movs	r3, #16
 8108ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ed2:	e12c      	b.n	810912e <UART_SetConfig+0x5a6>
 8108ed4:	2320      	movs	r3, #32
 8108ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108eda:	e128      	b.n	810912e <UART_SetConfig+0x5a6>
 8108edc:	2340      	movs	r3, #64	; 0x40
 8108ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108ee2:	e124      	b.n	810912e <UART_SetConfig+0x5a6>
 8108ee4:	2380      	movs	r3, #128	; 0x80
 8108ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108eea:	e120      	b.n	810912e <UART_SetConfig+0x5a6>
 8108eec:	697b      	ldr	r3, [r7, #20]
 8108eee:	681b      	ldr	r3, [r3, #0]
 8108ef0:	4acb      	ldr	r2, [pc, #812]	; (8109220 <UART_SetConfig+0x698>)
 8108ef2:	4293      	cmp	r3, r2
 8108ef4:	d176      	bne.n	8108fe4 <UART_SetConfig+0x45c>
 8108ef6:	4bcb      	ldr	r3, [pc, #812]	; (8109224 <UART_SetConfig+0x69c>)
 8108ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108efa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8108efe:	2b28      	cmp	r3, #40	; 0x28
 8108f00:	d86c      	bhi.n	8108fdc <UART_SetConfig+0x454>
 8108f02:	a201      	add	r2, pc, #4	; (adr r2, 8108f08 <UART_SetConfig+0x380>)
 8108f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108f08:	08108fad 	.word	0x08108fad
 8108f0c:	08108fdd 	.word	0x08108fdd
 8108f10:	08108fdd 	.word	0x08108fdd
 8108f14:	08108fdd 	.word	0x08108fdd
 8108f18:	08108fdd 	.word	0x08108fdd
 8108f1c:	08108fdd 	.word	0x08108fdd
 8108f20:	08108fdd 	.word	0x08108fdd
 8108f24:	08108fdd 	.word	0x08108fdd
 8108f28:	08108fb5 	.word	0x08108fb5
 8108f2c:	08108fdd 	.word	0x08108fdd
 8108f30:	08108fdd 	.word	0x08108fdd
 8108f34:	08108fdd 	.word	0x08108fdd
 8108f38:	08108fdd 	.word	0x08108fdd
 8108f3c:	08108fdd 	.word	0x08108fdd
 8108f40:	08108fdd 	.word	0x08108fdd
 8108f44:	08108fdd 	.word	0x08108fdd
 8108f48:	08108fbd 	.word	0x08108fbd
 8108f4c:	08108fdd 	.word	0x08108fdd
 8108f50:	08108fdd 	.word	0x08108fdd
 8108f54:	08108fdd 	.word	0x08108fdd
 8108f58:	08108fdd 	.word	0x08108fdd
 8108f5c:	08108fdd 	.word	0x08108fdd
 8108f60:	08108fdd 	.word	0x08108fdd
 8108f64:	08108fdd 	.word	0x08108fdd
 8108f68:	08108fc5 	.word	0x08108fc5
 8108f6c:	08108fdd 	.word	0x08108fdd
 8108f70:	08108fdd 	.word	0x08108fdd
 8108f74:	08108fdd 	.word	0x08108fdd
 8108f78:	08108fdd 	.word	0x08108fdd
 8108f7c:	08108fdd 	.word	0x08108fdd
 8108f80:	08108fdd 	.word	0x08108fdd
 8108f84:	08108fdd 	.word	0x08108fdd
 8108f88:	08108fcd 	.word	0x08108fcd
 8108f8c:	08108fdd 	.word	0x08108fdd
 8108f90:	08108fdd 	.word	0x08108fdd
 8108f94:	08108fdd 	.word	0x08108fdd
 8108f98:	08108fdd 	.word	0x08108fdd
 8108f9c:	08108fdd 	.word	0x08108fdd
 8108fa0:	08108fdd 	.word	0x08108fdd
 8108fa4:	08108fdd 	.word	0x08108fdd
 8108fa8:	08108fd5 	.word	0x08108fd5
 8108fac:	2301      	movs	r3, #1
 8108fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fb2:	e0bc      	b.n	810912e <UART_SetConfig+0x5a6>
 8108fb4:	2304      	movs	r3, #4
 8108fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fba:	e0b8      	b.n	810912e <UART_SetConfig+0x5a6>
 8108fbc:	2308      	movs	r3, #8
 8108fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fc2:	e0b4      	b.n	810912e <UART_SetConfig+0x5a6>
 8108fc4:	2310      	movs	r3, #16
 8108fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fca:	e0b0      	b.n	810912e <UART_SetConfig+0x5a6>
 8108fcc:	2320      	movs	r3, #32
 8108fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fd2:	e0ac      	b.n	810912e <UART_SetConfig+0x5a6>
 8108fd4:	2340      	movs	r3, #64	; 0x40
 8108fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fda:	e0a8      	b.n	810912e <UART_SetConfig+0x5a6>
 8108fdc:	2380      	movs	r3, #128	; 0x80
 8108fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8108fe2:	e0a4      	b.n	810912e <UART_SetConfig+0x5a6>
 8108fe4:	697b      	ldr	r3, [r7, #20]
 8108fe6:	681b      	ldr	r3, [r3, #0]
 8108fe8:	4a8f      	ldr	r2, [pc, #572]	; (8109228 <UART_SetConfig+0x6a0>)
 8108fea:	4293      	cmp	r3, r2
 8108fec:	d130      	bne.n	8109050 <UART_SetConfig+0x4c8>
 8108fee:	4b8d      	ldr	r3, [pc, #564]	; (8109224 <UART_SetConfig+0x69c>)
 8108ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8108ff2:	f003 0307 	and.w	r3, r3, #7
 8108ff6:	2b05      	cmp	r3, #5
 8108ff8:	d826      	bhi.n	8109048 <UART_SetConfig+0x4c0>
 8108ffa:	a201      	add	r2, pc, #4	; (adr r2, 8109000 <UART_SetConfig+0x478>)
 8108ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109000:	08109019 	.word	0x08109019
 8109004:	08109021 	.word	0x08109021
 8109008:	08109029 	.word	0x08109029
 810900c:	08109031 	.word	0x08109031
 8109010:	08109039 	.word	0x08109039
 8109014:	08109041 	.word	0x08109041
 8109018:	2300      	movs	r3, #0
 810901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810901e:	e086      	b.n	810912e <UART_SetConfig+0x5a6>
 8109020:	2304      	movs	r3, #4
 8109022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109026:	e082      	b.n	810912e <UART_SetConfig+0x5a6>
 8109028:	2308      	movs	r3, #8
 810902a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810902e:	e07e      	b.n	810912e <UART_SetConfig+0x5a6>
 8109030:	2310      	movs	r3, #16
 8109032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109036:	e07a      	b.n	810912e <UART_SetConfig+0x5a6>
 8109038:	2320      	movs	r3, #32
 810903a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810903e:	e076      	b.n	810912e <UART_SetConfig+0x5a6>
 8109040:	2340      	movs	r3, #64	; 0x40
 8109042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109046:	e072      	b.n	810912e <UART_SetConfig+0x5a6>
 8109048:	2380      	movs	r3, #128	; 0x80
 810904a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810904e:	e06e      	b.n	810912e <UART_SetConfig+0x5a6>
 8109050:	697b      	ldr	r3, [r7, #20]
 8109052:	681b      	ldr	r3, [r3, #0]
 8109054:	4a75      	ldr	r2, [pc, #468]	; (810922c <UART_SetConfig+0x6a4>)
 8109056:	4293      	cmp	r3, r2
 8109058:	d130      	bne.n	81090bc <UART_SetConfig+0x534>
 810905a:	4b72      	ldr	r3, [pc, #456]	; (8109224 <UART_SetConfig+0x69c>)
 810905c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810905e:	f003 0307 	and.w	r3, r3, #7
 8109062:	2b05      	cmp	r3, #5
 8109064:	d826      	bhi.n	81090b4 <UART_SetConfig+0x52c>
 8109066:	a201      	add	r2, pc, #4	; (adr r2, 810906c <UART_SetConfig+0x4e4>)
 8109068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810906c:	08109085 	.word	0x08109085
 8109070:	0810908d 	.word	0x0810908d
 8109074:	08109095 	.word	0x08109095
 8109078:	0810909d 	.word	0x0810909d
 810907c:	081090a5 	.word	0x081090a5
 8109080:	081090ad 	.word	0x081090ad
 8109084:	2300      	movs	r3, #0
 8109086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810908a:	e050      	b.n	810912e <UART_SetConfig+0x5a6>
 810908c:	2304      	movs	r3, #4
 810908e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109092:	e04c      	b.n	810912e <UART_SetConfig+0x5a6>
 8109094:	2308      	movs	r3, #8
 8109096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810909a:	e048      	b.n	810912e <UART_SetConfig+0x5a6>
 810909c:	2310      	movs	r3, #16
 810909e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090a2:	e044      	b.n	810912e <UART_SetConfig+0x5a6>
 81090a4:	2320      	movs	r3, #32
 81090a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090aa:	e040      	b.n	810912e <UART_SetConfig+0x5a6>
 81090ac:	2340      	movs	r3, #64	; 0x40
 81090ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090b2:	e03c      	b.n	810912e <UART_SetConfig+0x5a6>
 81090b4:	2380      	movs	r3, #128	; 0x80
 81090b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090ba:	e038      	b.n	810912e <UART_SetConfig+0x5a6>
 81090bc:	697b      	ldr	r3, [r7, #20]
 81090be:	681b      	ldr	r3, [r3, #0]
 81090c0:	4a5b      	ldr	r2, [pc, #364]	; (8109230 <UART_SetConfig+0x6a8>)
 81090c2:	4293      	cmp	r3, r2
 81090c4:	d130      	bne.n	8109128 <UART_SetConfig+0x5a0>
 81090c6:	4b57      	ldr	r3, [pc, #348]	; (8109224 <UART_SetConfig+0x69c>)
 81090c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81090ca:	f003 0307 	and.w	r3, r3, #7
 81090ce:	2b05      	cmp	r3, #5
 81090d0:	d826      	bhi.n	8109120 <UART_SetConfig+0x598>
 81090d2:	a201      	add	r2, pc, #4	; (adr r2, 81090d8 <UART_SetConfig+0x550>)
 81090d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81090d8:	081090f1 	.word	0x081090f1
 81090dc:	081090f9 	.word	0x081090f9
 81090e0:	08109101 	.word	0x08109101
 81090e4:	08109109 	.word	0x08109109
 81090e8:	08109111 	.word	0x08109111
 81090ec:	08109119 	.word	0x08109119
 81090f0:	2302      	movs	r3, #2
 81090f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090f6:	e01a      	b.n	810912e <UART_SetConfig+0x5a6>
 81090f8:	2304      	movs	r3, #4
 81090fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81090fe:	e016      	b.n	810912e <UART_SetConfig+0x5a6>
 8109100:	2308      	movs	r3, #8
 8109102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109106:	e012      	b.n	810912e <UART_SetConfig+0x5a6>
 8109108:	2310      	movs	r3, #16
 810910a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810910e:	e00e      	b.n	810912e <UART_SetConfig+0x5a6>
 8109110:	2320      	movs	r3, #32
 8109112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109116:	e00a      	b.n	810912e <UART_SetConfig+0x5a6>
 8109118:	2340      	movs	r3, #64	; 0x40
 810911a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810911e:	e006      	b.n	810912e <UART_SetConfig+0x5a6>
 8109120:	2380      	movs	r3, #128	; 0x80
 8109122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8109126:	e002      	b.n	810912e <UART_SetConfig+0x5a6>
 8109128:	2380      	movs	r3, #128	; 0x80
 810912a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810912e:	697b      	ldr	r3, [r7, #20]
 8109130:	681b      	ldr	r3, [r3, #0]
 8109132:	4a3f      	ldr	r2, [pc, #252]	; (8109230 <UART_SetConfig+0x6a8>)
 8109134:	4293      	cmp	r3, r2
 8109136:	f040 80f8 	bne.w	810932a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810913a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810913e:	2b20      	cmp	r3, #32
 8109140:	dc46      	bgt.n	81091d0 <UART_SetConfig+0x648>
 8109142:	2b02      	cmp	r3, #2
 8109144:	f2c0 8082 	blt.w	810924c <UART_SetConfig+0x6c4>
 8109148:	3b02      	subs	r3, #2
 810914a:	2b1e      	cmp	r3, #30
 810914c:	d87e      	bhi.n	810924c <UART_SetConfig+0x6c4>
 810914e:	a201      	add	r2, pc, #4	; (adr r2, 8109154 <UART_SetConfig+0x5cc>)
 8109150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109154:	081091d7 	.word	0x081091d7
 8109158:	0810924d 	.word	0x0810924d
 810915c:	081091df 	.word	0x081091df
 8109160:	0810924d 	.word	0x0810924d
 8109164:	0810924d 	.word	0x0810924d
 8109168:	0810924d 	.word	0x0810924d
 810916c:	081091ef 	.word	0x081091ef
 8109170:	0810924d 	.word	0x0810924d
 8109174:	0810924d 	.word	0x0810924d
 8109178:	0810924d 	.word	0x0810924d
 810917c:	0810924d 	.word	0x0810924d
 8109180:	0810924d 	.word	0x0810924d
 8109184:	0810924d 	.word	0x0810924d
 8109188:	0810924d 	.word	0x0810924d
 810918c:	081091ff 	.word	0x081091ff
 8109190:	0810924d 	.word	0x0810924d
 8109194:	0810924d 	.word	0x0810924d
 8109198:	0810924d 	.word	0x0810924d
 810919c:	0810924d 	.word	0x0810924d
 81091a0:	0810924d 	.word	0x0810924d
 81091a4:	0810924d 	.word	0x0810924d
 81091a8:	0810924d 	.word	0x0810924d
 81091ac:	0810924d 	.word	0x0810924d
 81091b0:	0810924d 	.word	0x0810924d
 81091b4:	0810924d 	.word	0x0810924d
 81091b8:	0810924d 	.word	0x0810924d
 81091bc:	0810924d 	.word	0x0810924d
 81091c0:	0810924d 	.word	0x0810924d
 81091c4:	0810924d 	.word	0x0810924d
 81091c8:	0810924d 	.word	0x0810924d
 81091cc:	0810923f 	.word	0x0810923f
 81091d0:	2b40      	cmp	r3, #64	; 0x40
 81091d2:	d037      	beq.n	8109244 <UART_SetConfig+0x6bc>
 81091d4:	e03a      	b.n	810924c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 81091d6:	f7fc ff8f 	bl	81060f8 <HAL_RCCEx_GetD3PCLK1Freq>
 81091da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81091dc:	e03c      	b.n	8109258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81091de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81091e2:	4618      	mov	r0, r3
 81091e4:	f7fc ff9e 	bl	8106124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81091ec:	e034      	b.n	8109258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81091ee:	f107 0318 	add.w	r3, r7, #24
 81091f2:	4618      	mov	r0, r3
 81091f4:	f7fd f8ea 	bl	81063cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81091f8:	69fb      	ldr	r3, [r7, #28]
 81091fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81091fc:	e02c      	b.n	8109258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81091fe:	4b09      	ldr	r3, [pc, #36]	; (8109224 <UART_SetConfig+0x69c>)
 8109200:	681b      	ldr	r3, [r3, #0]
 8109202:	f003 0320 	and.w	r3, r3, #32
 8109206:	2b00      	cmp	r3, #0
 8109208:	d016      	beq.n	8109238 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810920a:	4b06      	ldr	r3, [pc, #24]	; (8109224 <UART_SetConfig+0x69c>)
 810920c:	681b      	ldr	r3, [r3, #0]
 810920e:	08db      	lsrs	r3, r3, #3
 8109210:	f003 0303 	and.w	r3, r3, #3
 8109214:	4a07      	ldr	r2, [pc, #28]	; (8109234 <UART_SetConfig+0x6ac>)
 8109216:	fa22 f303 	lsr.w	r3, r2, r3
 810921a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810921c:	e01c      	b.n	8109258 <UART_SetConfig+0x6d0>
 810921e:	bf00      	nop
 8109220:	40011400 	.word	0x40011400
 8109224:	58024400 	.word	0x58024400
 8109228:	40007800 	.word	0x40007800
 810922c:	40007c00 	.word	0x40007c00
 8109230:	58000c00 	.word	0x58000c00
 8109234:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8109238:	4b9d      	ldr	r3, [pc, #628]	; (81094b0 <UART_SetConfig+0x928>)
 810923a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810923c:	e00c      	b.n	8109258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810923e:	4b9d      	ldr	r3, [pc, #628]	; (81094b4 <UART_SetConfig+0x92c>)
 8109240:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109242:	e009      	b.n	8109258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810924a:	e005      	b.n	8109258 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810924c:	2300      	movs	r3, #0
 810924e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8109250:	2301      	movs	r3, #1
 8109252:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109256:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8109258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810925a:	2b00      	cmp	r3, #0
 810925c:	f000 81de 	beq.w	810961c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8109260:	697b      	ldr	r3, [r7, #20]
 8109262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109264:	4a94      	ldr	r2, [pc, #592]	; (81094b8 <UART_SetConfig+0x930>)
 8109266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810926a:	461a      	mov	r2, r3
 810926c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810926e:	fbb3 f3f2 	udiv	r3, r3, r2
 8109272:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8109274:	697b      	ldr	r3, [r7, #20]
 8109276:	685a      	ldr	r2, [r3, #4]
 8109278:	4613      	mov	r3, r2
 810927a:	005b      	lsls	r3, r3, #1
 810927c:	4413      	add	r3, r2
 810927e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8109280:	429a      	cmp	r2, r3
 8109282:	d305      	bcc.n	8109290 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8109284:	697b      	ldr	r3, [r7, #20]
 8109286:	685b      	ldr	r3, [r3, #4]
 8109288:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810928a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810928c:	429a      	cmp	r2, r3
 810928e:	d903      	bls.n	8109298 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8109290:	2301      	movs	r3, #1
 8109292:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109296:	e1c1      	b.n	810961c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8109298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810929a:	2200      	movs	r2, #0
 810929c:	60bb      	str	r3, [r7, #8]
 810929e:	60fa      	str	r2, [r7, #12]
 81092a0:	697b      	ldr	r3, [r7, #20]
 81092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81092a4:	4a84      	ldr	r2, [pc, #528]	; (81094b8 <UART_SetConfig+0x930>)
 81092a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81092aa:	b29b      	uxth	r3, r3
 81092ac:	2200      	movs	r2, #0
 81092ae:	603b      	str	r3, [r7, #0]
 81092b0:	607a      	str	r2, [r7, #4]
 81092b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81092b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 81092ba:	f7f7 fd6d 	bl	8100d98 <__aeabi_uldivmod>
 81092be:	4602      	mov	r2, r0
 81092c0:	460b      	mov	r3, r1
 81092c2:	4610      	mov	r0, r2
 81092c4:	4619      	mov	r1, r3
 81092c6:	f04f 0200 	mov.w	r2, #0
 81092ca:	f04f 0300 	mov.w	r3, #0
 81092ce:	020b      	lsls	r3, r1, #8
 81092d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 81092d4:	0202      	lsls	r2, r0, #8
 81092d6:	6979      	ldr	r1, [r7, #20]
 81092d8:	6849      	ldr	r1, [r1, #4]
 81092da:	0849      	lsrs	r1, r1, #1
 81092dc:	2000      	movs	r0, #0
 81092de:	460c      	mov	r4, r1
 81092e0:	4605      	mov	r5, r0
 81092e2:	eb12 0804 	adds.w	r8, r2, r4
 81092e6:	eb43 0905 	adc.w	r9, r3, r5
 81092ea:	697b      	ldr	r3, [r7, #20]
 81092ec:	685b      	ldr	r3, [r3, #4]
 81092ee:	2200      	movs	r2, #0
 81092f0:	469a      	mov	sl, r3
 81092f2:	4693      	mov	fp, r2
 81092f4:	4652      	mov	r2, sl
 81092f6:	465b      	mov	r3, fp
 81092f8:	4640      	mov	r0, r8
 81092fa:	4649      	mov	r1, r9
 81092fc:	f7f7 fd4c 	bl	8100d98 <__aeabi_uldivmod>
 8109300:	4602      	mov	r2, r0
 8109302:	460b      	mov	r3, r1
 8109304:	4613      	mov	r3, r2
 8109306:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8109308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810930a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810930e:	d308      	bcc.n	8109322 <UART_SetConfig+0x79a>
 8109310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109316:	d204      	bcs.n	8109322 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8109318:	697b      	ldr	r3, [r7, #20]
 810931a:	681b      	ldr	r3, [r3, #0]
 810931c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 810931e:	60da      	str	r2, [r3, #12]
 8109320:	e17c      	b.n	810961c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8109322:	2301      	movs	r3, #1
 8109324:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8109328:	e178      	b.n	810961c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810932a:	697b      	ldr	r3, [r7, #20]
 810932c:	69db      	ldr	r3, [r3, #28]
 810932e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8109332:	f040 80c5 	bne.w	81094c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8109336:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 810933a:	2b20      	cmp	r3, #32
 810933c:	dc48      	bgt.n	81093d0 <UART_SetConfig+0x848>
 810933e:	2b00      	cmp	r3, #0
 8109340:	db7b      	blt.n	810943a <UART_SetConfig+0x8b2>
 8109342:	2b20      	cmp	r3, #32
 8109344:	d879      	bhi.n	810943a <UART_SetConfig+0x8b2>
 8109346:	a201      	add	r2, pc, #4	; (adr r2, 810934c <UART_SetConfig+0x7c4>)
 8109348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810934c:	081093d7 	.word	0x081093d7
 8109350:	081093df 	.word	0x081093df
 8109354:	0810943b 	.word	0x0810943b
 8109358:	0810943b 	.word	0x0810943b
 810935c:	081093e7 	.word	0x081093e7
 8109360:	0810943b 	.word	0x0810943b
 8109364:	0810943b 	.word	0x0810943b
 8109368:	0810943b 	.word	0x0810943b
 810936c:	081093f7 	.word	0x081093f7
 8109370:	0810943b 	.word	0x0810943b
 8109374:	0810943b 	.word	0x0810943b
 8109378:	0810943b 	.word	0x0810943b
 810937c:	0810943b 	.word	0x0810943b
 8109380:	0810943b 	.word	0x0810943b
 8109384:	0810943b 	.word	0x0810943b
 8109388:	0810943b 	.word	0x0810943b
 810938c:	08109407 	.word	0x08109407
 8109390:	0810943b 	.word	0x0810943b
 8109394:	0810943b 	.word	0x0810943b
 8109398:	0810943b 	.word	0x0810943b
 810939c:	0810943b 	.word	0x0810943b
 81093a0:	0810943b 	.word	0x0810943b
 81093a4:	0810943b 	.word	0x0810943b
 81093a8:	0810943b 	.word	0x0810943b
 81093ac:	0810943b 	.word	0x0810943b
 81093b0:	0810943b 	.word	0x0810943b
 81093b4:	0810943b 	.word	0x0810943b
 81093b8:	0810943b 	.word	0x0810943b
 81093bc:	0810943b 	.word	0x0810943b
 81093c0:	0810943b 	.word	0x0810943b
 81093c4:	0810943b 	.word	0x0810943b
 81093c8:	0810943b 	.word	0x0810943b
 81093cc:	0810942d 	.word	0x0810942d
 81093d0:	2b40      	cmp	r3, #64	; 0x40
 81093d2:	d02e      	beq.n	8109432 <UART_SetConfig+0x8aa>
 81093d4:	e031      	b.n	810943a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 81093d6:	f7fb fc59 	bl	8104c8c <HAL_RCC_GetPCLK1Freq>
 81093da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81093dc:	e033      	b.n	8109446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 81093de:	f7fb fc6b 	bl	8104cb8 <HAL_RCC_GetPCLK2Freq>
 81093e2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 81093e4:	e02f      	b.n	8109446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81093e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81093ea:	4618      	mov	r0, r3
 81093ec:	f7fc fe9a 	bl	8106124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81093f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81093f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81093f4:	e027      	b.n	8109446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81093f6:	f107 0318 	add.w	r3, r7, #24
 81093fa:	4618      	mov	r0, r3
 81093fc:	f7fc ffe6 	bl	81063cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8109400:	69fb      	ldr	r3, [r7, #28]
 8109402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109404:	e01f      	b.n	8109446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109406:	4b2d      	ldr	r3, [pc, #180]	; (81094bc <UART_SetConfig+0x934>)
 8109408:	681b      	ldr	r3, [r3, #0]
 810940a:	f003 0320 	and.w	r3, r3, #32
 810940e:	2b00      	cmp	r3, #0
 8109410:	d009      	beq.n	8109426 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8109412:	4b2a      	ldr	r3, [pc, #168]	; (81094bc <UART_SetConfig+0x934>)
 8109414:	681b      	ldr	r3, [r3, #0]
 8109416:	08db      	lsrs	r3, r3, #3
 8109418:	f003 0303 	and.w	r3, r3, #3
 810941c:	4a24      	ldr	r2, [pc, #144]	; (81094b0 <UART_SetConfig+0x928>)
 810941e:	fa22 f303 	lsr.w	r3, r2, r3
 8109422:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8109424:	e00f      	b.n	8109446 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8109426:	4b22      	ldr	r3, [pc, #136]	; (81094b0 <UART_SetConfig+0x928>)
 8109428:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810942a:	e00c      	b.n	8109446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810942c:	4b21      	ldr	r3, [pc, #132]	; (81094b4 <UART_SetConfig+0x92c>)
 810942e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109430:	e009      	b.n	8109446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8109432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8109436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109438:	e005      	b.n	8109446 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810943a:	2300      	movs	r3, #0
 810943c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 810943e:	2301      	movs	r3, #1
 8109440:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8109444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8109446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109448:	2b00      	cmp	r3, #0
 810944a:	f000 80e7 	beq.w	810961c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810944e:	697b      	ldr	r3, [r7, #20]
 8109450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8109452:	4a19      	ldr	r2, [pc, #100]	; (81094b8 <UART_SetConfig+0x930>)
 8109454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8109458:	461a      	mov	r2, r3
 810945a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810945c:	fbb3 f3f2 	udiv	r3, r3, r2
 8109460:	005a      	lsls	r2, r3, #1
 8109462:	697b      	ldr	r3, [r7, #20]
 8109464:	685b      	ldr	r3, [r3, #4]
 8109466:	085b      	lsrs	r3, r3, #1
 8109468:	441a      	add	r2, r3
 810946a:	697b      	ldr	r3, [r7, #20]
 810946c:	685b      	ldr	r3, [r3, #4]
 810946e:	fbb2 f3f3 	udiv	r3, r2, r3
 8109472:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8109474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109476:	2b0f      	cmp	r3, #15
 8109478:	d916      	bls.n	81094a8 <UART_SetConfig+0x920>
 810947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810947c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109480:	d212      	bcs.n	81094a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8109482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109484:	b29b      	uxth	r3, r3
 8109486:	f023 030f 	bic.w	r3, r3, #15
 810948a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810948c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810948e:	085b      	lsrs	r3, r3, #1
 8109490:	b29b      	uxth	r3, r3
 8109492:	f003 0307 	and.w	r3, r3, #7
 8109496:	b29a      	uxth	r2, r3
 8109498:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 810949a:	4313      	orrs	r3, r2
 810949c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 810949e:	697b      	ldr	r3, [r7, #20]
 81094a0:	681b      	ldr	r3, [r3, #0]
 81094a2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81094a4:	60da      	str	r2, [r3, #12]
 81094a6:	e0b9      	b.n	810961c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81094a8:	2301      	movs	r3, #1
 81094aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81094ae:	e0b5      	b.n	810961c <UART_SetConfig+0xa94>
 81094b0:	03d09000 	.word	0x03d09000
 81094b4:	003d0900 	.word	0x003d0900
 81094b8:	0810e848 	.word	0x0810e848
 81094bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81094c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81094c4:	2b20      	cmp	r3, #32
 81094c6:	dc49      	bgt.n	810955c <UART_SetConfig+0x9d4>
 81094c8:	2b00      	cmp	r3, #0
 81094ca:	db7c      	blt.n	81095c6 <UART_SetConfig+0xa3e>
 81094cc:	2b20      	cmp	r3, #32
 81094ce:	d87a      	bhi.n	81095c6 <UART_SetConfig+0xa3e>
 81094d0:	a201      	add	r2, pc, #4	; (adr r2, 81094d8 <UART_SetConfig+0x950>)
 81094d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81094d6:	bf00      	nop
 81094d8:	08109563 	.word	0x08109563
 81094dc:	0810956b 	.word	0x0810956b
 81094e0:	081095c7 	.word	0x081095c7
 81094e4:	081095c7 	.word	0x081095c7
 81094e8:	08109573 	.word	0x08109573
 81094ec:	081095c7 	.word	0x081095c7
 81094f0:	081095c7 	.word	0x081095c7
 81094f4:	081095c7 	.word	0x081095c7
 81094f8:	08109583 	.word	0x08109583
 81094fc:	081095c7 	.word	0x081095c7
 8109500:	081095c7 	.word	0x081095c7
 8109504:	081095c7 	.word	0x081095c7
 8109508:	081095c7 	.word	0x081095c7
 810950c:	081095c7 	.word	0x081095c7
 8109510:	081095c7 	.word	0x081095c7
 8109514:	081095c7 	.word	0x081095c7
 8109518:	08109593 	.word	0x08109593
 810951c:	081095c7 	.word	0x081095c7
 8109520:	081095c7 	.word	0x081095c7
 8109524:	081095c7 	.word	0x081095c7
 8109528:	081095c7 	.word	0x081095c7
 810952c:	081095c7 	.word	0x081095c7
 8109530:	081095c7 	.word	0x081095c7
 8109534:	081095c7 	.word	0x081095c7
 8109538:	081095c7 	.word	0x081095c7
 810953c:	081095c7 	.word	0x081095c7
 8109540:	081095c7 	.word	0x081095c7
 8109544:	081095c7 	.word	0x081095c7
 8109548:	081095c7 	.word	0x081095c7
 810954c:	081095c7 	.word	0x081095c7
 8109550:	081095c7 	.word	0x081095c7
 8109554:	081095c7 	.word	0x081095c7
 8109558:	081095b9 	.word	0x081095b9
 810955c:	2b40      	cmp	r3, #64	; 0x40
 810955e:	d02e      	beq.n	81095be <UART_SetConfig+0xa36>
 8109560:	e031      	b.n	81095c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8109562:	f7fb fb93 	bl	8104c8c <HAL_RCC_GetPCLK1Freq>
 8109566:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109568:	e033      	b.n	81095d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810956a:	f7fb fba5 	bl	8104cb8 <HAL_RCC_GetPCLK2Freq>
 810956e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8109570:	e02f      	b.n	81095d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8109572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8109576:	4618      	mov	r0, r3
 8109578:	f7fc fdd4 	bl	8106124 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810957e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109580:	e027      	b.n	81095d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8109582:	f107 0318 	add.w	r3, r7, #24
 8109586:	4618      	mov	r0, r3
 8109588:	f7fc ff20 	bl	81063cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810958c:	69fb      	ldr	r3, [r7, #28]
 810958e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8109590:	e01f      	b.n	81095d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8109592:	4b2d      	ldr	r3, [pc, #180]	; (8109648 <UART_SetConfig+0xac0>)
 8109594:	681b      	ldr	r3, [r3, #0]
 8109596:	f003 0320 	and.w	r3, r3, #32
 810959a:	2b00      	cmp	r3, #0
 810959c:	d009      	beq.n	81095b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810959e:	4b2a      	ldr	r3, [pc, #168]	; (8109648 <UART_SetConfig+0xac0>)
 81095a0:	681b      	ldr	r3, [r3, #0]
 81095a2:	08db      	lsrs	r3, r3, #3
 81095a4:	f003 0303 	and.w	r3, r3, #3
 81095a8:	4a28      	ldr	r2, [pc, #160]	; (810964c <UART_SetConfig+0xac4>)
 81095aa:	fa22 f303 	lsr.w	r3, r2, r3
 81095ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81095b0:	e00f      	b.n	81095d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81095b2:	4b26      	ldr	r3, [pc, #152]	; (810964c <UART_SetConfig+0xac4>)
 81095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81095b6:	e00c      	b.n	81095d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81095b8:	4b25      	ldr	r3, [pc, #148]	; (8109650 <UART_SetConfig+0xac8>)
 81095ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81095bc:	e009      	b.n	81095d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81095be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81095c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81095c4:	e005      	b.n	81095d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81095c6:	2300      	movs	r3, #0
 81095c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81095ca:	2301      	movs	r3, #1
 81095cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81095d0:	bf00      	nop
    }

    if (pclk != 0U)
 81095d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81095d4:	2b00      	cmp	r3, #0
 81095d6:	d021      	beq.n	810961c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81095d8:	697b      	ldr	r3, [r7, #20]
 81095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81095dc:	4a1d      	ldr	r2, [pc, #116]	; (8109654 <UART_SetConfig+0xacc>)
 81095de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81095e2:	461a      	mov	r2, r3
 81095e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81095e6:	fbb3 f2f2 	udiv	r2, r3, r2
 81095ea:	697b      	ldr	r3, [r7, #20]
 81095ec:	685b      	ldr	r3, [r3, #4]
 81095ee:	085b      	lsrs	r3, r3, #1
 81095f0:	441a      	add	r2, r3
 81095f2:	697b      	ldr	r3, [r7, #20]
 81095f4:	685b      	ldr	r3, [r3, #4]
 81095f6:	fbb2 f3f3 	udiv	r3, r2, r3
 81095fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 81095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81095fe:	2b0f      	cmp	r3, #15
 8109600:	d909      	bls.n	8109616 <UART_SetConfig+0xa8e>
 8109602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109604:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8109608:	d205      	bcs.n	8109616 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810960c:	b29a      	uxth	r2, r3
 810960e:	697b      	ldr	r3, [r7, #20]
 8109610:	681b      	ldr	r3, [r3, #0]
 8109612:	60da      	str	r2, [r3, #12]
 8109614:	e002      	b.n	810961c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8109616:	2301      	movs	r3, #1
 8109618:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810961c:	697b      	ldr	r3, [r7, #20]
 810961e:	2201      	movs	r2, #1
 8109620:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8109624:	697b      	ldr	r3, [r7, #20]
 8109626:	2201      	movs	r2, #1
 8109628:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810962c:	697b      	ldr	r3, [r7, #20]
 810962e:	2200      	movs	r2, #0
 8109630:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8109632:	697b      	ldr	r3, [r7, #20]
 8109634:	2200      	movs	r2, #0
 8109636:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8109638:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 810963c:	4618      	mov	r0, r3
 810963e:	3748      	adds	r7, #72	; 0x48
 8109640:	46bd      	mov	sp, r7
 8109642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8109646:	bf00      	nop
 8109648:	58024400 	.word	0x58024400
 810964c:	03d09000 	.word	0x03d09000
 8109650:	003d0900 	.word	0x003d0900
 8109654:	0810e848 	.word	0x0810e848

08109658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8109658:	b480      	push	{r7}
 810965a:	b083      	sub	sp, #12
 810965c:	af00      	add	r7, sp, #0
 810965e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8109660:	687b      	ldr	r3, [r7, #4]
 8109662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109664:	f003 0308 	and.w	r3, r3, #8
 8109668:	2b00      	cmp	r3, #0
 810966a:	d00a      	beq.n	8109682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810966c:	687b      	ldr	r3, [r7, #4]
 810966e:	681b      	ldr	r3, [r3, #0]
 8109670:	685b      	ldr	r3, [r3, #4]
 8109672:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8109676:	687b      	ldr	r3, [r7, #4]
 8109678:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810967a:	687b      	ldr	r3, [r7, #4]
 810967c:	681b      	ldr	r3, [r3, #0]
 810967e:	430a      	orrs	r2, r1
 8109680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8109682:	687b      	ldr	r3, [r7, #4]
 8109684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109686:	f003 0301 	and.w	r3, r3, #1
 810968a:	2b00      	cmp	r3, #0
 810968c:	d00a      	beq.n	81096a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810968e:	687b      	ldr	r3, [r7, #4]
 8109690:	681b      	ldr	r3, [r3, #0]
 8109692:	685b      	ldr	r3, [r3, #4]
 8109694:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8109698:	687b      	ldr	r3, [r7, #4]
 810969a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 810969c:	687b      	ldr	r3, [r7, #4]
 810969e:	681b      	ldr	r3, [r3, #0]
 81096a0:	430a      	orrs	r2, r1
 81096a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81096a4:	687b      	ldr	r3, [r7, #4]
 81096a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81096a8:	f003 0302 	and.w	r3, r3, #2
 81096ac:	2b00      	cmp	r3, #0
 81096ae:	d00a      	beq.n	81096c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81096b0:	687b      	ldr	r3, [r7, #4]
 81096b2:	681b      	ldr	r3, [r3, #0]
 81096b4:	685b      	ldr	r3, [r3, #4]
 81096b6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81096ba:	687b      	ldr	r3, [r7, #4]
 81096bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81096be:	687b      	ldr	r3, [r7, #4]
 81096c0:	681b      	ldr	r3, [r3, #0]
 81096c2:	430a      	orrs	r2, r1
 81096c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81096c6:	687b      	ldr	r3, [r7, #4]
 81096c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81096ca:	f003 0304 	and.w	r3, r3, #4
 81096ce:	2b00      	cmp	r3, #0
 81096d0:	d00a      	beq.n	81096e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81096d2:	687b      	ldr	r3, [r7, #4]
 81096d4:	681b      	ldr	r3, [r3, #0]
 81096d6:	685b      	ldr	r3, [r3, #4]
 81096d8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81096dc:	687b      	ldr	r3, [r7, #4]
 81096de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81096e0:	687b      	ldr	r3, [r7, #4]
 81096e2:	681b      	ldr	r3, [r3, #0]
 81096e4:	430a      	orrs	r2, r1
 81096e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 81096e8:	687b      	ldr	r3, [r7, #4]
 81096ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81096ec:	f003 0310 	and.w	r3, r3, #16
 81096f0:	2b00      	cmp	r3, #0
 81096f2:	d00a      	beq.n	810970a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81096f4:	687b      	ldr	r3, [r7, #4]
 81096f6:	681b      	ldr	r3, [r3, #0]
 81096f8:	689b      	ldr	r3, [r3, #8]
 81096fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81096fe:	687b      	ldr	r3, [r7, #4]
 8109700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8109702:	687b      	ldr	r3, [r7, #4]
 8109704:	681b      	ldr	r3, [r3, #0]
 8109706:	430a      	orrs	r2, r1
 8109708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810970a:	687b      	ldr	r3, [r7, #4]
 810970c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810970e:	f003 0320 	and.w	r3, r3, #32
 8109712:	2b00      	cmp	r3, #0
 8109714:	d00a      	beq.n	810972c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8109716:	687b      	ldr	r3, [r7, #4]
 8109718:	681b      	ldr	r3, [r3, #0]
 810971a:	689b      	ldr	r3, [r3, #8]
 810971c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8109720:	687b      	ldr	r3, [r7, #4]
 8109722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8109724:	687b      	ldr	r3, [r7, #4]
 8109726:	681b      	ldr	r3, [r3, #0]
 8109728:	430a      	orrs	r2, r1
 810972a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810972c:	687b      	ldr	r3, [r7, #4]
 810972e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8109734:	2b00      	cmp	r3, #0
 8109736:	d01a      	beq.n	810976e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8109738:	687b      	ldr	r3, [r7, #4]
 810973a:	681b      	ldr	r3, [r3, #0]
 810973c:	685b      	ldr	r3, [r3, #4]
 810973e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8109742:	687b      	ldr	r3, [r7, #4]
 8109744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8109746:	687b      	ldr	r3, [r7, #4]
 8109748:	681b      	ldr	r3, [r3, #0]
 810974a:	430a      	orrs	r2, r1
 810974c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810974e:	687b      	ldr	r3, [r7, #4]
 8109750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8109752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8109756:	d10a      	bne.n	810976e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8109758:	687b      	ldr	r3, [r7, #4]
 810975a:	681b      	ldr	r3, [r3, #0]
 810975c:	685b      	ldr	r3, [r3, #4]
 810975e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8109762:	687b      	ldr	r3, [r7, #4]
 8109764:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8109766:	687b      	ldr	r3, [r7, #4]
 8109768:	681b      	ldr	r3, [r3, #0]
 810976a:	430a      	orrs	r2, r1
 810976c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810976e:	687b      	ldr	r3, [r7, #4]
 8109770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8109772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8109776:	2b00      	cmp	r3, #0
 8109778:	d00a      	beq.n	8109790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810977a:	687b      	ldr	r3, [r7, #4]
 810977c:	681b      	ldr	r3, [r3, #0]
 810977e:	685b      	ldr	r3, [r3, #4]
 8109780:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8109784:	687b      	ldr	r3, [r7, #4]
 8109786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8109788:	687b      	ldr	r3, [r7, #4]
 810978a:	681b      	ldr	r3, [r3, #0]
 810978c:	430a      	orrs	r2, r1
 810978e:	605a      	str	r2, [r3, #4]
  }
}
 8109790:	bf00      	nop
 8109792:	370c      	adds	r7, #12
 8109794:	46bd      	mov	sp, r7
 8109796:	f85d 7b04 	ldr.w	r7, [sp], #4
 810979a:	4770      	bx	lr

0810979c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810979c:	b580      	push	{r7, lr}
 810979e:	b098      	sub	sp, #96	; 0x60
 81097a0:	af02      	add	r7, sp, #8
 81097a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81097a4:	687b      	ldr	r3, [r7, #4]
 81097a6:	2200      	movs	r2, #0
 81097a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81097ac:	f7f9 fee6 	bl	810357c <HAL_GetTick>
 81097b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81097b2:	687b      	ldr	r3, [r7, #4]
 81097b4:	681b      	ldr	r3, [r3, #0]
 81097b6:	681b      	ldr	r3, [r3, #0]
 81097b8:	f003 0308 	and.w	r3, r3, #8
 81097bc:	2b08      	cmp	r3, #8
 81097be:	d12f      	bne.n	8109820 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81097c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81097c4:	9300      	str	r3, [sp, #0]
 81097c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81097c8:	2200      	movs	r2, #0
 81097ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81097ce:	6878      	ldr	r0, [r7, #4]
 81097d0:	f000 f88e 	bl	81098f0 <UART_WaitOnFlagUntilTimeout>
 81097d4:	4603      	mov	r3, r0
 81097d6:	2b00      	cmp	r3, #0
 81097d8:	d022      	beq.n	8109820 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81097da:	687b      	ldr	r3, [r7, #4]
 81097dc:	681b      	ldr	r3, [r3, #0]
 81097de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81097e2:	e853 3f00 	ldrex	r3, [r3]
 81097e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 81097e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81097ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81097ee:	653b      	str	r3, [r7, #80]	; 0x50
 81097f0:	687b      	ldr	r3, [r7, #4]
 81097f2:	681b      	ldr	r3, [r3, #0]
 81097f4:	461a      	mov	r2, r3
 81097f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81097f8:	647b      	str	r3, [r7, #68]	; 0x44
 81097fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81097fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 81097fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8109800:	e841 2300 	strex	r3, r2, [r1]
 8109804:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8109806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8109808:	2b00      	cmp	r3, #0
 810980a:	d1e6      	bne.n	81097da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810980c:	687b      	ldr	r3, [r7, #4]
 810980e:	2220      	movs	r2, #32
 8109810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8109814:	687b      	ldr	r3, [r7, #4]
 8109816:	2200      	movs	r2, #0
 8109818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810981c:	2303      	movs	r3, #3
 810981e:	e063      	b.n	81098e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8109820:	687b      	ldr	r3, [r7, #4]
 8109822:	681b      	ldr	r3, [r3, #0]
 8109824:	681b      	ldr	r3, [r3, #0]
 8109826:	f003 0304 	and.w	r3, r3, #4
 810982a:	2b04      	cmp	r3, #4
 810982c:	d149      	bne.n	81098c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810982e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8109832:	9300      	str	r3, [sp, #0]
 8109834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8109836:	2200      	movs	r2, #0
 8109838:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 810983c:	6878      	ldr	r0, [r7, #4]
 810983e:	f000 f857 	bl	81098f0 <UART_WaitOnFlagUntilTimeout>
 8109842:	4603      	mov	r3, r0
 8109844:	2b00      	cmp	r3, #0
 8109846:	d03c      	beq.n	81098c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8109848:	687b      	ldr	r3, [r7, #4]
 810984a:	681b      	ldr	r3, [r3, #0]
 810984c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109850:	e853 3f00 	ldrex	r3, [r3]
 8109854:	623b      	str	r3, [r7, #32]
   return(result);
 8109856:	6a3b      	ldr	r3, [r7, #32]
 8109858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 810985c:	64fb      	str	r3, [r7, #76]	; 0x4c
 810985e:	687b      	ldr	r3, [r7, #4]
 8109860:	681b      	ldr	r3, [r3, #0]
 8109862:	461a      	mov	r2, r3
 8109864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8109866:	633b      	str	r3, [r7, #48]	; 0x30
 8109868:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810986a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 810986c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810986e:	e841 2300 	strex	r3, r2, [r1]
 8109872:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8109874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8109876:	2b00      	cmp	r3, #0
 8109878:	d1e6      	bne.n	8109848 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810987a:	687b      	ldr	r3, [r7, #4]
 810987c:	681b      	ldr	r3, [r3, #0]
 810987e:	3308      	adds	r3, #8
 8109880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109882:	693b      	ldr	r3, [r7, #16]
 8109884:	e853 3f00 	ldrex	r3, [r3]
 8109888:	60fb      	str	r3, [r7, #12]
   return(result);
 810988a:	68fb      	ldr	r3, [r7, #12]
 810988c:	f023 0301 	bic.w	r3, r3, #1
 8109890:	64bb      	str	r3, [r7, #72]	; 0x48
 8109892:	687b      	ldr	r3, [r7, #4]
 8109894:	681b      	ldr	r3, [r3, #0]
 8109896:	3308      	adds	r3, #8
 8109898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810989a:	61fa      	str	r2, [r7, #28]
 810989c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810989e:	69b9      	ldr	r1, [r7, #24]
 81098a0:	69fa      	ldr	r2, [r7, #28]
 81098a2:	e841 2300 	strex	r3, r2, [r1]
 81098a6:	617b      	str	r3, [r7, #20]
   return(result);
 81098a8:	697b      	ldr	r3, [r7, #20]
 81098aa:	2b00      	cmp	r3, #0
 81098ac:	d1e5      	bne.n	810987a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81098ae:	687b      	ldr	r3, [r7, #4]
 81098b0:	2220      	movs	r2, #32
 81098b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 81098b6:	687b      	ldr	r3, [r7, #4]
 81098b8:	2200      	movs	r2, #0
 81098ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81098be:	2303      	movs	r3, #3
 81098c0:	e012      	b.n	81098e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81098c2:	687b      	ldr	r3, [r7, #4]
 81098c4:	2220      	movs	r2, #32
 81098c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81098ca:	687b      	ldr	r3, [r7, #4]
 81098cc:	2220      	movs	r2, #32
 81098ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81098d2:	687b      	ldr	r3, [r7, #4]
 81098d4:	2200      	movs	r2, #0
 81098d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81098d8:	687b      	ldr	r3, [r7, #4]
 81098da:	2200      	movs	r2, #0
 81098dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 81098de:	687b      	ldr	r3, [r7, #4]
 81098e0:	2200      	movs	r2, #0
 81098e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81098e6:	2300      	movs	r3, #0
}
 81098e8:	4618      	mov	r0, r3
 81098ea:	3758      	adds	r7, #88	; 0x58
 81098ec:	46bd      	mov	sp, r7
 81098ee:	bd80      	pop	{r7, pc}

081098f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 81098f0:	b580      	push	{r7, lr}
 81098f2:	b084      	sub	sp, #16
 81098f4:	af00      	add	r7, sp, #0
 81098f6:	60f8      	str	r0, [r7, #12]
 81098f8:	60b9      	str	r1, [r7, #8]
 81098fa:	603b      	str	r3, [r7, #0]
 81098fc:	4613      	mov	r3, r2
 81098fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8109900:	e04f      	b.n	81099a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8109902:	69bb      	ldr	r3, [r7, #24]
 8109904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109908:	d04b      	beq.n	81099a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810990a:	f7f9 fe37 	bl	810357c <HAL_GetTick>
 810990e:	4602      	mov	r2, r0
 8109910:	683b      	ldr	r3, [r7, #0]
 8109912:	1ad3      	subs	r3, r2, r3
 8109914:	69ba      	ldr	r2, [r7, #24]
 8109916:	429a      	cmp	r2, r3
 8109918:	d302      	bcc.n	8109920 <UART_WaitOnFlagUntilTimeout+0x30>
 810991a:	69bb      	ldr	r3, [r7, #24]
 810991c:	2b00      	cmp	r3, #0
 810991e:	d101      	bne.n	8109924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8109920:	2303      	movs	r3, #3
 8109922:	e04e      	b.n	81099c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8109924:	68fb      	ldr	r3, [r7, #12]
 8109926:	681b      	ldr	r3, [r3, #0]
 8109928:	681b      	ldr	r3, [r3, #0]
 810992a:	f003 0304 	and.w	r3, r3, #4
 810992e:	2b00      	cmp	r3, #0
 8109930:	d037      	beq.n	81099a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8109932:	68bb      	ldr	r3, [r7, #8]
 8109934:	2b80      	cmp	r3, #128	; 0x80
 8109936:	d034      	beq.n	81099a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8109938:	68bb      	ldr	r3, [r7, #8]
 810993a:	2b40      	cmp	r3, #64	; 0x40
 810993c:	d031      	beq.n	81099a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810993e:	68fb      	ldr	r3, [r7, #12]
 8109940:	681b      	ldr	r3, [r3, #0]
 8109942:	69db      	ldr	r3, [r3, #28]
 8109944:	f003 0308 	and.w	r3, r3, #8
 8109948:	2b08      	cmp	r3, #8
 810994a:	d110      	bne.n	810996e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810994c:	68fb      	ldr	r3, [r7, #12]
 810994e:	681b      	ldr	r3, [r3, #0]
 8109950:	2208      	movs	r2, #8
 8109952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8109954:	68f8      	ldr	r0, [r7, #12]
 8109956:	f000 f838 	bl	81099ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810995a:	68fb      	ldr	r3, [r7, #12]
 810995c:	2208      	movs	r2, #8
 810995e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8109962:	68fb      	ldr	r3, [r7, #12]
 8109964:	2200      	movs	r2, #0
 8109966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 810996a:	2301      	movs	r3, #1
 810996c:	e029      	b.n	81099c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810996e:	68fb      	ldr	r3, [r7, #12]
 8109970:	681b      	ldr	r3, [r3, #0]
 8109972:	69db      	ldr	r3, [r3, #28]
 8109974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8109978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810997c:	d111      	bne.n	81099a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810997e:	68fb      	ldr	r3, [r7, #12]
 8109980:	681b      	ldr	r3, [r3, #0]
 8109982:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8109986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8109988:	68f8      	ldr	r0, [r7, #12]
 810998a:	f000 f81e 	bl	81099ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810998e:	68fb      	ldr	r3, [r7, #12]
 8109990:	2220      	movs	r2, #32
 8109992:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8109996:	68fb      	ldr	r3, [r7, #12]
 8109998:	2200      	movs	r2, #0
 810999a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 810999e:	2303      	movs	r3, #3
 81099a0:	e00f      	b.n	81099c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81099a2:	68fb      	ldr	r3, [r7, #12]
 81099a4:	681b      	ldr	r3, [r3, #0]
 81099a6:	69da      	ldr	r2, [r3, #28]
 81099a8:	68bb      	ldr	r3, [r7, #8]
 81099aa:	4013      	ands	r3, r2
 81099ac:	68ba      	ldr	r2, [r7, #8]
 81099ae:	429a      	cmp	r2, r3
 81099b0:	bf0c      	ite	eq
 81099b2:	2301      	moveq	r3, #1
 81099b4:	2300      	movne	r3, #0
 81099b6:	b2db      	uxtb	r3, r3
 81099b8:	461a      	mov	r2, r3
 81099ba:	79fb      	ldrb	r3, [r7, #7]
 81099bc:	429a      	cmp	r2, r3
 81099be:	d0a0      	beq.n	8109902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81099c0:	2300      	movs	r3, #0
}
 81099c2:	4618      	mov	r0, r3
 81099c4:	3710      	adds	r7, #16
 81099c6:	46bd      	mov	sp, r7
 81099c8:	bd80      	pop	{r7, pc}

081099ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81099ca:	b480      	push	{r7}
 81099cc:	b095      	sub	sp, #84	; 0x54
 81099ce:	af00      	add	r7, sp, #0
 81099d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81099d2:	687b      	ldr	r3, [r7, #4]
 81099d4:	681b      	ldr	r3, [r3, #0]
 81099d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81099d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81099da:	e853 3f00 	ldrex	r3, [r3]
 81099de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 81099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81099e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 81099e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 81099e8:	687b      	ldr	r3, [r7, #4]
 81099ea:	681b      	ldr	r3, [r3, #0]
 81099ec:	461a      	mov	r2, r3
 81099ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81099f0:	643b      	str	r3, [r7, #64]	; 0x40
 81099f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81099f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 81099f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 81099f8:	e841 2300 	strex	r3, r2, [r1]
 81099fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 81099fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8109a00:	2b00      	cmp	r3, #0
 8109a02:	d1e6      	bne.n	81099d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8109a04:	687b      	ldr	r3, [r7, #4]
 8109a06:	681b      	ldr	r3, [r3, #0]
 8109a08:	3308      	adds	r3, #8
 8109a0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109a0c:	6a3b      	ldr	r3, [r7, #32]
 8109a0e:	e853 3f00 	ldrex	r3, [r3]
 8109a12:	61fb      	str	r3, [r7, #28]
   return(result);
 8109a14:	69fb      	ldr	r3, [r7, #28]
 8109a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8109a1a:	f023 0301 	bic.w	r3, r3, #1
 8109a1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8109a20:	687b      	ldr	r3, [r7, #4]
 8109a22:	681b      	ldr	r3, [r3, #0]
 8109a24:	3308      	adds	r3, #8
 8109a26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8109a28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8109a2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8109a2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8109a30:	e841 2300 	strex	r3, r2, [r1]
 8109a34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8109a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8109a38:	2b00      	cmp	r3, #0
 8109a3a:	d1e3      	bne.n	8109a04 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109a3c:	687b      	ldr	r3, [r7, #4]
 8109a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8109a40:	2b01      	cmp	r3, #1
 8109a42:	d118      	bne.n	8109a76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109a44:	687b      	ldr	r3, [r7, #4]
 8109a46:	681b      	ldr	r3, [r3, #0]
 8109a48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109a4a:	68fb      	ldr	r3, [r7, #12]
 8109a4c:	e853 3f00 	ldrex	r3, [r3]
 8109a50:	60bb      	str	r3, [r7, #8]
   return(result);
 8109a52:	68bb      	ldr	r3, [r7, #8]
 8109a54:	f023 0310 	bic.w	r3, r3, #16
 8109a58:	647b      	str	r3, [r7, #68]	; 0x44
 8109a5a:	687b      	ldr	r3, [r7, #4]
 8109a5c:	681b      	ldr	r3, [r3, #0]
 8109a5e:	461a      	mov	r2, r3
 8109a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8109a62:	61bb      	str	r3, [r7, #24]
 8109a64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109a66:	6979      	ldr	r1, [r7, #20]
 8109a68:	69ba      	ldr	r2, [r7, #24]
 8109a6a:	e841 2300 	strex	r3, r2, [r1]
 8109a6e:	613b      	str	r3, [r7, #16]
   return(result);
 8109a70:	693b      	ldr	r3, [r7, #16]
 8109a72:	2b00      	cmp	r3, #0
 8109a74:	d1e6      	bne.n	8109a44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8109a76:	687b      	ldr	r3, [r7, #4]
 8109a78:	2220      	movs	r2, #32
 8109a7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109a7e:	687b      	ldr	r3, [r7, #4]
 8109a80:	2200      	movs	r2, #0
 8109a82:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8109a84:	687b      	ldr	r3, [r7, #4]
 8109a86:	2200      	movs	r2, #0
 8109a88:	675a      	str	r2, [r3, #116]	; 0x74
}
 8109a8a:	bf00      	nop
 8109a8c:	3754      	adds	r7, #84	; 0x54
 8109a8e:	46bd      	mov	sp, r7
 8109a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109a94:	4770      	bx	lr

08109a96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8109a96:	b480      	push	{r7}
 8109a98:	b085      	sub	sp, #20
 8109a9a:	af00      	add	r7, sp, #0
 8109a9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109a9e:	687b      	ldr	r3, [r7, #4]
 8109aa0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8109aa4:	2b01      	cmp	r3, #1
 8109aa6:	d101      	bne.n	8109aac <HAL_UARTEx_DisableFifoMode+0x16>
 8109aa8:	2302      	movs	r3, #2
 8109aaa:	e027      	b.n	8109afc <HAL_UARTEx_DisableFifoMode+0x66>
 8109aac:	687b      	ldr	r3, [r7, #4]
 8109aae:	2201      	movs	r2, #1
 8109ab0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109ab4:	687b      	ldr	r3, [r7, #4]
 8109ab6:	2224      	movs	r2, #36	; 0x24
 8109ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109abc:	687b      	ldr	r3, [r7, #4]
 8109abe:	681b      	ldr	r3, [r3, #0]
 8109ac0:	681b      	ldr	r3, [r3, #0]
 8109ac2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109ac4:	687b      	ldr	r3, [r7, #4]
 8109ac6:	681b      	ldr	r3, [r3, #0]
 8109ac8:	681a      	ldr	r2, [r3, #0]
 8109aca:	687b      	ldr	r3, [r7, #4]
 8109acc:	681b      	ldr	r3, [r3, #0]
 8109ace:	f022 0201 	bic.w	r2, r2, #1
 8109ad2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8109ad4:	68fb      	ldr	r3, [r7, #12]
 8109ad6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8109ada:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8109adc:	687b      	ldr	r3, [r7, #4]
 8109ade:	2200      	movs	r2, #0
 8109ae0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109ae2:	687b      	ldr	r3, [r7, #4]
 8109ae4:	681b      	ldr	r3, [r3, #0]
 8109ae6:	68fa      	ldr	r2, [r7, #12]
 8109ae8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109aea:	687b      	ldr	r3, [r7, #4]
 8109aec:	2220      	movs	r2, #32
 8109aee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109af2:	687b      	ldr	r3, [r7, #4]
 8109af4:	2200      	movs	r2, #0
 8109af6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8109afa:	2300      	movs	r3, #0
}
 8109afc:	4618      	mov	r0, r3
 8109afe:	3714      	adds	r7, #20
 8109b00:	46bd      	mov	sp, r7
 8109b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109b06:	4770      	bx	lr

08109b08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109b08:	b580      	push	{r7, lr}
 8109b0a:	b084      	sub	sp, #16
 8109b0c:	af00      	add	r7, sp, #0
 8109b0e:	6078      	str	r0, [r7, #4]
 8109b10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109b12:	687b      	ldr	r3, [r7, #4]
 8109b14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8109b18:	2b01      	cmp	r3, #1
 8109b1a:	d101      	bne.n	8109b20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8109b1c:	2302      	movs	r3, #2
 8109b1e:	e02d      	b.n	8109b7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8109b20:	687b      	ldr	r3, [r7, #4]
 8109b22:	2201      	movs	r2, #1
 8109b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109b28:	687b      	ldr	r3, [r7, #4]
 8109b2a:	2224      	movs	r2, #36	; 0x24
 8109b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109b30:	687b      	ldr	r3, [r7, #4]
 8109b32:	681b      	ldr	r3, [r3, #0]
 8109b34:	681b      	ldr	r3, [r3, #0]
 8109b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109b38:	687b      	ldr	r3, [r7, #4]
 8109b3a:	681b      	ldr	r3, [r3, #0]
 8109b3c:	681a      	ldr	r2, [r3, #0]
 8109b3e:	687b      	ldr	r3, [r7, #4]
 8109b40:	681b      	ldr	r3, [r3, #0]
 8109b42:	f022 0201 	bic.w	r2, r2, #1
 8109b46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8109b48:	687b      	ldr	r3, [r7, #4]
 8109b4a:	681b      	ldr	r3, [r3, #0]
 8109b4c:	689b      	ldr	r3, [r3, #8]
 8109b4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8109b52:	687b      	ldr	r3, [r7, #4]
 8109b54:	681b      	ldr	r3, [r3, #0]
 8109b56:	683a      	ldr	r2, [r7, #0]
 8109b58:	430a      	orrs	r2, r1
 8109b5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109b5c:	6878      	ldr	r0, [r7, #4]
 8109b5e:	f000 f84f 	bl	8109c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109b62:	687b      	ldr	r3, [r7, #4]
 8109b64:	681b      	ldr	r3, [r3, #0]
 8109b66:	68fa      	ldr	r2, [r7, #12]
 8109b68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109b6a:	687b      	ldr	r3, [r7, #4]
 8109b6c:	2220      	movs	r2, #32
 8109b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109b72:	687b      	ldr	r3, [r7, #4]
 8109b74:	2200      	movs	r2, #0
 8109b76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8109b7a:	2300      	movs	r3, #0
}
 8109b7c:	4618      	mov	r0, r3
 8109b7e:	3710      	adds	r7, #16
 8109b80:	46bd      	mov	sp, r7
 8109b82:	bd80      	pop	{r7, pc}

08109b84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8109b84:	b580      	push	{r7, lr}
 8109b86:	b084      	sub	sp, #16
 8109b88:	af00      	add	r7, sp, #0
 8109b8a:	6078      	str	r0, [r7, #4]
 8109b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8109b8e:	687b      	ldr	r3, [r7, #4]
 8109b90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8109b94:	2b01      	cmp	r3, #1
 8109b96:	d101      	bne.n	8109b9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8109b98:	2302      	movs	r3, #2
 8109b9a:	e02d      	b.n	8109bf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8109b9c:	687b      	ldr	r3, [r7, #4]
 8109b9e:	2201      	movs	r2, #1
 8109ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8109ba4:	687b      	ldr	r3, [r7, #4]
 8109ba6:	2224      	movs	r2, #36	; 0x24
 8109ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8109bac:	687b      	ldr	r3, [r7, #4]
 8109bae:	681b      	ldr	r3, [r3, #0]
 8109bb0:	681b      	ldr	r3, [r3, #0]
 8109bb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8109bb4:	687b      	ldr	r3, [r7, #4]
 8109bb6:	681b      	ldr	r3, [r3, #0]
 8109bb8:	681a      	ldr	r2, [r3, #0]
 8109bba:	687b      	ldr	r3, [r7, #4]
 8109bbc:	681b      	ldr	r3, [r3, #0]
 8109bbe:	f022 0201 	bic.w	r2, r2, #1
 8109bc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8109bc4:	687b      	ldr	r3, [r7, #4]
 8109bc6:	681b      	ldr	r3, [r3, #0]
 8109bc8:	689b      	ldr	r3, [r3, #8]
 8109bca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8109bce:	687b      	ldr	r3, [r7, #4]
 8109bd0:	681b      	ldr	r3, [r3, #0]
 8109bd2:	683a      	ldr	r2, [r7, #0]
 8109bd4:	430a      	orrs	r2, r1
 8109bd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8109bd8:	6878      	ldr	r0, [r7, #4]
 8109bda:	f000 f811 	bl	8109c00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8109bde:	687b      	ldr	r3, [r7, #4]
 8109be0:	681b      	ldr	r3, [r3, #0]
 8109be2:	68fa      	ldr	r2, [r7, #12]
 8109be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8109be6:	687b      	ldr	r3, [r7, #4]
 8109be8:	2220      	movs	r2, #32
 8109bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8109bee:	687b      	ldr	r3, [r7, #4]
 8109bf0:	2200      	movs	r2, #0
 8109bf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8109bf6:	2300      	movs	r3, #0
}
 8109bf8:	4618      	mov	r0, r3
 8109bfa:	3710      	adds	r7, #16
 8109bfc:	46bd      	mov	sp, r7
 8109bfe:	bd80      	pop	{r7, pc}

08109c00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8109c00:	b480      	push	{r7}
 8109c02:	b085      	sub	sp, #20
 8109c04:	af00      	add	r7, sp, #0
 8109c06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8109c08:	687b      	ldr	r3, [r7, #4]
 8109c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8109c0c:	2b00      	cmp	r3, #0
 8109c0e:	d108      	bne.n	8109c22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8109c10:	687b      	ldr	r3, [r7, #4]
 8109c12:	2201      	movs	r2, #1
 8109c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8109c18:	687b      	ldr	r3, [r7, #4]
 8109c1a:	2201      	movs	r2, #1
 8109c1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8109c20:	e031      	b.n	8109c86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8109c22:	2310      	movs	r3, #16
 8109c24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8109c26:	2310      	movs	r3, #16
 8109c28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8109c2a:	687b      	ldr	r3, [r7, #4]
 8109c2c:	681b      	ldr	r3, [r3, #0]
 8109c2e:	689b      	ldr	r3, [r3, #8]
 8109c30:	0e5b      	lsrs	r3, r3, #25
 8109c32:	b2db      	uxtb	r3, r3
 8109c34:	f003 0307 	and.w	r3, r3, #7
 8109c38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8109c3a:	687b      	ldr	r3, [r7, #4]
 8109c3c:	681b      	ldr	r3, [r3, #0]
 8109c3e:	689b      	ldr	r3, [r3, #8]
 8109c40:	0f5b      	lsrs	r3, r3, #29
 8109c42:	b2db      	uxtb	r3, r3
 8109c44:	f003 0307 	and.w	r3, r3, #7
 8109c48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109c4a:	7bbb      	ldrb	r3, [r7, #14]
 8109c4c:	7b3a      	ldrb	r2, [r7, #12]
 8109c4e:	4911      	ldr	r1, [pc, #68]	; (8109c94 <UARTEx_SetNbDataToProcess+0x94>)
 8109c50:	5c8a      	ldrb	r2, [r1, r2]
 8109c52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8109c56:	7b3a      	ldrb	r2, [r7, #12]
 8109c58:	490f      	ldr	r1, [pc, #60]	; (8109c98 <UARTEx_SetNbDataToProcess+0x98>)
 8109c5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8109c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8109c60:	b29a      	uxth	r2, r3
 8109c62:	687b      	ldr	r3, [r7, #4]
 8109c64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109c68:	7bfb      	ldrb	r3, [r7, #15]
 8109c6a:	7b7a      	ldrb	r2, [r7, #13]
 8109c6c:	4909      	ldr	r1, [pc, #36]	; (8109c94 <UARTEx_SetNbDataToProcess+0x94>)
 8109c6e:	5c8a      	ldrb	r2, [r1, r2]
 8109c70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8109c74:	7b7a      	ldrb	r2, [r7, #13]
 8109c76:	4908      	ldr	r1, [pc, #32]	; (8109c98 <UARTEx_SetNbDataToProcess+0x98>)
 8109c78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8109c7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8109c7e:	b29a      	uxth	r2, r3
 8109c80:	687b      	ldr	r3, [r7, #4]
 8109c82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8109c86:	bf00      	nop
 8109c88:	3714      	adds	r7, #20
 8109c8a:	46bd      	mov	sp, r7
 8109c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109c90:	4770      	bx	lr
 8109c92:	bf00      	nop
 8109c94:	0810e860 	.word	0x0810e860
 8109c98:	0810e868 	.word	0x0810e868

08109c9c <__cvt>:
 8109c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8109ca0:	ec55 4b10 	vmov	r4, r5, d0
 8109ca4:	2d00      	cmp	r5, #0
 8109ca6:	460e      	mov	r6, r1
 8109ca8:	4619      	mov	r1, r3
 8109caa:	462b      	mov	r3, r5
 8109cac:	bfbb      	ittet	lt
 8109cae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8109cb2:	461d      	movlt	r5, r3
 8109cb4:	2300      	movge	r3, #0
 8109cb6:	232d      	movlt	r3, #45	; 0x2d
 8109cb8:	700b      	strb	r3, [r1, #0]
 8109cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109cbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8109cc0:	4691      	mov	r9, r2
 8109cc2:	f023 0820 	bic.w	r8, r3, #32
 8109cc6:	bfbc      	itt	lt
 8109cc8:	4622      	movlt	r2, r4
 8109cca:	4614      	movlt	r4, r2
 8109ccc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8109cd0:	d005      	beq.n	8109cde <__cvt+0x42>
 8109cd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8109cd6:	d100      	bne.n	8109cda <__cvt+0x3e>
 8109cd8:	3601      	adds	r6, #1
 8109cda:	2102      	movs	r1, #2
 8109cdc:	e000      	b.n	8109ce0 <__cvt+0x44>
 8109cde:	2103      	movs	r1, #3
 8109ce0:	ab03      	add	r3, sp, #12
 8109ce2:	9301      	str	r3, [sp, #4]
 8109ce4:	ab02      	add	r3, sp, #8
 8109ce6:	9300      	str	r3, [sp, #0]
 8109ce8:	ec45 4b10 	vmov	d0, r4, r5
 8109cec:	4653      	mov	r3, sl
 8109cee:	4632      	mov	r2, r6
 8109cf0:	f001 f892 	bl	810ae18 <_dtoa_r>
 8109cf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8109cf8:	4607      	mov	r7, r0
 8109cfa:	d102      	bne.n	8109d02 <__cvt+0x66>
 8109cfc:	f019 0f01 	tst.w	r9, #1
 8109d00:	d022      	beq.n	8109d48 <__cvt+0xac>
 8109d02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8109d06:	eb07 0906 	add.w	r9, r7, r6
 8109d0a:	d110      	bne.n	8109d2e <__cvt+0x92>
 8109d0c:	783b      	ldrb	r3, [r7, #0]
 8109d0e:	2b30      	cmp	r3, #48	; 0x30
 8109d10:	d10a      	bne.n	8109d28 <__cvt+0x8c>
 8109d12:	2200      	movs	r2, #0
 8109d14:	2300      	movs	r3, #0
 8109d16:	4620      	mov	r0, r4
 8109d18:	4629      	mov	r1, r5
 8109d1a:	f7f6 ff5d 	bl	8100bd8 <__aeabi_dcmpeq>
 8109d1e:	b918      	cbnz	r0, 8109d28 <__cvt+0x8c>
 8109d20:	f1c6 0601 	rsb	r6, r6, #1
 8109d24:	f8ca 6000 	str.w	r6, [sl]
 8109d28:	f8da 3000 	ldr.w	r3, [sl]
 8109d2c:	4499      	add	r9, r3
 8109d2e:	2200      	movs	r2, #0
 8109d30:	2300      	movs	r3, #0
 8109d32:	4620      	mov	r0, r4
 8109d34:	4629      	mov	r1, r5
 8109d36:	f7f6 ff4f 	bl	8100bd8 <__aeabi_dcmpeq>
 8109d3a:	b108      	cbz	r0, 8109d40 <__cvt+0xa4>
 8109d3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8109d40:	2230      	movs	r2, #48	; 0x30
 8109d42:	9b03      	ldr	r3, [sp, #12]
 8109d44:	454b      	cmp	r3, r9
 8109d46:	d307      	bcc.n	8109d58 <__cvt+0xbc>
 8109d48:	9b03      	ldr	r3, [sp, #12]
 8109d4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8109d4c:	1bdb      	subs	r3, r3, r7
 8109d4e:	4638      	mov	r0, r7
 8109d50:	6013      	str	r3, [r2, #0]
 8109d52:	b004      	add	sp, #16
 8109d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109d58:	1c59      	adds	r1, r3, #1
 8109d5a:	9103      	str	r1, [sp, #12]
 8109d5c:	701a      	strb	r2, [r3, #0]
 8109d5e:	e7f0      	b.n	8109d42 <__cvt+0xa6>

08109d60 <__exponent>:
 8109d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109d62:	4603      	mov	r3, r0
 8109d64:	2900      	cmp	r1, #0
 8109d66:	bfb8      	it	lt
 8109d68:	4249      	neglt	r1, r1
 8109d6a:	f803 2b02 	strb.w	r2, [r3], #2
 8109d6e:	bfb4      	ite	lt
 8109d70:	222d      	movlt	r2, #45	; 0x2d
 8109d72:	222b      	movge	r2, #43	; 0x2b
 8109d74:	2909      	cmp	r1, #9
 8109d76:	7042      	strb	r2, [r0, #1]
 8109d78:	dd2a      	ble.n	8109dd0 <__exponent+0x70>
 8109d7a:	f10d 0207 	add.w	r2, sp, #7
 8109d7e:	4617      	mov	r7, r2
 8109d80:	260a      	movs	r6, #10
 8109d82:	4694      	mov	ip, r2
 8109d84:	fb91 f5f6 	sdiv	r5, r1, r6
 8109d88:	fb06 1415 	mls	r4, r6, r5, r1
 8109d8c:	3430      	adds	r4, #48	; 0x30
 8109d8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8109d92:	460c      	mov	r4, r1
 8109d94:	2c63      	cmp	r4, #99	; 0x63
 8109d96:	f102 32ff 	add.w	r2, r2, #4294967295
 8109d9a:	4629      	mov	r1, r5
 8109d9c:	dcf1      	bgt.n	8109d82 <__exponent+0x22>
 8109d9e:	3130      	adds	r1, #48	; 0x30
 8109da0:	f1ac 0402 	sub.w	r4, ip, #2
 8109da4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8109da8:	1c41      	adds	r1, r0, #1
 8109daa:	4622      	mov	r2, r4
 8109dac:	42ba      	cmp	r2, r7
 8109dae:	d30a      	bcc.n	8109dc6 <__exponent+0x66>
 8109db0:	f10d 0209 	add.w	r2, sp, #9
 8109db4:	eba2 020c 	sub.w	r2, r2, ip
 8109db8:	42bc      	cmp	r4, r7
 8109dba:	bf88      	it	hi
 8109dbc:	2200      	movhi	r2, #0
 8109dbe:	4413      	add	r3, r2
 8109dc0:	1a18      	subs	r0, r3, r0
 8109dc2:	b003      	add	sp, #12
 8109dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8109dc6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8109dca:	f801 5f01 	strb.w	r5, [r1, #1]!
 8109dce:	e7ed      	b.n	8109dac <__exponent+0x4c>
 8109dd0:	2330      	movs	r3, #48	; 0x30
 8109dd2:	3130      	adds	r1, #48	; 0x30
 8109dd4:	7083      	strb	r3, [r0, #2]
 8109dd6:	70c1      	strb	r1, [r0, #3]
 8109dd8:	1d03      	adds	r3, r0, #4
 8109dda:	e7f1      	b.n	8109dc0 <__exponent+0x60>

08109ddc <_printf_float>:
 8109ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109de0:	ed2d 8b02 	vpush	{d8}
 8109de4:	b08d      	sub	sp, #52	; 0x34
 8109de6:	460c      	mov	r4, r1
 8109de8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8109dec:	4616      	mov	r6, r2
 8109dee:	461f      	mov	r7, r3
 8109df0:	4605      	mov	r5, r0
 8109df2:	f000 ff09 	bl	810ac08 <_localeconv_r>
 8109df6:	f8d0 a000 	ldr.w	sl, [r0]
 8109dfa:	4650      	mov	r0, sl
 8109dfc:	f7f6 fac0 	bl	8100380 <strlen>
 8109e00:	2300      	movs	r3, #0
 8109e02:	930a      	str	r3, [sp, #40]	; 0x28
 8109e04:	6823      	ldr	r3, [r4, #0]
 8109e06:	9305      	str	r3, [sp, #20]
 8109e08:	f8d8 3000 	ldr.w	r3, [r8]
 8109e0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8109e10:	3307      	adds	r3, #7
 8109e12:	f023 0307 	bic.w	r3, r3, #7
 8109e16:	f103 0208 	add.w	r2, r3, #8
 8109e1a:	f8c8 2000 	str.w	r2, [r8]
 8109e1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8109e22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8109e26:	9307      	str	r3, [sp, #28]
 8109e28:	f8cd 8018 	str.w	r8, [sp, #24]
 8109e2c:	ee08 0a10 	vmov	s16, r0
 8109e30:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8109e34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109e38:	4b9e      	ldr	r3, [pc, #632]	; (810a0b4 <_printf_float+0x2d8>)
 8109e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8109e3e:	f7f6 fefd 	bl	8100c3c <__aeabi_dcmpun>
 8109e42:	bb88      	cbnz	r0, 8109ea8 <_printf_float+0xcc>
 8109e44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8109e48:	4b9a      	ldr	r3, [pc, #616]	; (810a0b4 <_printf_float+0x2d8>)
 8109e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8109e4e:	f7f6 fed7 	bl	8100c00 <__aeabi_dcmple>
 8109e52:	bb48      	cbnz	r0, 8109ea8 <_printf_float+0xcc>
 8109e54:	2200      	movs	r2, #0
 8109e56:	2300      	movs	r3, #0
 8109e58:	4640      	mov	r0, r8
 8109e5a:	4649      	mov	r1, r9
 8109e5c:	f7f6 fec6 	bl	8100bec <__aeabi_dcmplt>
 8109e60:	b110      	cbz	r0, 8109e68 <_printf_float+0x8c>
 8109e62:	232d      	movs	r3, #45	; 0x2d
 8109e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109e68:	4a93      	ldr	r2, [pc, #588]	; (810a0b8 <_printf_float+0x2dc>)
 8109e6a:	4b94      	ldr	r3, [pc, #592]	; (810a0bc <_printf_float+0x2e0>)
 8109e6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8109e70:	bf94      	ite	ls
 8109e72:	4690      	movls	r8, r2
 8109e74:	4698      	movhi	r8, r3
 8109e76:	2303      	movs	r3, #3
 8109e78:	6123      	str	r3, [r4, #16]
 8109e7a:	9b05      	ldr	r3, [sp, #20]
 8109e7c:	f023 0304 	bic.w	r3, r3, #4
 8109e80:	6023      	str	r3, [r4, #0]
 8109e82:	f04f 0900 	mov.w	r9, #0
 8109e86:	9700      	str	r7, [sp, #0]
 8109e88:	4633      	mov	r3, r6
 8109e8a:	aa0b      	add	r2, sp, #44	; 0x2c
 8109e8c:	4621      	mov	r1, r4
 8109e8e:	4628      	mov	r0, r5
 8109e90:	f000 f9da 	bl	810a248 <_printf_common>
 8109e94:	3001      	adds	r0, #1
 8109e96:	f040 8090 	bne.w	8109fba <_printf_float+0x1de>
 8109e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8109e9e:	b00d      	add	sp, #52	; 0x34
 8109ea0:	ecbd 8b02 	vpop	{d8}
 8109ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8109ea8:	4642      	mov	r2, r8
 8109eaa:	464b      	mov	r3, r9
 8109eac:	4640      	mov	r0, r8
 8109eae:	4649      	mov	r1, r9
 8109eb0:	f7f6 fec4 	bl	8100c3c <__aeabi_dcmpun>
 8109eb4:	b140      	cbz	r0, 8109ec8 <_printf_float+0xec>
 8109eb6:	464b      	mov	r3, r9
 8109eb8:	2b00      	cmp	r3, #0
 8109eba:	bfbc      	itt	lt
 8109ebc:	232d      	movlt	r3, #45	; 0x2d
 8109ebe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8109ec2:	4a7f      	ldr	r2, [pc, #508]	; (810a0c0 <_printf_float+0x2e4>)
 8109ec4:	4b7f      	ldr	r3, [pc, #508]	; (810a0c4 <_printf_float+0x2e8>)
 8109ec6:	e7d1      	b.n	8109e6c <_printf_float+0x90>
 8109ec8:	6863      	ldr	r3, [r4, #4]
 8109eca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8109ece:	9206      	str	r2, [sp, #24]
 8109ed0:	1c5a      	adds	r2, r3, #1
 8109ed2:	d13f      	bne.n	8109f54 <_printf_float+0x178>
 8109ed4:	2306      	movs	r3, #6
 8109ed6:	6063      	str	r3, [r4, #4]
 8109ed8:	9b05      	ldr	r3, [sp, #20]
 8109eda:	6861      	ldr	r1, [r4, #4]
 8109edc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8109ee0:	2300      	movs	r3, #0
 8109ee2:	9303      	str	r3, [sp, #12]
 8109ee4:	ab0a      	add	r3, sp, #40	; 0x28
 8109ee6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8109eea:	ab09      	add	r3, sp, #36	; 0x24
 8109eec:	ec49 8b10 	vmov	d0, r8, r9
 8109ef0:	9300      	str	r3, [sp, #0]
 8109ef2:	6022      	str	r2, [r4, #0]
 8109ef4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8109ef8:	4628      	mov	r0, r5
 8109efa:	f7ff fecf 	bl	8109c9c <__cvt>
 8109efe:	9b06      	ldr	r3, [sp, #24]
 8109f00:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109f02:	2b47      	cmp	r3, #71	; 0x47
 8109f04:	4680      	mov	r8, r0
 8109f06:	d108      	bne.n	8109f1a <_printf_float+0x13e>
 8109f08:	1cc8      	adds	r0, r1, #3
 8109f0a:	db02      	blt.n	8109f12 <_printf_float+0x136>
 8109f0c:	6863      	ldr	r3, [r4, #4]
 8109f0e:	4299      	cmp	r1, r3
 8109f10:	dd41      	ble.n	8109f96 <_printf_float+0x1ba>
 8109f12:	f1ab 0302 	sub.w	r3, fp, #2
 8109f16:	fa5f fb83 	uxtb.w	fp, r3
 8109f1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109f1e:	d820      	bhi.n	8109f62 <_printf_float+0x186>
 8109f20:	3901      	subs	r1, #1
 8109f22:	465a      	mov	r2, fp
 8109f24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8109f28:	9109      	str	r1, [sp, #36]	; 0x24
 8109f2a:	f7ff ff19 	bl	8109d60 <__exponent>
 8109f2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8109f30:	1813      	adds	r3, r2, r0
 8109f32:	2a01      	cmp	r2, #1
 8109f34:	4681      	mov	r9, r0
 8109f36:	6123      	str	r3, [r4, #16]
 8109f38:	dc02      	bgt.n	8109f40 <_printf_float+0x164>
 8109f3a:	6822      	ldr	r2, [r4, #0]
 8109f3c:	07d2      	lsls	r2, r2, #31
 8109f3e:	d501      	bpl.n	8109f44 <_printf_float+0x168>
 8109f40:	3301      	adds	r3, #1
 8109f42:	6123      	str	r3, [r4, #16]
 8109f44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8109f48:	2b00      	cmp	r3, #0
 8109f4a:	d09c      	beq.n	8109e86 <_printf_float+0xaa>
 8109f4c:	232d      	movs	r3, #45	; 0x2d
 8109f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8109f52:	e798      	b.n	8109e86 <_printf_float+0xaa>
 8109f54:	9a06      	ldr	r2, [sp, #24]
 8109f56:	2a47      	cmp	r2, #71	; 0x47
 8109f58:	d1be      	bne.n	8109ed8 <_printf_float+0xfc>
 8109f5a:	2b00      	cmp	r3, #0
 8109f5c:	d1bc      	bne.n	8109ed8 <_printf_float+0xfc>
 8109f5e:	2301      	movs	r3, #1
 8109f60:	e7b9      	b.n	8109ed6 <_printf_float+0xfa>
 8109f62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8109f66:	d118      	bne.n	8109f9a <_printf_float+0x1be>
 8109f68:	2900      	cmp	r1, #0
 8109f6a:	6863      	ldr	r3, [r4, #4]
 8109f6c:	dd0b      	ble.n	8109f86 <_printf_float+0x1aa>
 8109f6e:	6121      	str	r1, [r4, #16]
 8109f70:	b913      	cbnz	r3, 8109f78 <_printf_float+0x19c>
 8109f72:	6822      	ldr	r2, [r4, #0]
 8109f74:	07d0      	lsls	r0, r2, #31
 8109f76:	d502      	bpl.n	8109f7e <_printf_float+0x1a2>
 8109f78:	3301      	adds	r3, #1
 8109f7a:	440b      	add	r3, r1
 8109f7c:	6123      	str	r3, [r4, #16]
 8109f7e:	65a1      	str	r1, [r4, #88]	; 0x58
 8109f80:	f04f 0900 	mov.w	r9, #0
 8109f84:	e7de      	b.n	8109f44 <_printf_float+0x168>
 8109f86:	b913      	cbnz	r3, 8109f8e <_printf_float+0x1b2>
 8109f88:	6822      	ldr	r2, [r4, #0]
 8109f8a:	07d2      	lsls	r2, r2, #31
 8109f8c:	d501      	bpl.n	8109f92 <_printf_float+0x1b6>
 8109f8e:	3302      	adds	r3, #2
 8109f90:	e7f4      	b.n	8109f7c <_printf_float+0x1a0>
 8109f92:	2301      	movs	r3, #1
 8109f94:	e7f2      	b.n	8109f7c <_printf_float+0x1a0>
 8109f96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8109f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109f9c:	4299      	cmp	r1, r3
 8109f9e:	db05      	blt.n	8109fac <_printf_float+0x1d0>
 8109fa0:	6823      	ldr	r3, [r4, #0]
 8109fa2:	6121      	str	r1, [r4, #16]
 8109fa4:	07d8      	lsls	r0, r3, #31
 8109fa6:	d5ea      	bpl.n	8109f7e <_printf_float+0x1a2>
 8109fa8:	1c4b      	adds	r3, r1, #1
 8109faa:	e7e7      	b.n	8109f7c <_printf_float+0x1a0>
 8109fac:	2900      	cmp	r1, #0
 8109fae:	bfd4      	ite	le
 8109fb0:	f1c1 0202 	rsble	r2, r1, #2
 8109fb4:	2201      	movgt	r2, #1
 8109fb6:	4413      	add	r3, r2
 8109fb8:	e7e0      	b.n	8109f7c <_printf_float+0x1a0>
 8109fba:	6823      	ldr	r3, [r4, #0]
 8109fbc:	055a      	lsls	r2, r3, #21
 8109fbe:	d407      	bmi.n	8109fd0 <_printf_float+0x1f4>
 8109fc0:	6923      	ldr	r3, [r4, #16]
 8109fc2:	4642      	mov	r2, r8
 8109fc4:	4631      	mov	r1, r6
 8109fc6:	4628      	mov	r0, r5
 8109fc8:	47b8      	blx	r7
 8109fca:	3001      	adds	r0, #1
 8109fcc:	d12c      	bne.n	810a028 <_printf_float+0x24c>
 8109fce:	e764      	b.n	8109e9a <_printf_float+0xbe>
 8109fd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8109fd4:	f240 80e0 	bls.w	810a198 <_printf_float+0x3bc>
 8109fd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8109fdc:	2200      	movs	r2, #0
 8109fde:	2300      	movs	r3, #0
 8109fe0:	f7f6 fdfa 	bl	8100bd8 <__aeabi_dcmpeq>
 8109fe4:	2800      	cmp	r0, #0
 8109fe6:	d034      	beq.n	810a052 <_printf_float+0x276>
 8109fe8:	4a37      	ldr	r2, [pc, #220]	; (810a0c8 <_printf_float+0x2ec>)
 8109fea:	2301      	movs	r3, #1
 8109fec:	4631      	mov	r1, r6
 8109fee:	4628      	mov	r0, r5
 8109ff0:	47b8      	blx	r7
 8109ff2:	3001      	adds	r0, #1
 8109ff4:	f43f af51 	beq.w	8109e9a <_printf_float+0xbe>
 8109ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8109ffc:	429a      	cmp	r2, r3
 8109ffe:	db02      	blt.n	810a006 <_printf_float+0x22a>
 810a000:	6823      	ldr	r3, [r4, #0]
 810a002:	07d8      	lsls	r0, r3, #31
 810a004:	d510      	bpl.n	810a028 <_printf_float+0x24c>
 810a006:	ee18 3a10 	vmov	r3, s16
 810a00a:	4652      	mov	r2, sl
 810a00c:	4631      	mov	r1, r6
 810a00e:	4628      	mov	r0, r5
 810a010:	47b8      	blx	r7
 810a012:	3001      	adds	r0, #1
 810a014:	f43f af41 	beq.w	8109e9a <_printf_float+0xbe>
 810a018:	f04f 0800 	mov.w	r8, #0
 810a01c:	f104 091a 	add.w	r9, r4, #26
 810a020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a022:	3b01      	subs	r3, #1
 810a024:	4543      	cmp	r3, r8
 810a026:	dc09      	bgt.n	810a03c <_printf_float+0x260>
 810a028:	6823      	ldr	r3, [r4, #0]
 810a02a:	079b      	lsls	r3, r3, #30
 810a02c:	f100 8107 	bmi.w	810a23e <_printf_float+0x462>
 810a030:	68e0      	ldr	r0, [r4, #12]
 810a032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810a034:	4298      	cmp	r0, r3
 810a036:	bfb8      	it	lt
 810a038:	4618      	movlt	r0, r3
 810a03a:	e730      	b.n	8109e9e <_printf_float+0xc2>
 810a03c:	2301      	movs	r3, #1
 810a03e:	464a      	mov	r2, r9
 810a040:	4631      	mov	r1, r6
 810a042:	4628      	mov	r0, r5
 810a044:	47b8      	blx	r7
 810a046:	3001      	adds	r0, #1
 810a048:	f43f af27 	beq.w	8109e9a <_printf_float+0xbe>
 810a04c:	f108 0801 	add.w	r8, r8, #1
 810a050:	e7e6      	b.n	810a020 <_printf_float+0x244>
 810a052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a054:	2b00      	cmp	r3, #0
 810a056:	dc39      	bgt.n	810a0cc <_printf_float+0x2f0>
 810a058:	4a1b      	ldr	r2, [pc, #108]	; (810a0c8 <_printf_float+0x2ec>)
 810a05a:	2301      	movs	r3, #1
 810a05c:	4631      	mov	r1, r6
 810a05e:	4628      	mov	r0, r5
 810a060:	47b8      	blx	r7
 810a062:	3001      	adds	r0, #1
 810a064:	f43f af19 	beq.w	8109e9a <_printf_float+0xbe>
 810a068:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810a06c:	4313      	orrs	r3, r2
 810a06e:	d102      	bne.n	810a076 <_printf_float+0x29a>
 810a070:	6823      	ldr	r3, [r4, #0]
 810a072:	07d9      	lsls	r1, r3, #31
 810a074:	d5d8      	bpl.n	810a028 <_printf_float+0x24c>
 810a076:	ee18 3a10 	vmov	r3, s16
 810a07a:	4652      	mov	r2, sl
 810a07c:	4631      	mov	r1, r6
 810a07e:	4628      	mov	r0, r5
 810a080:	47b8      	blx	r7
 810a082:	3001      	adds	r0, #1
 810a084:	f43f af09 	beq.w	8109e9a <_printf_float+0xbe>
 810a088:	f04f 0900 	mov.w	r9, #0
 810a08c:	f104 0a1a 	add.w	sl, r4, #26
 810a090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a092:	425b      	negs	r3, r3
 810a094:	454b      	cmp	r3, r9
 810a096:	dc01      	bgt.n	810a09c <_printf_float+0x2c0>
 810a098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a09a:	e792      	b.n	8109fc2 <_printf_float+0x1e6>
 810a09c:	2301      	movs	r3, #1
 810a09e:	4652      	mov	r2, sl
 810a0a0:	4631      	mov	r1, r6
 810a0a2:	4628      	mov	r0, r5
 810a0a4:	47b8      	blx	r7
 810a0a6:	3001      	adds	r0, #1
 810a0a8:	f43f aef7 	beq.w	8109e9a <_printf_float+0xbe>
 810a0ac:	f109 0901 	add.w	r9, r9, #1
 810a0b0:	e7ee      	b.n	810a090 <_printf_float+0x2b4>
 810a0b2:	bf00      	nop
 810a0b4:	7fefffff 	.word	0x7fefffff
 810a0b8:	0810e870 	.word	0x0810e870
 810a0bc:	0810e874 	.word	0x0810e874
 810a0c0:	0810e878 	.word	0x0810e878
 810a0c4:	0810e87c 	.word	0x0810e87c
 810a0c8:	0810e880 	.word	0x0810e880
 810a0cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a0ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810a0d0:	429a      	cmp	r2, r3
 810a0d2:	bfa8      	it	ge
 810a0d4:	461a      	movge	r2, r3
 810a0d6:	2a00      	cmp	r2, #0
 810a0d8:	4691      	mov	r9, r2
 810a0da:	dc37      	bgt.n	810a14c <_printf_float+0x370>
 810a0dc:	f04f 0b00 	mov.w	fp, #0
 810a0e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810a0e4:	f104 021a 	add.w	r2, r4, #26
 810a0e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810a0ea:	9305      	str	r3, [sp, #20]
 810a0ec:	eba3 0309 	sub.w	r3, r3, r9
 810a0f0:	455b      	cmp	r3, fp
 810a0f2:	dc33      	bgt.n	810a15c <_printf_float+0x380>
 810a0f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810a0f8:	429a      	cmp	r2, r3
 810a0fa:	db3b      	blt.n	810a174 <_printf_float+0x398>
 810a0fc:	6823      	ldr	r3, [r4, #0]
 810a0fe:	07da      	lsls	r2, r3, #31
 810a100:	d438      	bmi.n	810a174 <_printf_float+0x398>
 810a102:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810a106:	eba2 0903 	sub.w	r9, r2, r3
 810a10a:	9b05      	ldr	r3, [sp, #20]
 810a10c:	1ad2      	subs	r2, r2, r3
 810a10e:	4591      	cmp	r9, r2
 810a110:	bfa8      	it	ge
 810a112:	4691      	movge	r9, r2
 810a114:	f1b9 0f00 	cmp.w	r9, #0
 810a118:	dc35      	bgt.n	810a186 <_printf_float+0x3aa>
 810a11a:	f04f 0800 	mov.w	r8, #0
 810a11e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810a122:	f104 0a1a 	add.w	sl, r4, #26
 810a126:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810a12a:	1a9b      	subs	r3, r3, r2
 810a12c:	eba3 0309 	sub.w	r3, r3, r9
 810a130:	4543      	cmp	r3, r8
 810a132:	f77f af79 	ble.w	810a028 <_printf_float+0x24c>
 810a136:	2301      	movs	r3, #1
 810a138:	4652      	mov	r2, sl
 810a13a:	4631      	mov	r1, r6
 810a13c:	4628      	mov	r0, r5
 810a13e:	47b8      	blx	r7
 810a140:	3001      	adds	r0, #1
 810a142:	f43f aeaa 	beq.w	8109e9a <_printf_float+0xbe>
 810a146:	f108 0801 	add.w	r8, r8, #1
 810a14a:	e7ec      	b.n	810a126 <_printf_float+0x34a>
 810a14c:	4613      	mov	r3, r2
 810a14e:	4631      	mov	r1, r6
 810a150:	4642      	mov	r2, r8
 810a152:	4628      	mov	r0, r5
 810a154:	47b8      	blx	r7
 810a156:	3001      	adds	r0, #1
 810a158:	d1c0      	bne.n	810a0dc <_printf_float+0x300>
 810a15a:	e69e      	b.n	8109e9a <_printf_float+0xbe>
 810a15c:	2301      	movs	r3, #1
 810a15e:	4631      	mov	r1, r6
 810a160:	4628      	mov	r0, r5
 810a162:	9205      	str	r2, [sp, #20]
 810a164:	47b8      	blx	r7
 810a166:	3001      	adds	r0, #1
 810a168:	f43f ae97 	beq.w	8109e9a <_printf_float+0xbe>
 810a16c:	9a05      	ldr	r2, [sp, #20]
 810a16e:	f10b 0b01 	add.w	fp, fp, #1
 810a172:	e7b9      	b.n	810a0e8 <_printf_float+0x30c>
 810a174:	ee18 3a10 	vmov	r3, s16
 810a178:	4652      	mov	r2, sl
 810a17a:	4631      	mov	r1, r6
 810a17c:	4628      	mov	r0, r5
 810a17e:	47b8      	blx	r7
 810a180:	3001      	adds	r0, #1
 810a182:	d1be      	bne.n	810a102 <_printf_float+0x326>
 810a184:	e689      	b.n	8109e9a <_printf_float+0xbe>
 810a186:	9a05      	ldr	r2, [sp, #20]
 810a188:	464b      	mov	r3, r9
 810a18a:	4442      	add	r2, r8
 810a18c:	4631      	mov	r1, r6
 810a18e:	4628      	mov	r0, r5
 810a190:	47b8      	blx	r7
 810a192:	3001      	adds	r0, #1
 810a194:	d1c1      	bne.n	810a11a <_printf_float+0x33e>
 810a196:	e680      	b.n	8109e9a <_printf_float+0xbe>
 810a198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810a19a:	2a01      	cmp	r2, #1
 810a19c:	dc01      	bgt.n	810a1a2 <_printf_float+0x3c6>
 810a19e:	07db      	lsls	r3, r3, #31
 810a1a0:	d53a      	bpl.n	810a218 <_printf_float+0x43c>
 810a1a2:	2301      	movs	r3, #1
 810a1a4:	4642      	mov	r2, r8
 810a1a6:	4631      	mov	r1, r6
 810a1a8:	4628      	mov	r0, r5
 810a1aa:	47b8      	blx	r7
 810a1ac:	3001      	adds	r0, #1
 810a1ae:	f43f ae74 	beq.w	8109e9a <_printf_float+0xbe>
 810a1b2:	ee18 3a10 	vmov	r3, s16
 810a1b6:	4652      	mov	r2, sl
 810a1b8:	4631      	mov	r1, r6
 810a1ba:	4628      	mov	r0, r5
 810a1bc:	47b8      	blx	r7
 810a1be:	3001      	adds	r0, #1
 810a1c0:	f43f ae6b 	beq.w	8109e9a <_printf_float+0xbe>
 810a1c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810a1c8:	2200      	movs	r2, #0
 810a1ca:	2300      	movs	r3, #0
 810a1cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 810a1d0:	f7f6 fd02 	bl	8100bd8 <__aeabi_dcmpeq>
 810a1d4:	b9d8      	cbnz	r0, 810a20e <_printf_float+0x432>
 810a1d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 810a1da:	f108 0201 	add.w	r2, r8, #1
 810a1de:	4631      	mov	r1, r6
 810a1e0:	4628      	mov	r0, r5
 810a1e2:	47b8      	blx	r7
 810a1e4:	3001      	adds	r0, #1
 810a1e6:	d10e      	bne.n	810a206 <_printf_float+0x42a>
 810a1e8:	e657      	b.n	8109e9a <_printf_float+0xbe>
 810a1ea:	2301      	movs	r3, #1
 810a1ec:	4652      	mov	r2, sl
 810a1ee:	4631      	mov	r1, r6
 810a1f0:	4628      	mov	r0, r5
 810a1f2:	47b8      	blx	r7
 810a1f4:	3001      	adds	r0, #1
 810a1f6:	f43f ae50 	beq.w	8109e9a <_printf_float+0xbe>
 810a1fa:	f108 0801 	add.w	r8, r8, #1
 810a1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810a200:	3b01      	subs	r3, #1
 810a202:	4543      	cmp	r3, r8
 810a204:	dcf1      	bgt.n	810a1ea <_printf_float+0x40e>
 810a206:	464b      	mov	r3, r9
 810a208:	f104 0250 	add.w	r2, r4, #80	; 0x50
 810a20c:	e6da      	b.n	8109fc4 <_printf_float+0x1e8>
 810a20e:	f04f 0800 	mov.w	r8, #0
 810a212:	f104 0a1a 	add.w	sl, r4, #26
 810a216:	e7f2      	b.n	810a1fe <_printf_float+0x422>
 810a218:	2301      	movs	r3, #1
 810a21a:	4642      	mov	r2, r8
 810a21c:	e7df      	b.n	810a1de <_printf_float+0x402>
 810a21e:	2301      	movs	r3, #1
 810a220:	464a      	mov	r2, r9
 810a222:	4631      	mov	r1, r6
 810a224:	4628      	mov	r0, r5
 810a226:	47b8      	blx	r7
 810a228:	3001      	adds	r0, #1
 810a22a:	f43f ae36 	beq.w	8109e9a <_printf_float+0xbe>
 810a22e:	f108 0801 	add.w	r8, r8, #1
 810a232:	68e3      	ldr	r3, [r4, #12]
 810a234:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810a236:	1a5b      	subs	r3, r3, r1
 810a238:	4543      	cmp	r3, r8
 810a23a:	dcf0      	bgt.n	810a21e <_printf_float+0x442>
 810a23c:	e6f8      	b.n	810a030 <_printf_float+0x254>
 810a23e:	f04f 0800 	mov.w	r8, #0
 810a242:	f104 0919 	add.w	r9, r4, #25
 810a246:	e7f4      	b.n	810a232 <_printf_float+0x456>

0810a248 <_printf_common>:
 810a248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810a24c:	4616      	mov	r6, r2
 810a24e:	4699      	mov	r9, r3
 810a250:	688a      	ldr	r2, [r1, #8]
 810a252:	690b      	ldr	r3, [r1, #16]
 810a254:	f8dd 8020 	ldr.w	r8, [sp, #32]
 810a258:	4293      	cmp	r3, r2
 810a25a:	bfb8      	it	lt
 810a25c:	4613      	movlt	r3, r2
 810a25e:	6033      	str	r3, [r6, #0]
 810a260:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 810a264:	4607      	mov	r7, r0
 810a266:	460c      	mov	r4, r1
 810a268:	b10a      	cbz	r2, 810a26e <_printf_common+0x26>
 810a26a:	3301      	adds	r3, #1
 810a26c:	6033      	str	r3, [r6, #0]
 810a26e:	6823      	ldr	r3, [r4, #0]
 810a270:	0699      	lsls	r1, r3, #26
 810a272:	bf42      	ittt	mi
 810a274:	6833      	ldrmi	r3, [r6, #0]
 810a276:	3302      	addmi	r3, #2
 810a278:	6033      	strmi	r3, [r6, #0]
 810a27a:	6825      	ldr	r5, [r4, #0]
 810a27c:	f015 0506 	ands.w	r5, r5, #6
 810a280:	d106      	bne.n	810a290 <_printf_common+0x48>
 810a282:	f104 0a19 	add.w	sl, r4, #25
 810a286:	68e3      	ldr	r3, [r4, #12]
 810a288:	6832      	ldr	r2, [r6, #0]
 810a28a:	1a9b      	subs	r3, r3, r2
 810a28c:	42ab      	cmp	r3, r5
 810a28e:	dc26      	bgt.n	810a2de <_printf_common+0x96>
 810a290:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 810a294:	1e13      	subs	r3, r2, #0
 810a296:	6822      	ldr	r2, [r4, #0]
 810a298:	bf18      	it	ne
 810a29a:	2301      	movne	r3, #1
 810a29c:	0692      	lsls	r2, r2, #26
 810a29e:	d42b      	bmi.n	810a2f8 <_printf_common+0xb0>
 810a2a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 810a2a4:	4649      	mov	r1, r9
 810a2a6:	4638      	mov	r0, r7
 810a2a8:	47c0      	blx	r8
 810a2aa:	3001      	adds	r0, #1
 810a2ac:	d01e      	beq.n	810a2ec <_printf_common+0xa4>
 810a2ae:	6823      	ldr	r3, [r4, #0]
 810a2b0:	6922      	ldr	r2, [r4, #16]
 810a2b2:	f003 0306 	and.w	r3, r3, #6
 810a2b6:	2b04      	cmp	r3, #4
 810a2b8:	bf02      	ittt	eq
 810a2ba:	68e5      	ldreq	r5, [r4, #12]
 810a2bc:	6833      	ldreq	r3, [r6, #0]
 810a2be:	1aed      	subeq	r5, r5, r3
 810a2c0:	68a3      	ldr	r3, [r4, #8]
 810a2c2:	bf0c      	ite	eq
 810a2c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810a2c8:	2500      	movne	r5, #0
 810a2ca:	4293      	cmp	r3, r2
 810a2cc:	bfc4      	itt	gt
 810a2ce:	1a9b      	subgt	r3, r3, r2
 810a2d0:	18ed      	addgt	r5, r5, r3
 810a2d2:	2600      	movs	r6, #0
 810a2d4:	341a      	adds	r4, #26
 810a2d6:	42b5      	cmp	r5, r6
 810a2d8:	d11a      	bne.n	810a310 <_printf_common+0xc8>
 810a2da:	2000      	movs	r0, #0
 810a2dc:	e008      	b.n	810a2f0 <_printf_common+0xa8>
 810a2de:	2301      	movs	r3, #1
 810a2e0:	4652      	mov	r2, sl
 810a2e2:	4649      	mov	r1, r9
 810a2e4:	4638      	mov	r0, r7
 810a2e6:	47c0      	blx	r8
 810a2e8:	3001      	adds	r0, #1
 810a2ea:	d103      	bne.n	810a2f4 <_printf_common+0xac>
 810a2ec:	f04f 30ff 	mov.w	r0, #4294967295
 810a2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a2f4:	3501      	adds	r5, #1
 810a2f6:	e7c6      	b.n	810a286 <_printf_common+0x3e>
 810a2f8:	18e1      	adds	r1, r4, r3
 810a2fa:	1c5a      	adds	r2, r3, #1
 810a2fc:	2030      	movs	r0, #48	; 0x30
 810a2fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 810a302:	4422      	add	r2, r4
 810a304:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 810a308:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 810a30c:	3302      	adds	r3, #2
 810a30e:	e7c7      	b.n	810a2a0 <_printf_common+0x58>
 810a310:	2301      	movs	r3, #1
 810a312:	4622      	mov	r2, r4
 810a314:	4649      	mov	r1, r9
 810a316:	4638      	mov	r0, r7
 810a318:	47c0      	blx	r8
 810a31a:	3001      	adds	r0, #1
 810a31c:	d0e6      	beq.n	810a2ec <_printf_common+0xa4>
 810a31e:	3601      	adds	r6, #1
 810a320:	e7d9      	b.n	810a2d6 <_printf_common+0x8e>
	...

0810a324 <_printf_i>:
 810a324:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810a328:	7e0f      	ldrb	r7, [r1, #24]
 810a32a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 810a32c:	2f78      	cmp	r7, #120	; 0x78
 810a32e:	4691      	mov	r9, r2
 810a330:	4680      	mov	r8, r0
 810a332:	460c      	mov	r4, r1
 810a334:	469a      	mov	sl, r3
 810a336:	f101 0243 	add.w	r2, r1, #67	; 0x43
 810a33a:	d807      	bhi.n	810a34c <_printf_i+0x28>
 810a33c:	2f62      	cmp	r7, #98	; 0x62
 810a33e:	d80a      	bhi.n	810a356 <_printf_i+0x32>
 810a340:	2f00      	cmp	r7, #0
 810a342:	f000 80d4 	beq.w	810a4ee <_printf_i+0x1ca>
 810a346:	2f58      	cmp	r7, #88	; 0x58
 810a348:	f000 80c0 	beq.w	810a4cc <_printf_i+0x1a8>
 810a34c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a350:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 810a354:	e03a      	b.n	810a3cc <_printf_i+0xa8>
 810a356:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 810a35a:	2b15      	cmp	r3, #21
 810a35c:	d8f6      	bhi.n	810a34c <_printf_i+0x28>
 810a35e:	a101      	add	r1, pc, #4	; (adr r1, 810a364 <_printf_i+0x40>)
 810a360:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810a364:	0810a3bd 	.word	0x0810a3bd
 810a368:	0810a3d1 	.word	0x0810a3d1
 810a36c:	0810a34d 	.word	0x0810a34d
 810a370:	0810a34d 	.word	0x0810a34d
 810a374:	0810a34d 	.word	0x0810a34d
 810a378:	0810a34d 	.word	0x0810a34d
 810a37c:	0810a3d1 	.word	0x0810a3d1
 810a380:	0810a34d 	.word	0x0810a34d
 810a384:	0810a34d 	.word	0x0810a34d
 810a388:	0810a34d 	.word	0x0810a34d
 810a38c:	0810a34d 	.word	0x0810a34d
 810a390:	0810a4d5 	.word	0x0810a4d5
 810a394:	0810a3fd 	.word	0x0810a3fd
 810a398:	0810a48f 	.word	0x0810a48f
 810a39c:	0810a34d 	.word	0x0810a34d
 810a3a0:	0810a34d 	.word	0x0810a34d
 810a3a4:	0810a4f7 	.word	0x0810a4f7
 810a3a8:	0810a34d 	.word	0x0810a34d
 810a3ac:	0810a3fd 	.word	0x0810a3fd
 810a3b0:	0810a34d 	.word	0x0810a34d
 810a3b4:	0810a34d 	.word	0x0810a34d
 810a3b8:	0810a497 	.word	0x0810a497
 810a3bc:	682b      	ldr	r3, [r5, #0]
 810a3be:	1d1a      	adds	r2, r3, #4
 810a3c0:	681b      	ldr	r3, [r3, #0]
 810a3c2:	602a      	str	r2, [r5, #0]
 810a3c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 810a3c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810a3cc:	2301      	movs	r3, #1
 810a3ce:	e09f      	b.n	810a510 <_printf_i+0x1ec>
 810a3d0:	6820      	ldr	r0, [r4, #0]
 810a3d2:	682b      	ldr	r3, [r5, #0]
 810a3d4:	0607      	lsls	r7, r0, #24
 810a3d6:	f103 0104 	add.w	r1, r3, #4
 810a3da:	6029      	str	r1, [r5, #0]
 810a3dc:	d501      	bpl.n	810a3e2 <_printf_i+0xbe>
 810a3de:	681e      	ldr	r6, [r3, #0]
 810a3e0:	e003      	b.n	810a3ea <_printf_i+0xc6>
 810a3e2:	0646      	lsls	r6, r0, #25
 810a3e4:	d5fb      	bpl.n	810a3de <_printf_i+0xba>
 810a3e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 810a3ea:	2e00      	cmp	r6, #0
 810a3ec:	da03      	bge.n	810a3f6 <_printf_i+0xd2>
 810a3ee:	232d      	movs	r3, #45	; 0x2d
 810a3f0:	4276      	negs	r6, r6
 810a3f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a3f6:	485a      	ldr	r0, [pc, #360]	; (810a560 <_printf_i+0x23c>)
 810a3f8:	230a      	movs	r3, #10
 810a3fa:	e012      	b.n	810a422 <_printf_i+0xfe>
 810a3fc:	682b      	ldr	r3, [r5, #0]
 810a3fe:	6820      	ldr	r0, [r4, #0]
 810a400:	1d19      	adds	r1, r3, #4
 810a402:	6029      	str	r1, [r5, #0]
 810a404:	0605      	lsls	r5, r0, #24
 810a406:	d501      	bpl.n	810a40c <_printf_i+0xe8>
 810a408:	681e      	ldr	r6, [r3, #0]
 810a40a:	e002      	b.n	810a412 <_printf_i+0xee>
 810a40c:	0641      	lsls	r1, r0, #25
 810a40e:	d5fb      	bpl.n	810a408 <_printf_i+0xe4>
 810a410:	881e      	ldrh	r6, [r3, #0]
 810a412:	4853      	ldr	r0, [pc, #332]	; (810a560 <_printf_i+0x23c>)
 810a414:	2f6f      	cmp	r7, #111	; 0x6f
 810a416:	bf0c      	ite	eq
 810a418:	2308      	moveq	r3, #8
 810a41a:	230a      	movne	r3, #10
 810a41c:	2100      	movs	r1, #0
 810a41e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 810a422:	6865      	ldr	r5, [r4, #4]
 810a424:	60a5      	str	r5, [r4, #8]
 810a426:	2d00      	cmp	r5, #0
 810a428:	bfa2      	ittt	ge
 810a42a:	6821      	ldrge	r1, [r4, #0]
 810a42c:	f021 0104 	bicge.w	r1, r1, #4
 810a430:	6021      	strge	r1, [r4, #0]
 810a432:	b90e      	cbnz	r6, 810a438 <_printf_i+0x114>
 810a434:	2d00      	cmp	r5, #0
 810a436:	d04b      	beq.n	810a4d0 <_printf_i+0x1ac>
 810a438:	4615      	mov	r5, r2
 810a43a:	fbb6 f1f3 	udiv	r1, r6, r3
 810a43e:	fb03 6711 	mls	r7, r3, r1, r6
 810a442:	5dc7      	ldrb	r7, [r0, r7]
 810a444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 810a448:	4637      	mov	r7, r6
 810a44a:	42bb      	cmp	r3, r7
 810a44c:	460e      	mov	r6, r1
 810a44e:	d9f4      	bls.n	810a43a <_printf_i+0x116>
 810a450:	2b08      	cmp	r3, #8
 810a452:	d10b      	bne.n	810a46c <_printf_i+0x148>
 810a454:	6823      	ldr	r3, [r4, #0]
 810a456:	07de      	lsls	r6, r3, #31
 810a458:	d508      	bpl.n	810a46c <_printf_i+0x148>
 810a45a:	6923      	ldr	r3, [r4, #16]
 810a45c:	6861      	ldr	r1, [r4, #4]
 810a45e:	4299      	cmp	r1, r3
 810a460:	bfde      	ittt	le
 810a462:	2330      	movle	r3, #48	; 0x30
 810a464:	f805 3c01 	strble.w	r3, [r5, #-1]
 810a468:	f105 35ff 	addle.w	r5, r5, #4294967295
 810a46c:	1b52      	subs	r2, r2, r5
 810a46e:	6122      	str	r2, [r4, #16]
 810a470:	f8cd a000 	str.w	sl, [sp]
 810a474:	464b      	mov	r3, r9
 810a476:	aa03      	add	r2, sp, #12
 810a478:	4621      	mov	r1, r4
 810a47a:	4640      	mov	r0, r8
 810a47c:	f7ff fee4 	bl	810a248 <_printf_common>
 810a480:	3001      	adds	r0, #1
 810a482:	d14a      	bne.n	810a51a <_printf_i+0x1f6>
 810a484:	f04f 30ff 	mov.w	r0, #4294967295
 810a488:	b004      	add	sp, #16
 810a48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810a48e:	6823      	ldr	r3, [r4, #0]
 810a490:	f043 0320 	orr.w	r3, r3, #32
 810a494:	6023      	str	r3, [r4, #0]
 810a496:	4833      	ldr	r0, [pc, #204]	; (810a564 <_printf_i+0x240>)
 810a498:	2778      	movs	r7, #120	; 0x78
 810a49a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810a49e:	6823      	ldr	r3, [r4, #0]
 810a4a0:	6829      	ldr	r1, [r5, #0]
 810a4a2:	061f      	lsls	r7, r3, #24
 810a4a4:	f851 6b04 	ldr.w	r6, [r1], #4
 810a4a8:	d402      	bmi.n	810a4b0 <_printf_i+0x18c>
 810a4aa:	065f      	lsls	r7, r3, #25
 810a4ac:	bf48      	it	mi
 810a4ae:	b2b6      	uxthmi	r6, r6
 810a4b0:	07df      	lsls	r7, r3, #31
 810a4b2:	bf48      	it	mi
 810a4b4:	f043 0320 	orrmi.w	r3, r3, #32
 810a4b8:	6029      	str	r1, [r5, #0]
 810a4ba:	bf48      	it	mi
 810a4bc:	6023      	strmi	r3, [r4, #0]
 810a4be:	b91e      	cbnz	r6, 810a4c8 <_printf_i+0x1a4>
 810a4c0:	6823      	ldr	r3, [r4, #0]
 810a4c2:	f023 0320 	bic.w	r3, r3, #32
 810a4c6:	6023      	str	r3, [r4, #0]
 810a4c8:	2310      	movs	r3, #16
 810a4ca:	e7a7      	b.n	810a41c <_printf_i+0xf8>
 810a4cc:	4824      	ldr	r0, [pc, #144]	; (810a560 <_printf_i+0x23c>)
 810a4ce:	e7e4      	b.n	810a49a <_printf_i+0x176>
 810a4d0:	4615      	mov	r5, r2
 810a4d2:	e7bd      	b.n	810a450 <_printf_i+0x12c>
 810a4d4:	682b      	ldr	r3, [r5, #0]
 810a4d6:	6826      	ldr	r6, [r4, #0]
 810a4d8:	6961      	ldr	r1, [r4, #20]
 810a4da:	1d18      	adds	r0, r3, #4
 810a4dc:	6028      	str	r0, [r5, #0]
 810a4de:	0635      	lsls	r5, r6, #24
 810a4e0:	681b      	ldr	r3, [r3, #0]
 810a4e2:	d501      	bpl.n	810a4e8 <_printf_i+0x1c4>
 810a4e4:	6019      	str	r1, [r3, #0]
 810a4e6:	e002      	b.n	810a4ee <_printf_i+0x1ca>
 810a4e8:	0670      	lsls	r0, r6, #25
 810a4ea:	d5fb      	bpl.n	810a4e4 <_printf_i+0x1c0>
 810a4ec:	8019      	strh	r1, [r3, #0]
 810a4ee:	2300      	movs	r3, #0
 810a4f0:	6123      	str	r3, [r4, #16]
 810a4f2:	4615      	mov	r5, r2
 810a4f4:	e7bc      	b.n	810a470 <_printf_i+0x14c>
 810a4f6:	682b      	ldr	r3, [r5, #0]
 810a4f8:	1d1a      	adds	r2, r3, #4
 810a4fa:	602a      	str	r2, [r5, #0]
 810a4fc:	681d      	ldr	r5, [r3, #0]
 810a4fe:	6862      	ldr	r2, [r4, #4]
 810a500:	2100      	movs	r1, #0
 810a502:	4628      	mov	r0, r5
 810a504:	f7f5 feec 	bl	81002e0 <memchr>
 810a508:	b108      	cbz	r0, 810a50e <_printf_i+0x1ea>
 810a50a:	1b40      	subs	r0, r0, r5
 810a50c:	6060      	str	r0, [r4, #4]
 810a50e:	6863      	ldr	r3, [r4, #4]
 810a510:	6123      	str	r3, [r4, #16]
 810a512:	2300      	movs	r3, #0
 810a514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 810a518:	e7aa      	b.n	810a470 <_printf_i+0x14c>
 810a51a:	6923      	ldr	r3, [r4, #16]
 810a51c:	462a      	mov	r2, r5
 810a51e:	4649      	mov	r1, r9
 810a520:	4640      	mov	r0, r8
 810a522:	47d0      	blx	sl
 810a524:	3001      	adds	r0, #1
 810a526:	d0ad      	beq.n	810a484 <_printf_i+0x160>
 810a528:	6823      	ldr	r3, [r4, #0]
 810a52a:	079b      	lsls	r3, r3, #30
 810a52c:	d413      	bmi.n	810a556 <_printf_i+0x232>
 810a52e:	68e0      	ldr	r0, [r4, #12]
 810a530:	9b03      	ldr	r3, [sp, #12]
 810a532:	4298      	cmp	r0, r3
 810a534:	bfb8      	it	lt
 810a536:	4618      	movlt	r0, r3
 810a538:	e7a6      	b.n	810a488 <_printf_i+0x164>
 810a53a:	2301      	movs	r3, #1
 810a53c:	4632      	mov	r2, r6
 810a53e:	4649      	mov	r1, r9
 810a540:	4640      	mov	r0, r8
 810a542:	47d0      	blx	sl
 810a544:	3001      	adds	r0, #1
 810a546:	d09d      	beq.n	810a484 <_printf_i+0x160>
 810a548:	3501      	adds	r5, #1
 810a54a:	68e3      	ldr	r3, [r4, #12]
 810a54c:	9903      	ldr	r1, [sp, #12]
 810a54e:	1a5b      	subs	r3, r3, r1
 810a550:	42ab      	cmp	r3, r5
 810a552:	dcf2      	bgt.n	810a53a <_printf_i+0x216>
 810a554:	e7eb      	b.n	810a52e <_printf_i+0x20a>
 810a556:	2500      	movs	r5, #0
 810a558:	f104 0619 	add.w	r6, r4, #25
 810a55c:	e7f5      	b.n	810a54a <_printf_i+0x226>
 810a55e:	bf00      	nop
 810a560:	0810e882 	.word	0x0810e882
 810a564:	0810e893 	.word	0x0810e893

0810a568 <_scanf_float>:
 810a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a56c:	b087      	sub	sp, #28
 810a56e:	4617      	mov	r7, r2
 810a570:	9303      	str	r3, [sp, #12]
 810a572:	688b      	ldr	r3, [r1, #8]
 810a574:	1e5a      	subs	r2, r3, #1
 810a576:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 810a57a:	bf83      	ittte	hi
 810a57c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 810a580:	195b      	addhi	r3, r3, r5
 810a582:	9302      	strhi	r3, [sp, #8]
 810a584:	2300      	movls	r3, #0
 810a586:	bf86      	itte	hi
 810a588:	f240 135d 	movwhi	r3, #349	; 0x15d
 810a58c:	608b      	strhi	r3, [r1, #8]
 810a58e:	9302      	strls	r3, [sp, #8]
 810a590:	680b      	ldr	r3, [r1, #0]
 810a592:	468b      	mov	fp, r1
 810a594:	2500      	movs	r5, #0
 810a596:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 810a59a:	f84b 3b1c 	str.w	r3, [fp], #28
 810a59e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 810a5a2:	4680      	mov	r8, r0
 810a5a4:	460c      	mov	r4, r1
 810a5a6:	465e      	mov	r6, fp
 810a5a8:	46aa      	mov	sl, r5
 810a5aa:	46a9      	mov	r9, r5
 810a5ac:	9501      	str	r5, [sp, #4]
 810a5ae:	68a2      	ldr	r2, [r4, #8]
 810a5b0:	b152      	cbz	r2, 810a5c8 <_scanf_float+0x60>
 810a5b2:	683b      	ldr	r3, [r7, #0]
 810a5b4:	781b      	ldrb	r3, [r3, #0]
 810a5b6:	2b4e      	cmp	r3, #78	; 0x4e
 810a5b8:	d864      	bhi.n	810a684 <_scanf_float+0x11c>
 810a5ba:	2b40      	cmp	r3, #64	; 0x40
 810a5bc:	d83c      	bhi.n	810a638 <_scanf_float+0xd0>
 810a5be:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 810a5c2:	b2c8      	uxtb	r0, r1
 810a5c4:	280e      	cmp	r0, #14
 810a5c6:	d93a      	bls.n	810a63e <_scanf_float+0xd6>
 810a5c8:	f1b9 0f00 	cmp.w	r9, #0
 810a5cc:	d003      	beq.n	810a5d6 <_scanf_float+0x6e>
 810a5ce:	6823      	ldr	r3, [r4, #0]
 810a5d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 810a5d4:	6023      	str	r3, [r4, #0]
 810a5d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a5da:	f1ba 0f01 	cmp.w	sl, #1
 810a5de:	f200 8113 	bhi.w	810a808 <_scanf_float+0x2a0>
 810a5e2:	455e      	cmp	r6, fp
 810a5e4:	f200 8105 	bhi.w	810a7f2 <_scanf_float+0x28a>
 810a5e8:	2501      	movs	r5, #1
 810a5ea:	4628      	mov	r0, r5
 810a5ec:	b007      	add	sp, #28
 810a5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a5f2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 810a5f6:	2a0d      	cmp	r2, #13
 810a5f8:	d8e6      	bhi.n	810a5c8 <_scanf_float+0x60>
 810a5fa:	a101      	add	r1, pc, #4	; (adr r1, 810a600 <_scanf_float+0x98>)
 810a5fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 810a600:	0810a73f 	.word	0x0810a73f
 810a604:	0810a5c9 	.word	0x0810a5c9
 810a608:	0810a5c9 	.word	0x0810a5c9
 810a60c:	0810a5c9 	.word	0x0810a5c9
 810a610:	0810a79f 	.word	0x0810a79f
 810a614:	0810a777 	.word	0x0810a777
 810a618:	0810a5c9 	.word	0x0810a5c9
 810a61c:	0810a5c9 	.word	0x0810a5c9
 810a620:	0810a74d 	.word	0x0810a74d
 810a624:	0810a5c9 	.word	0x0810a5c9
 810a628:	0810a5c9 	.word	0x0810a5c9
 810a62c:	0810a5c9 	.word	0x0810a5c9
 810a630:	0810a5c9 	.word	0x0810a5c9
 810a634:	0810a705 	.word	0x0810a705
 810a638:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 810a63c:	e7db      	b.n	810a5f6 <_scanf_float+0x8e>
 810a63e:	290e      	cmp	r1, #14
 810a640:	d8c2      	bhi.n	810a5c8 <_scanf_float+0x60>
 810a642:	a001      	add	r0, pc, #4	; (adr r0, 810a648 <_scanf_float+0xe0>)
 810a644:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810a648:	0810a6f7 	.word	0x0810a6f7
 810a64c:	0810a5c9 	.word	0x0810a5c9
 810a650:	0810a6f7 	.word	0x0810a6f7
 810a654:	0810a78b 	.word	0x0810a78b
 810a658:	0810a5c9 	.word	0x0810a5c9
 810a65c:	0810a6a5 	.word	0x0810a6a5
 810a660:	0810a6e1 	.word	0x0810a6e1
 810a664:	0810a6e1 	.word	0x0810a6e1
 810a668:	0810a6e1 	.word	0x0810a6e1
 810a66c:	0810a6e1 	.word	0x0810a6e1
 810a670:	0810a6e1 	.word	0x0810a6e1
 810a674:	0810a6e1 	.word	0x0810a6e1
 810a678:	0810a6e1 	.word	0x0810a6e1
 810a67c:	0810a6e1 	.word	0x0810a6e1
 810a680:	0810a6e1 	.word	0x0810a6e1
 810a684:	2b6e      	cmp	r3, #110	; 0x6e
 810a686:	d809      	bhi.n	810a69c <_scanf_float+0x134>
 810a688:	2b60      	cmp	r3, #96	; 0x60
 810a68a:	d8b2      	bhi.n	810a5f2 <_scanf_float+0x8a>
 810a68c:	2b54      	cmp	r3, #84	; 0x54
 810a68e:	d077      	beq.n	810a780 <_scanf_float+0x218>
 810a690:	2b59      	cmp	r3, #89	; 0x59
 810a692:	d199      	bne.n	810a5c8 <_scanf_float+0x60>
 810a694:	2d07      	cmp	r5, #7
 810a696:	d197      	bne.n	810a5c8 <_scanf_float+0x60>
 810a698:	2508      	movs	r5, #8
 810a69a:	e029      	b.n	810a6f0 <_scanf_float+0x188>
 810a69c:	2b74      	cmp	r3, #116	; 0x74
 810a69e:	d06f      	beq.n	810a780 <_scanf_float+0x218>
 810a6a0:	2b79      	cmp	r3, #121	; 0x79
 810a6a2:	e7f6      	b.n	810a692 <_scanf_float+0x12a>
 810a6a4:	6821      	ldr	r1, [r4, #0]
 810a6a6:	05c8      	lsls	r0, r1, #23
 810a6a8:	d51a      	bpl.n	810a6e0 <_scanf_float+0x178>
 810a6aa:	9b02      	ldr	r3, [sp, #8]
 810a6ac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 810a6b0:	6021      	str	r1, [r4, #0]
 810a6b2:	f109 0901 	add.w	r9, r9, #1
 810a6b6:	b11b      	cbz	r3, 810a6c0 <_scanf_float+0x158>
 810a6b8:	3b01      	subs	r3, #1
 810a6ba:	3201      	adds	r2, #1
 810a6bc:	9302      	str	r3, [sp, #8]
 810a6be:	60a2      	str	r2, [r4, #8]
 810a6c0:	68a3      	ldr	r3, [r4, #8]
 810a6c2:	3b01      	subs	r3, #1
 810a6c4:	60a3      	str	r3, [r4, #8]
 810a6c6:	6923      	ldr	r3, [r4, #16]
 810a6c8:	3301      	adds	r3, #1
 810a6ca:	6123      	str	r3, [r4, #16]
 810a6cc:	687b      	ldr	r3, [r7, #4]
 810a6ce:	3b01      	subs	r3, #1
 810a6d0:	2b00      	cmp	r3, #0
 810a6d2:	607b      	str	r3, [r7, #4]
 810a6d4:	f340 8084 	ble.w	810a7e0 <_scanf_float+0x278>
 810a6d8:	683b      	ldr	r3, [r7, #0]
 810a6da:	3301      	adds	r3, #1
 810a6dc:	603b      	str	r3, [r7, #0]
 810a6de:	e766      	b.n	810a5ae <_scanf_float+0x46>
 810a6e0:	eb1a 0f05 	cmn.w	sl, r5
 810a6e4:	f47f af70 	bne.w	810a5c8 <_scanf_float+0x60>
 810a6e8:	6822      	ldr	r2, [r4, #0]
 810a6ea:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810a6ee:	6022      	str	r2, [r4, #0]
 810a6f0:	f806 3b01 	strb.w	r3, [r6], #1
 810a6f4:	e7e4      	b.n	810a6c0 <_scanf_float+0x158>
 810a6f6:	6822      	ldr	r2, [r4, #0]
 810a6f8:	0610      	lsls	r0, r2, #24
 810a6fa:	f57f af65 	bpl.w	810a5c8 <_scanf_float+0x60>
 810a6fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 810a702:	e7f4      	b.n	810a6ee <_scanf_float+0x186>
 810a704:	f1ba 0f00 	cmp.w	sl, #0
 810a708:	d10e      	bne.n	810a728 <_scanf_float+0x1c0>
 810a70a:	f1b9 0f00 	cmp.w	r9, #0
 810a70e:	d10e      	bne.n	810a72e <_scanf_float+0x1c6>
 810a710:	6822      	ldr	r2, [r4, #0]
 810a712:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810a716:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810a71a:	d108      	bne.n	810a72e <_scanf_float+0x1c6>
 810a71c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a720:	6022      	str	r2, [r4, #0]
 810a722:	f04f 0a01 	mov.w	sl, #1
 810a726:	e7e3      	b.n	810a6f0 <_scanf_float+0x188>
 810a728:	f1ba 0f02 	cmp.w	sl, #2
 810a72c:	d055      	beq.n	810a7da <_scanf_float+0x272>
 810a72e:	2d01      	cmp	r5, #1
 810a730:	d002      	beq.n	810a738 <_scanf_float+0x1d0>
 810a732:	2d04      	cmp	r5, #4
 810a734:	f47f af48 	bne.w	810a5c8 <_scanf_float+0x60>
 810a738:	3501      	adds	r5, #1
 810a73a:	b2ed      	uxtb	r5, r5
 810a73c:	e7d8      	b.n	810a6f0 <_scanf_float+0x188>
 810a73e:	f1ba 0f01 	cmp.w	sl, #1
 810a742:	f47f af41 	bne.w	810a5c8 <_scanf_float+0x60>
 810a746:	f04f 0a02 	mov.w	sl, #2
 810a74a:	e7d1      	b.n	810a6f0 <_scanf_float+0x188>
 810a74c:	b97d      	cbnz	r5, 810a76e <_scanf_float+0x206>
 810a74e:	f1b9 0f00 	cmp.w	r9, #0
 810a752:	f47f af3c 	bne.w	810a5ce <_scanf_float+0x66>
 810a756:	6822      	ldr	r2, [r4, #0]
 810a758:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 810a75c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 810a760:	f47f af39 	bne.w	810a5d6 <_scanf_float+0x6e>
 810a764:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a768:	6022      	str	r2, [r4, #0]
 810a76a:	2501      	movs	r5, #1
 810a76c:	e7c0      	b.n	810a6f0 <_scanf_float+0x188>
 810a76e:	2d03      	cmp	r5, #3
 810a770:	d0e2      	beq.n	810a738 <_scanf_float+0x1d0>
 810a772:	2d05      	cmp	r5, #5
 810a774:	e7de      	b.n	810a734 <_scanf_float+0x1cc>
 810a776:	2d02      	cmp	r5, #2
 810a778:	f47f af26 	bne.w	810a5c8 <_scanf_float+0x60>
 810a77c:	2503      	movs	r5, #3
 810a77e:	e7b7      	b.n	810a6f0 <_scanf_float+0x188>
 810a780:	2d06      	cmp	r5, #6
 810a782:	f47f af21 	bne.w	810a5c8 <_scanf_float+0x60>
 810a786:	2507      	movs	r5, #7
 810a788:	e7b2      	b.n	810a6f0 <_scanf_float+0x188>
 810a78a:	6822      	ldr	r2, [r4, #0]
 810a78c:	0591      	lsls	r1, r2, #22
 810a78e:	f57f af1b 	bpl.w	810a5c8 <_scanf_float+0x60>
 810a792:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 810a796:	6022      	str	r2, [r4, #0]
 810a798:	f8cd 9004 	str.w	r9, [sp, #4]
 810a79c:	e7a8      	b.n	810a6f0 <_scanf_float+0x188>
 810a79e:	6822      	ldr	r2, [r4, #0]
 810a7a0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 810a7a4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 810a7a8:	d006      	beq.n	810a7b8 <_scanf_float+0x250>
 810a7aa:	0550      	lsls	r0, r2, #21
 810a7ac:	f57f af0c 	bpl.w	810a5c8 <_scanf_float+0x60>
 810a7b0:	f1b9 0f00 	cmp.w	r9, #0
 810a7b4:	f43f af0f 	beq.w	810a5d6 <_scanf_float+0x6e>
 810a7b8:	0591      	lsls	r1, r2, #22
 810a7ba:	bf58      	it	pl
 810a7bc:	9901      	ldrpl	r1, [sp, #4]
 810a7be:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 810a7c2:	bf58      	it	pl
 810a7c4:	eba9 0101 	subpl.w	r1, r9, r1
 810a7c8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810a7cc:	bf58      	it	pl
 810a7ce:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810a7d2:	6022      	str	r2, [r4, #0]
 810a7d4:	f04f 0900 	mov.w	r9, #0
 810a7d8:	e78a      	b.n	810a6f0 <_scanf_float+0x188>
 810a7da:	f04f 0a03 	mov.w	sl, #3
 810a7de:	e787      	b.n	810a6f0 <_scanf_float+0x188>
 810a7e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 810a7e4:	4639      	mov	r1, r7
 810a7e6:	4640      	mov	r0, r8
 810a7e8:	4798      	blx	r3
 810a7ea:	2800      	cmp	r0, #0
 810a7ec:	f43f aedf 	beq.w	810a5ae <_scanf_float+0x46>
 810a7f0:	e6ea      	b.n	810a5c8 <_scanf_float+0x60>
 810a7f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a7f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a7fa:	463a      	mov	r2, r7
 810a7fc:	4640      	mov	r0, r8
 810a7fe:	4798      	blx	r3
 810a800:	6923      	ldr	r3, [r4, #16]
 810a802:	3b01      	subs	r3, #1
 810a804:	6123      	str	r3, [r4, #16]
 810a806:	e6ec      	b.n	810a5e2 <_scanf_float+0x7a>
 810a808:	1e6b      	subs	r3, r5, #1
 810a80a:	2b06      	cmp	r3, #6
 810a80c:	d825      	bhi.n	810a85a <_scanf_float+0x2f2>
 810a80e:	2d02      	cmp	r5, #2
 810a810:	d836      	bhi.n	810a880 <_scanf_float+0x318>
 810a812:	455e      	cmp	r6, fp
 810a814:	f67f aee8 	bls.w	810a5e8 <_scanf_float+0x80>
 810a818:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a81c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a820:	463a      	mov	r2, r7
 810a822:	4640      	mov	r0, r8
 810a824:	4798      	blx	r3
 810a826:	6923      	ldr	r3, [r4, #16]
 810a828:	3b01      	subs	r3, #1
 810a82a:	6123      	str	r3, [r4, #16]
 810a82c:	e7f1      	b.n	810a812 <_scanf_float+0x2aa>
 810a82e:	9802      	ldr	r0, [sp, #8]
 810a830:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a834:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 810a838:	9002      	str	r0, [sp, #8]
 810a83a:	463a      	mov	r2, r7
 810a83c:	4640      	mov	r0, r8
 810a83e:	4798      	blx	r3
 810a840:	6923      	ldr	r3, [r4, #16]
 810a842:	3b01      	subs	r3, #1
 810a844:	6123      	str	r3, [r4, #16]
 810a846:	f10a 3aff 	add.w	sl, sl, #4294967295
 810a84a:	fa5f fa8a 	uxtb.w	sl, sl
 810a84e:	f1ba 0f02 	cmp.w	sl, #2
 810a852:	d1ec      	bne.n	810a82e <_scanf_float+0x2c6>
 810a854:	3d03      	subs	r5, #3
 810a856:	b2ed      	uxtb	r5, r5
 810a858:	1b76      	subs	r6, r6, r5
 810a85a:	6823      	ldr	r3, [r4, #0]
 810a85c:	05da      	lsls	r2, r3, #23
 810a85e:	d52f      	bpl.n	810a8c0 <_scanf_float+0x358>
 810a860:	055b      	lsls	r3, r3, #21
 810a862:	d510      	bpl.n	810a886 <_scanf_float+0x31e>
 810a864:	455e      	cmp	r6, fp
 810a866:	f67f aebf 	bls.w	810a5e8 <_scanf_float+0x80>
 810a86a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a86e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810a872:	463a      	mov	r2, r7
 810a874:	4640      	mov	r0, r8
 810a876:	4798      	blx	r3
 810a878:	6923      	ldr	r3, [r4, #16]
 810a87a:	3b01      	subs	r3, #1
 810a87c:	6123      	str	r3, [r4, #16]
 810a87e:	e7f1      	b.n	810a864 <_scanf_float+0x2fc>
 810a880:	46aa      	mov	sl, r5
 810a882:	9602      	str	r6, [sp, #8]
 810a884:	e7df      	b.n	810a846 <_scanf_float+0x2de>
 810a886:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810a88a:	6923      	ldr	r3, [r4, #16]
 810a88c:	2965      	cmp	r1, #101	; 0x65
 810a88e:	f103 33ff 	add.w	r3, r3, #4294967295
 810a892:	f106 35ff 	add.w	r5, r6, #4294967295
 810a896:	6123      	str	r3, [r4, #16]
 810a898:	d00c      	beq.n	810a8b4 <_scanf_float+0x34c>
 810a89a:	2945      	cmp	r1, #69	; 0x45
 810a89c:	d00a      	beq.n	810a8b4 <_scanf_float+0x34c>
 810a89e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a8a2:	463a      	mov	r2, r7
 810a8a4:	4640      	mov	r0, r8
 810a8a6:	4798      	blx	r3
 810a8a8:	6923      	ldr	r3, [r4, #16]
 810a8aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810a8ae:	3b01      	subs	r3, #1
 810a8b0:	1eb5      	subs	r5, r6, #2
 810a8b2:	6123      	str	r3, [r4, #16]
 810a8b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810a8b8:	463a      	mov	r2, r7
 810a8ba:	4640      	mov	r0, r8
 810a8bc:	4798      	blx	r3
 810a8be:	462e      	mov	r6, r5
 810a8c0:	6825      	ldr	r5, [r4, #0]
 810a8c2:	f015 0510 	ands.w	r5, r5, #16
 810a8c6:	d158      	bne.n	810a97a <_scanf_float+0x412>
 810a8c8:	7035      	strb	r5, [r6, #0]
 810a8ca:	6823      	ldr	r3, [r4, #0]
 810a8cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 810a8d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810a8d4:	d11c      	bne.n	810a910 <_scanf_float+0x3a8>
 810a8d6:	9b01      	ldr	r3, [sp, #4]
 810a8d8:	454b      	cmp	r3, r9
 810a8da:	eba3 0209 	sub.w	r2, r3, r9
 810a8de:	d124      	bne.n	810a92a <_scanf_float+0x3c2>
 810a8e0:	2200      	movs	r2, #0
 810a8e2:	4659      	mov	r1, fp
 810a8e4:	4640      	mov	r0, r8
 810a8e6:	f002 fc43 	bl	810d170 <_strtod_r>
 810a8ea:	9b03      	ldr	r3, [sp, #12]
 810a8ec:	6821      	ldr	r1, [r4, #0]
 810a8ee:	681b      	ldr	r3, [r3, #0]
 810a8f0:	f011 0f02 	tst.w	r1, #2
 810a8f4:	ec57 6b10 	vmov	r6, r7, d0
 810a8f8:	f103 0204 	add.w	r2, r3, #4
 810a8fc:	d020      	beq.n	810a940 <_scanf_float+0x3d8>
 810a8fe:	9903      	ldr	r1, [sp, #12]
 810a900:	600a      	str	r2, [r1, #0]
 810a902:	681b      	ldr	r3, [r3, #0]
 810a904:	e9c3 6700 	strd	r6, r7, [r3]
 810a908:	68e3      	ldr	r3, [r4, #12]
 810a90a:	3301      	adds	r3, #1
 810a90c:	60e3      	str	r3, [r4, #12]
 810a90e:	e66c      	b.n	810a5ea <_scanf_float+0x82>
 810a910:	9b04      	ldr	r3, [sp, #16]
 810a912:	2b00      	cmp	r3, #0
 810a914:	d0e4      	beq.n	810a8e0 <_scanf_float+0x378>
 810a916:	9905      	ldr	r1, [sp, #20]
 810a918:	230a      	movs	r3, #10
 810a91a:	462a      	mov	r2, r5
 810a91c:	3101      	adds	r1, #1
 810a91e:	4640      	mov	r0, r8
 810a920:	f002 fcae 	bl	810d280 <_strtol_r>
 810a924:	9b04      	ldr	r3, [sp, #16]
 810a926:	9e05      	ldr	r6, [sp, #20]
 810a928:	1ac2      	subs	r2, r0, r3
 810a92a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 810a92e:	429e      	cmp	r6, r3
 810a930:	bf28      	it	cs
 810a932:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 810a936:	4912      	ldr	r1, [pc, #72]	; (810a980 <_scanf_float+0x418>)
 810a938:	4630      	mov	r0, r6
 810a93a:	f000 f8f9 	bl	810ab30 <siprintf>
 810a93e:	e7cf      	b.n	810a8e0 <_scanf_float+0x378>
 810a940:	f011 0f04 	tst.w	r1, #4
 810a944:	9903      	ldr	r1, [sp, #12]
 810a946:	600a      	str	r2, [r1, #0]
 810a948:	d1db      	bne.n	810a902 <_scanf_float+0x39a>
 810a94a:	f8d3 8000 	ldr.w	r8, [r3]
 810a94e:	ee10 2a10 	vmov	r2, s0
 810a952:	ee10 0a10 	vmov	r0, s0
 810a956:	463b      	mov	r3, r7
 810a958:	4639      	mov	r1, r7
 810a95a:	f7f6 f96f 	bl	8100c3c <__aeabi_dcmpun>
 810a95e:	b128      	cbz	r0, 810a96c <_scanf_float+0x404>
 810a960:	4808      	ldr	r0, [pc, #32]	; (810a984 <_scanf_float+0x41c>)
 810a962:	f000 f9c9 	bl	810acf8 <nanf>
 810a966:	ed88 0a00 	vstr	s0, [r8]
 810a96a:	e7cd      	b.n	810a908 <_scanf_float+0x3a0>
 810a96c:	4630      	mov	r0, r6
 810a96e:	4639      	mov	r1, r7
 810a970:	f7f6 f9c2 	bl	8100cf8 <__aeabi_d2f>
 810a974:	f8c8 0000 	str.w	r0, [r8]
 810a978:	e7c6      	b.n	810a908 <_scanf_float+0x3a0>
 810a97a:	2500      	movs	r5, #0
 810a97c:	e635      	b.n	810a5ea <_scanf_float+0x82>
 810a97e:	bf00      	nop
 810a980:	0810e8a4 	.word	0x0810e8a4
 810a984:	0810ec35 	.word	0x0810ec35

0810a988 <std>:
 810a988:	2300      	movs	r3, #0
 810a98a:	b510      	push	{r4, lr}
 810a98c:	4604      	mov	r4, r0
 810a98e:	e9c0 3300 	strd	r3, r3, [r0]
 810a992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810a996:	6083      	str	r3, [r0, #8]
 810a998:	8181      	strh	r1, [r0, #12]
 810a99a:	6643      	str	r3, [r0, #100]	; 0x64
 810a99c:	81c2      	strh	r2, [r0, #14]
 810a99e:	6183      	str	r3, [r0, #24]
 810a9a0:	4619      	mov	r1, r3
 810a9a2:	2208      	movs	r2, #8
 810a9a4:	305c      	adds	r0, #92	; 0x5c
 810a9a6:	f000 f926 	bl	810abf6 <memset>
 810a9aa:	4b0d      	ldr	r3, [pc, #52]	; (810a9e0 <std+0x58>)
 810a9ac:	6263      	str	r3, [r4, #36]	; 0x24
 810a9ae:	4b0d      	ldr	r3, [pc, #52]	; (810a9e4 <std+0x5c>)
 810a9b0:	62a3      	str	r3, [r4, #40]	; 0x28
 810a9b2:	4b0d      	ldr	r3, [pc, #52]	; (810a9e8 <std+0x60>)
 810a9b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 810a9b6:	4b0d      	ldr	r3, [pc, #52]	; (810a9ec <std+0x64>)
 810a9b8:	6323      	str	r3, [r4, #48]	; 0x30
 810a9ba:	4b0d      	ldr	r3, [pc, #52]	; (810a9f0 <std+0x68>)
 810a9bc:	6224      	str	r4, [r4, #32]
 810a9be:	429c      	cmp	r4, r3
 810a9c0:	d006      	beq.n	810a9d0 <std+0x48>
 810a9c2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 810a9c6:	4294      	cmp	r4, r2
 810a9c8:	d002      	beq.n	810a9d0 <std+0x48>
 810a9ca:	33d0      	adds	r3, #208	; 0xd0
 810a9cc:	429c      	cmp	r4, r3
 810a9ce:	d105      	bne.n	810a9dc <std+0x54>
 810a9d0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 810a9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810a9d8:	f000 b98a 	b.w	810acf0 <__retarget_lock_init_recursive>
 810a9dc:	bd10      	pop	{r4, pc}
 810a9de:	bf00      	nop
 810a9e0:	0810ab71 	.word	0x0810ab71
 810a9e4:	0810ab93 	.word	0x0810ab93
 810a9e8:	0810abcb 	.word	0x0810abcb
 810a9ec:	0810abef 	.word	0x0810abef
 810a9f0:	10000568 	.word	0x10000568

0810a9f4 <stdio_exit_handler>:
 810a9f4:	4a02      	ldr	r2, [pc, #8]	; (810aa00 <stdio_exit_handler+0xc>)
 810a9f6:	4903      	ldr	r1, [pc, #12]	; (810aa04 <stdio_exit_handler+0x10>)
 810a9f8:	4803      	ldr	r0, [pc, #12]	; (810aa08 <stdio_exit_handler+0x14>)
 810a9fa:	f000 b869 	b.w	810aad0 <_fwalk_sglue>
 810a9fe:	bf00      	nop
 810aa00:	10000070 	.word	0x10000070
 810aa04:	0810d8c9 	.word	0x0810d8c9
 810aa08:	1000007c 	.word	0x1000007c

0810aa0c <cleanup_stdio>:
 810aa0c:	6841      	ldr	r1, [r0, #4]
 810aa0e:	4b0c      	ldr	r3, [pc, #48]	; (810aa40 <cleanup_stdio+0x34>)
 810aa10:	4299      	cmp	r1, r3
 810aa12:	b510      	push	{r4, lr}
 810aa14:	4604      	mov	r4, r0
 810aa16:	d001      	beq.n	810aa1c <cleanup_stdio+0x10>
 810aa18:	f002 ff56 	bl	810d8c8 <_fflush_r>
 810aa1c:	68a1      	ldr	r1, [r4, #8]
 810aa1e:	4b09      	ldr	r3, [pc, #36]	; (810aa44 <cleanup_stdio+0x38>)
 810aa20:	4299      	cmp	r1, r3
 810aa22:	d002      	beq.n	810aa2a <cleanup_stdio+0x1e>
 810aa24:	4620      	mov	r0, r4
 810aa26:	f002 ff4f 	bl	810d8c8 <_fflush_r>
 810aa2a:	68e1      	ldr	r1, [r4, #12]
 810aa2c:	4b06      	ldr	r3, [pc, #24]	; (810aa48 <cleanup_stdio+0x3c>)
 810aa2e:	4299      	cmp	r1, r3
 810aa30:	d004      	beq.n	810aa3c <cleanup_stdio+0x30>
 810aa32:	4620      	mov	r0, r4
 810aa34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810aa38:	f002 bf46 	b.w	810d8c8 <_fflush_r>
 810aa3c:	bd10      	pop	{r4, pc}
 810aa3e:	bf00      	nop
 810aa40:	10000568 	.word	0x10000568
 810aa44:	100005d0 	.word	0x100005d0
 810aa48:	10000638 	.word	0x10000638

0810aa4c <global_stdio_init.part.0>:
 810aa4c:	b510      	push	{r4, lr}
 810aa4e:	4b0b      	ldr	r3, [pc, #44]	; (810aa7c <global_stdio_init.part.0+0x30>)
 810aa50:	4c0b      	ldr	r4, [pc, #44]	; (810aa80 <global_stdio_init.part.0+0x34>)
 810aa52:	4a0c      	ldr	r2, [pc, #48]	; (810aa84 <global_stdio_init.part.0+0x38>)
 810aa54:	601a      	str	r2, [r3, #0]
 810aa56:	4620      	mov	r0, r4
 810aa58:	2200      	movs	r2, #0
 810aa5a:	2104      	movs	r1, #4
 810aa5c:	f7ff ff94 	bl	810a988 <std>
 810aa60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 810aa64:	2201      	movs	r2, #1
 810aa66:	2109      	movs	r1, #9
 810aa68:	f7ff ff8e 	bl	810a988 <std>
 810aa6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 810aa70:	2202      	movs	r2, #2
 810aa72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810aa76:	2112      	movs	r1, #18
 810aa78:	f7ff bf86 	b.w	810a988 <std>
 810aa7c:	100006a0 	.word	0x100006a0
 810aa80:	10000568 	.word	0x10000568
 810aa84:	0810a9f5 	.word	0x0810a9f5

0810aa88 <__sfp_lock_acquire>:
 810aa88:	4801      	ldr	r0, [pc, #4]	; (810aa90 <__sfp_lock_acquire+0x8>)
 810aa8a:	f000 b932 	b.w	810acf2 <__retarget_lock_acquire_recursive>
 810aa8e:	bf00      	nop
 810aa90:	100006a9 	.word	0x100006a9

0810aa94 <__sfp_lock_release>:
 810aa94:	4801      	ldr	r0, [pc, #4]	; (810aa9c <__sfp_lock_release+0x8>)
 810aa96:	f000 b92d 	b.w	810acf4 <__retarget_lock_release_recursive>
 810aa9a:	bf00      	nop
 810aa9c:	100006a9 	.word	0x100006a9

0810aaa0 <__sinit>:
 810aaa0:	b510      	push	{r4, lr}
 810aaa2:	4604      	mov	r4, r0
 810aaa4:	f7ff fff0 	bl	810aa88 <__sfp_lock_acquire>
 810aaa8:	6a23      	ldr	r3, [r4, #32]
 810aaaa:	b11b      	cbz	r3, 810aab4 <__sinit+0x14>
 810aaac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 810aab0:	f7ff bff0 	b.w	810aa94 <__sfp_lock_release>
 810aab4:	4b04      	ldr	r3, [pc, #16]	; (810aac8 <__sinit+0x28>)
 810aab6:	6223      	str	r3, [r4, #32]
 810aab8:	4b04      	ldr	r3, [pc, #16]	; (810aacc <__sinit+0x2c>)
 810aaba:	681b      	ldr	r3, [r3, #0]
 810aabc:	2b00      	cmp	r3, #0
 810aabe:	d1f5      	bne.n	810aaac <__sinit+0xc>
 810aac0:	f7ff ffc4 	bl	810aa4c <global_stdio_init.part.0>
 810aac4:	e7f2      	b.n	810aaac <__sinit+0xc>
 810aac6:	bf00      	nop
 810aac8:	0810aa0d 	.word	0x0810aa0d
 810aacc:	100006a0 	.word	0x100006a0

0810aad0 <_fwalk_sglue>:
 810aad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810aad4:	4607      	mov	r7, r0
 810aad6:	4688      	mov	r8, r1
 810aad8:	4614      	mov	r4, r2
 810aada:	2600      	movs	r6, #0
 810aadc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 810aae0:	f1b9 0901 	subs.w	r9, r9, #1
 810aae4:	d505      	bpl.n	810aaf2 <_fwalk_sglue+0x22>
 810aae6:	6824      	ldr	r4, [r4, #0]
 810aae8:	2c00      	cmp	r4, #0
 810aaea:	d1f7      	bne.n	810aadc <_fwalk_sglue+0xc>
 810aaec:	4630      	mov	r0, r6
 810aaee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810aaf2:	89ab      	ldrh	r3, [r5, #12]
 810aaf4:	2b01      	cmp	r3, #1
 810aaf6:	d907      	bls.n	810ab08 <_fwalk_sglue+0x38>
 810aaf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810aafc:	3301      	adds	r3, #1
 810aafe:	d003      	beq.n	810ab08 <_fwalk_sglue+0x38>
 810ab00:	4629      	mov	r1, r5
 810ab02:	4638      	mov	r0, r7
 810ab04:	47c0      	blx	r8
 810ab06:	4306      	orrs	r6, r0
 810ab08:	3568      	adds	r5, #104	; 0x68
 810ab0a:	e7e9      	b.n	810aae0 <_fwalk_sglue+0x10>

0810ab0c <iprintf>:
 810ab0c:	b40f      	push	{r0, r1, r2, r3}
 810ab0e:	b507      	push	{r0, r1, r2, lr}
 810ab10:	4906      	ldr	r1, [pc, #24]	; (810ab2c <iprintf+0x20>)
 810ab12:	ab04      	add	r3, sp, #16
 810ab14:	6808      	ldr	r0, [r1, #0]
 810ab16:	f853 2b04 	ldr.w	r2, [r3], #4
 810ab1a:	6881      	ldr	r1, [r0, #8]
 810ab1c:	9301      	str	r3, [sp, #4]
 810ab1e:	f002 fd33 	bl	810d588 <_vfiprintf_r>
 810ab22:	b003      	add	sp, #12
 810ab24:	f85d eb04 	ldr.w	lr, [sp], #4
 810ab28:	b004      	add	sp, #16
 810ab2a:	4770      	bx	lr
 810ab2c:	100000c8 	.word	0x100000c8

0810ab30 <siprintf>:
 810ab30:	b40e      	push	{r1, r2, r3}
 810ab32:	b500      	push	{lr}
 810ab34:	b09c      	sub	sp, #112	; 0x70
 810ab36:	ab1d      	add	r3, sp, #116	; 0x74
 810ab38:	9002      	str	r0, [sp, #8]
 810ab3a:	9006      	str	r0, [sp, #24]
 810ab3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 810ab40:	4809      	ldr	r0, [pc, #36]	; (810ab68 <siprintf+0x38>)
 810ab42:	9107      	str	r1, [sp, #28]
 810ab44:	9104      	str	r1, [sp, #16]
 810ab46:	4909      	ldr	r1, [pc, #36]	; (810ab6c <siprintf+0x3c>)
 810ab48:	f853 2b04 	ldr.w	r2, [r3], #4
 810ab4c:	9105      	str	r1, [sp, #20]
 810ab4e:	6800      	ldr	r0, [r0, #0]
 810ab50:	9301      	str	r3, [sp, #4]
 810ab52:	a902      	add	r1, sp, #8
 810ab54:	f002 fbf0 	bl	810d338 <_svfiprintf_r>
 810ab58:	9b02      	ldr	r3, [sp, #8]
 810ab5a:	2200      	movs	r2, #0
 810ab5c:	701a      	strb	r2, [r3, #0]
 810ab5e:	b01c      	add	sp, #112	; 0x70
 810ab60:	f85d eb04 	ldr.w	lr, [sp], #4
 810ab64:	b003      	add	sp, #12
 810ab66:	4770      	bx	lr
 810ab68:	100000c8 	.word	0x100000c8
 810ab6c:	ffff0208 	.word	0xffff0208

0810ab70 <__sread>:
 810ab70:	b510      	push	{r4, lr}
 810ab72:	460c      	mov	r4, r1
 810ab74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810ab78:	f000 f86c 	bl	810ac54 <_read_r>
 810ab7c:	2800      	cmp	r0, #0
 810ab7e:	bfab      	itete	ge
 810ab80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 810ab82:	89a3      	ldrhlt	r3, [r4, #12]
 810ab84:	181b      	addge	r3, r3, r0
 810ab86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810ab8a:	bfac      	ite	ge
 810ab8c:	6563      	strge	r3, [r4, #84]	; 0x54
 810ab8e:	81a3      	strhlt	r3, [r4, #12]
 810ab90:	bd10      	pop	{r4, pc}

0810ab92 <__swrite>:
 810ab92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ab96:	461f      	mov	r7, r3
 810ab98:	898b      	ldrh	r3, [r1, #12]
 810ab9a:	05db      	lsls	r3, r3, #23
 810ab9c:	4605      	mov	r5, r0
 810ab9e:	460c      	mov	r4, r1
 810aba0:	4616      	mov	r6, r2
 810aba2:	d505      	bpl.n	810abb0 <__swrite+0x1e>
 810aba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810aba8:	2302      	movs	r3, #2
 810abaa:	2200      	movs	r2, #0
 810abac:	f000 f840 	bl	810ac30 <_lseek_r>
 810abb0:	89a3      	ldrh	r3, [r4, #12]
 810abb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810abb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810abba:	81a3      	strh	r3, [r4, #12]
 810abbc:	4632      	mov	r2, r6
 810abbe:	463b      	mov	r3, r7
 810abc0:	4628      	mov	r0, r5
 810abc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810abc6:	f000 b857 	b.w	810ac78 <_write_r>

0810abca <__sseek>:
 810abca:	b510      	push	{r4, lr}
 810abcc:	460c      	mov	r4, r1
 810abce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810abd2:	f000 f82d 	bl	810ac30 <_lseek_r>
 810abd6:	1c43      	adds	r3, r0, #1
 810abd8:	89a3      	ldrh	r3, [r4, #12]
 810abda:	bf15      	itete	ne
 810abdc:	6560      	strne	r0, [r4, #84]	; 0x54
 810abde:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810abe2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810abe6:	81a3      	strheq	r3, [r4, #12]
 810abe8:	bf18      	it	ne
 810abea:	81a3      	strhne	r3, [r4, #12]
 810abec:	bd10      	pop	{r4, pc}

0810abee <__sclose>:
 810abee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810abf2:	f000 b80d 	b.w	810ac10 <_close_r>

0810abf6 <memset>:
 810abf6:	4402      	add	r2, r0
 810abf8:	4603      	mov	r3, r0
 810abfa:	4293      	cmp	r3, r2
 810abfc:	d100      	bne.n	810ac00 <memset+0xa>
 810abfe:	4770      	bx	lr
 810ac00:	f803 1b01 	strb.w	r1, [r3], #1
 810ac04:	e7f9      	b.n	810abfa <memset+0x4>
	...

0810ac08 <_localeconv_r>:
 810ac08:	4800      	ldr	r0, [pc, #0]	; (810ac0c <_localeconv_r+0x4>)
 810ac0a:	4770      	bx	lr
 810ac0c:	100001bc 	.word	0x100001bc

0810ac10 <_close_r>:
 810ac10:	b538      	push	{r3, r4, r5, lr}
 810ac12:	4d06      	ldr	r5, [pc, #24]	; (810ac2c <_close_r+0x1c>)
 810ac14:	2300      	movs	r3, #0
 810ac16:	4604      	mov	r4, r0
 810ac18:	4608      	mov	r0, r1
 810ac1a:	602b      	str	r3, [r5, #0]
 810ac1c:	f7f8 fb71 	bl	8103302 <_close>
 810ac20:	1c43      	adds	r3, r0, #1
 810ac22:	d102      	bne.n	810ac2a <_close_r+0x1a>
 810ac24:	682b      	ldr	r3, [r5, #0]
 810ac26:	b103      	cbz	r3, 810ac2a <_close_r+0x1a>
 810ac28:	6023      	str	r3, [r4, #0]
 810ac2a:	bd38      	pop	{r3, r4, r5, pc}
 810ac2c:	100006a4 	.word	0x100006a4

0810ac30 <_lseek_r>:
 810ac30:	b538      	push	{r3, r4, r5, lr}
 810ac32:	4d07      	ldr	r5, [pc, #28]	; (810ac50 <_lseek_r+0x20>)
 810ac34:	4604      	mov	r4, r0
 810ac36:	4608      	mov	r0, r1
 810ac38:	4611      	mov	r1, r2
 810ac3a:	2200      	movs	r2, #0
 810ac3c:	602a      	str	r2, [r5, #0]
 810ac3e:	461a      	mov	r2, r3
 810ac40:	f7f8 fb86 	bl	8103350 <_lseek>
 810ac44:	1c43      	adds	r3, r0, #1
 810ac46:	d102      	bne.n	810ac4e <_lseek_r+0x1e>
 810ac48:	682b      	ldr	r3, [r5, #0]
 810ac4a:	b103      	cbz	r3, 810ac4e <_lseek_r+0x1e>
 810ac4c:	6023      	str	r3, [r4, #0]
 810ac4e:	bd38      	pop	{r3, r4, r5, pc}
 810ac50:	100006a4 	.word	0x100006a4

0810ac54 <_read_r>:
 810ac54:	b538      	push	{r3, r4, r5, lr}
 810ac56:	4d07      	ldr	r5, [pc, #28]	; (810ac74 <_read_r+0x20>)
 810ac58:	4604      	mov	r4, r0
 810ac5a:	4608      	mov	r0, r1
 810ac5c:	4611      	mov	r1, r2
 810ac5e:	2200      	movs	r2, #0
 810ac60:	602a      	str	r2, [r5, #0]
 810ac62:	461a      	mov	r2, r3
 810ac64:	f7f8 fb12 	bl	810328c <_read>
 810ac68:	1c43      	adds	r3, r0, #1
 810ac6a:	d102      	bne.n	810ac72 <_read_r+0x1e>
 810ac6c:	682b      	ldr	r3, [r5, #0]
 810ac6e:	b103      	cbz	r3, 810ac72 <_read_r+0x1e>
 810ac70:	6023      	str	r3, [r4, #0]
 810ac72:	bd38      	pop	{r3, r4, r5, pc}
 810ac74:	100006a4 	.word	0x100006a4

0810ac78 <_write_r>:
 810ac78:	b538      	push	{r3, r4, r5, lr}
 810ac7a:	4d07      	ldr	r5, [pc, #28]	; (810ac98 <_write_r+0x20>)
 810ac7c:	4604      	mov	r4, r0
 810ac7e:	4608      	mov	r0, r1
 810ac80:	4611      	mov	r1, r2
 810ac82:	2200      	movs	r2, #0
 810ac84:	602a      	str	r2, [r5, #0]
 810ac86:	461a      	mov	r2, r3
 810ac88:	f7f8 fb1f 	bl	81032ca <_write>
 810ac8c:	1c43      	adds	r3, r0, #1
 810ac8e:	d102      	bne.n	810ac96 <_write_r+0x1e>
 810ac90:	682b      	ldr	r3, [r5, #0]
 810ac92:	b103      	cbz	r3, 810ac96 <_write_r+0x1e>
 810ac94:	6023      	str	r3, [r4, #0]
 810ac96:	bd38      	pop	{r3, r4, r5, pc}
 810ac98:	100006a4 	.word	0x100006a4

0810ac9c <__errno>:
 810ac9c:	4b01      	ldr	r3, [pc, #4]	; (810aca4 <__errno+0x8>)
 810ac9e:	6818      	ldr	r0, [r3, #0]
 810aca0:	4770      	bx	lr
 810aca2:	bf00      	nop
 810aca4:	100000c8 	.word	0x100000c8

0810aca8 <__libc_init_array>:
 810aca8:	b570      	push	{r4, r5, r6, lr}
 810acaa:	4d0d      	ldr	r5, [pc, #52]	; (810ace0 <__libc_init_array+0x38>)
 810acac:	4c0d      	ldr	r4, [pc, #52]	; (810ace4 <__libc_init_array+0x3c>)
 810acae:	1b64      	subs	r4, r4, r5
 810acb0:	10a4      	asrs	r4, r4, #2
 810acb2:	2600      	movs	r6, #0
 810acb4:	42a6      	cmp	r6, r4
 810acb6:	d109      	bne.n	810accc <__libc_init_array+0x24>
 810acb8:	4d0b      	ldr	r5, [pc, #44]	; (810ace8 <__libc_init_array+0x40>)
 810acba:	4c0c      	ldr	r4, [pc, #48]	; (810acec <__libc_init_array+0x44>)
 810acbc:	f003 fcde 	bl	810e67c <_init>
 810acc0:	1b64      	subs	r4, r4, r5
 810acc2:	10a4      	asrs	r4, r4, #2
 810acc4:	2600      	movs	r6, #0
 810acc6:	42a6      	cmp	r6, r4
 810acc8:	d105      	bne.n	810acd6 <__libc_init_array+0x2e>
 810acca:	bd70      	pop	{r4, r5, r6, pc}
 810accc:	f855 3b04 	ldr.w	r3, [r5], #4
 810acd0:	4798      	blx	r3
 810acd2:	3601      	adds	r6, #1
 810acd4:	e7ee      	b.n	810acb4 <__libc_init_array+0xc>
 810acd6:	f855 3b04 	ldr.w	r3, [r5], #4
 810acda:	4798      	blx	r3
 810acdc:	3601      	adds	r6, #1
 810acde:	e7f2      	b.n	810acc6 <__libc_init_array+0x1e>
 810ace0:	0810eca0 	.word	0x0810eca0
 810ace4:	0810eca0 	.word	0x0810eca0
 810ace8:	0810eca0 	.word	0x0810eca0
 810acec:	0810eca4 	.word	0x0810eca4

0810acf0 <__retarget_lock_init_recursive>:
 810acf0:	4770      	bx	lr

0810acf2 <__retarget_lock_acquire_recursive>:
 810acf2:	4770      	bx	lr

0810acf4 <__retarget_lock_release_recursive>:
 810acf4:	4770      	bx	lr
	...

0810acf8 <nanf>:
 810acf8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 810ad00 <nanf+0x8>
 810acfc:	4770      	bx	lr
 810acfe:	bf00      	nop
 810ad00:	7fc00000 	.word	0x7fc00000

0810ad04 <quorem>:
 810ad04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ad08:	6903      	ldr	r3, [r0, #16]
 810ad0a:	690c      	ldr	r4, [r1, #16]
 810ad0c:	42a3      	cmp	r3, r4
 810ad0e:	4607      	mov	r7, r0
 810ad10:	db7e      	blt.n	810ae10 <quorem+0x10c>
 810ad12:	3c01      	subs	r4, #1
 810ad14:	f101 0814 	add.w	r8, r1, #20
 810ad18:	f100 0514 	add.w	r5, r0, #20
 810ad1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ad20:	9301      	str	r3, [sp, #4]
 810ad22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810ad26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ad2a:	3301      	adds	r3, #1
 810ad2c:	429a      	cmp	r2, r3
 810ad2e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 810ad32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 810ad36:	fbb2 f6f3 	udiv	r6, r2, r3
 810ad3a:	d331      	bcc.n	810ada0 <quorem+0x9c>
 810ad3c:	f04f 0e00 	mov.w	lr, #0
 810ad40:	4640      	mov	r0, r8
 810ad42:	46ac      	mov	ip, r5
 810ad44:	46f2      	mov	sl, lr
 810ad46:	f850 2b04 	ldr.w	r2, [r0], #4
 810ad4a:	b293      	uxth	r3, r2
 810ad4c:	fb06 e303 	mla	r3, r6, r3, lr
 810ad50:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810ad54:	0c1a      	lsrs	r2, r3, #16
 810ad56:	b29b      	uxth	r3, r3
 810ad58:	ebaa 0303 	sub.w	r3, sl, r3
 810ad5c:	f8dc a000 	ldr.w	sl, [ip]
 810ad60:	fa13 f38a 	uxtah	r3, r3, sl
 810ad64:	fb06 220e 	mla	r2, r6, lr, r2
 810ad68:	9300      	str	r3, [sp, #0]
 810ad6a:	9b00      	ldr	r3, [sp, #0]
 810ad6c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 810ad70:	b292      	uxth	r2, r2
 810ad72:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 810ad76:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810ad7a:	f8bd 3000 	ldrh.w	r3, [sp]
 810ad7e:	4581      	cmp	r9, r0
 810ad80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810ad84:	f84c 3b04 	str.w	r3, [ip], #4
 810ad88:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810ad8c:	d2db      	bcs.n	810ad46 <quorem+0x42>
 810ad8e:	f855 300b 	ldr.w	r3, [r5, fp]
 810ad92:	b92b      	cbnz	r3, 810ada0 <quorem+0x9c>
 810ad94:	9b01      	ldr	r3, [sp, #4]
 810ad96:	3b04      	subs	r3, #4
 810ad98:	429d      	cmp	r5, r3
 810ad9a:	461a      	mov	r2, r3
 810ad9c:	d32c      	bcc.n	810adf8 <quorem+0xf4>
 810ad9e:	613c      	str	r4, [r7, #16]
 810ada0:	4638      	mov	r0, r7
 810ada2:	f001 f9f1 	bl	810c188 <__mcmp>
 810ada6:	2800      	cmp	r0, #0
 810ada8:	db22      	blt.n	810adf0 <quorem+0xec>
 810adaa:	3601      	adds	r6, #1
 810adac:	4629      	mov	r1, r5
 810adae:	2000      	movs	r0, #0
 810adb0:	f858 2b04 	ldr.w	r2, [r8], #4
 810adb4:	f8d1 c000 	ldr.w	ip, [r1]
 810adb8:	b293      	uxth	r3, r2
 810adba:	1ac3      	subs	r3, r0, r3
 810adbc:	0c12      	lsrs	r2, r2, #16
 810adbe:	fa13 f38c 	uxtah	r3, r3, ip
 810adc2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 810adc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810adca:	b29b      	uxth	r3, r3
 810adcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810add0:	45c1      	cmp	r9, r8
 810add2:	f841 3b04 	str.w	r3, [r1], #4
 810add6:	ea4f 4022 	mov.w	r0, r2, asr #16
 810adda:	d2e9      	bcs.n	810adb0 <quorem+0xac>
 810addc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810ade0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 810ade4:	b922      	cbnz	r2, 810adf0 <quorem+0xec>
 810ade6:	3b04      	subs	r3, #4
 810ade8:	429d      	cmp	r5, r3
 810adea:	461a      	mov	r2, r3
 810adec:	d30a      	bcc.n	810ae04 <quorem+0x100>
 810adee:	613c      	str	r4, [r7, #16]
 810adf0:	4630      	mov	r0, r6
 810adf2:	b003      	add	sp, #12
 810adf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810adf8:	6812      	ldr	r2, [r2, #0]
 810adfa:	3b04      	subs	r3, #4
 810adfc:	2a00      	cmp	r2, #0
 810adfe:	d1ce      	bne.n	810ad9e <quorem+0x9a>
 810ae00:	3c01      	subs	r4, #1
 810ae02:	e7c9      	b.n	810ad98 <quorem+0x94>
 810ae04:	6812      	ldr	r2, [r2, #0]
 810ae06:	3b04      	subs	r3, #4
 810ae08:	2a00      	cmp	r2, #0
 810ae0a:	d1f0      	bne.n	810adee <quorem+0xea>
 810ae0c:	3c01      	subs	r4, #1
 810ae0e:	e7eb      	b.n	810ade8 <quorem+0xe4>
 810ae10:	2000      	movs	r0, #0
 810ae12:	e7ee      	b.n	810adf2 <quorem+0xee>
 810ae14:	0000      	movs	r0, r0
	...

0810ae18 <_dtoa_r>:
 810ae18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ae1c:	ed2d 8b04 	vpush	{d8-d9}
 810ae20:	69c5      	ldr	r5, [r0, #28]
 810ae22:	b093      	sub	sp, #76	; 0x4c
 810ae24:	ed8d 0b02 	vstr	d0, [sp, #8]
 810ae28:	ec57 6b10 	vmov	r6, r7, d0
 810ae2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 810ae30:	9107      	str	r1, [sp, #28]
 810ae32:	4604      	mov	r4, r0
 810ae34:	920a      	str	r2, [sp, #40]	; 0x28
 810ae36:	930d      	str	r3, [sp, #52]	; 0x34
 810ae38:	b975      	cbnz	r5, 810ae58 <_dtoa_r+0x40>
 810ae3a:	2010      	movs	r0, #16
 810ae3c:	f000 fe2a 	bl	810ba94 <malloc>
 810ae40:	4602      	mov	r2, r0
 810ae42:	61e0      	str	r0, [r4, #28]
 810ae44:	b920      	cbnz	r0, 810ae50 <_dtoa_r+0x38>
 810ae46:	4bae      	ldr	r3, [pc, #696]	; (810b100 <_dtoa_r+0x2e8>)
 810ae48:	21ef      	movs	r1, #239	; 0xef
 810ae4a:	48ae      	ldr	r0, [pc, #696]	; (810b104 <_dtoa_r+0x2ec>)
 810ae4c:	f002 fe4c 	bl	810dae8 <__assert_func>
 810ae50:	e9c0 5501 	strd	r5, r5, [r0, #4]
 810ae54:	6005      	str	r5, [r0, #0]
 810ae56:	60c5      	str	r5, [r0, #12]
 810ae58:	69e3      	ldr	r3, [r4, #28]
 810ae5a:	6819      	ldr	r1, [r3, #0]
 810ae5c:	b151      	cbz	r1, 810ae74 <_dtoa_r+0x5c>
 810ae5e:	685a      	ldr	r2, [r3, #4]
 810ae60:	604a      	str	r2, [r1, #4]
 810ae62:	2301      	movs	r3, #1
 810ae64:	4093      	lsls	r3, r2
 810ae66:	608b      	str	r3, [r1, #8]
 810ae68:	4620      	mov	r0, r4
 810ae6a:	f000 ff07 	bl	810bc7c <_Bfree>
 810ae6e:	69e3      	ldr	r3, [r4, #28]
 810ae70:	2200      	movs	r2, #0
 810ae72:	601a      	str	r2, [r3, #0]
 810ae74:	1e3b      	subs	r3, r7, #0
 810ae76:	bfbb      	ittet	lt
 810ae78:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 810ae7c:	9303      	strlt	r3, [sp, #12]
 810ae7e:	2300      	movge	r3, #0
 810ae80:	2201      	movlt	r2, #1
 810ae82:	bfac      	ite	ge
 810ae84:	f8c8 3000 	strge.w	r3, [r8]
 810ae88:	f8c8 2000 	strlt.w	r2, [r8]
 810ae8c:	4b9e      	ldr	r3, [pc, #632]	; (810b108 <_dtoa_r+0x2f0>)
 810ae8e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 810ae92:	ea33 0308 	bics.w	r3, r3, r8
 810ae96:	d11b      	bne.n	810aed0 <_dtoa_r+0xb8>
 810ae98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810ae9a:	f242 730f 	movw	r3, #9999	; 0x270f
 810ae9e:	6013      	str	r3, [r2, #0]
 810aea0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 810aea4:	4333      	orrs	r3, r6
 810aea6:	f000 8593 	beq.w	810b9d0 <_dtoa_r+0xbb8>
 810aeaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810aeac:	b963      	cbnz	r3, 810aec8 <_dtoa_r+0xb0>
 810aeae:	4b97      	ldr	r3, [pc, #604]	; (810b10c <_dtoa_r+0x2f4>)
 810aeb0:	e027      	b.n	810af02 <_dtoa_r+0xea>
 810aeb2:	4b97      	ldr	r3, [pc, #604]	; (810b110 <_dtoa_r+0x2f8>)
 810aeb4:	9300      	str	r3, [sp, #0]
 810aeb6:	3308      	adds	r3, #8
 810aeb8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810aeba:	6013      	str	r3, [r2, #0]
 810aebc:	9800      	ldr	r0, [sp, #0]
 810aebe:	b013      	add	sp, #76	; 0x4c
 810aec0:	ecbd 8b04 	vpop	{d8-d9}
 810aec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810aec8:	4b90      	ldr	r3, [pc, #576]	; (810b10c <_dtoa_r+0x2f4>)
 810aeca:	9300      	str	r3, [sp, #0]
 810aecc:	3303      	adds	r3, #3
 810aece:	e7f3      	b.n	810aeb8 <_dtoa_r+0xa0>
 810aed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 810aed4:	2200      	movs	r2, #0
 810aed6:	ec51 0b17 	vmov	r0, r1, d7
 810aeda:	eeb0 8a47 	vmov.f32	s16, s14
 810aede:	eef0 8a67 	vmov.f32	s17, s15
 810aee2:	2300      	movs	r3, #0
 810aee4:	f7f5 fe78 	bl	8100bd8 <__aeabi_dcmpeq>
 810aee8:	4681      	mov	r9, r0
 810aeea:	b160      	cbz	r0, 810af06 <_dtoa_r+0xee>
 810aeec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810aeee:	2301      	movs	r3, #1
 810aef0:	6013      	str	r3, [r2, #0]
 810aef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810aef4:	2b00      	cmp	r3, #0
 810aef6:	f000 8568 	beq.w	810b9ca <_dtoa_r+0xbb2>
 810aefa:	4b86      	ldr	r3, [pc, #536]	; (810b114 <_dtoa_r+0x2fc>)
 810aefc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 810aefe:	6013      	str	r3, [r2, #0]
 810af00:	3b01      	subs	r3, #1
 810af02:	9300      	str	r3, [sp, #0]
 810af04:	e7da      	b.n	810aebc <_dtoa_r+0xa4>
 810af06:	aa10      	add	r2, sp, #64	; 0x40
 810af08:	a911      	add	r1, sp, #68	; 0x44
 810af0a:	4620      	mov	r0, r4
 810af0c:	eeb0 0a48 	vmov.f32	s0, s16
 810af10:	eef0 0a68 	vmov.f32	s1, s17
 810af14:	f001 fa4e 	bl	810c3b4 <__d2b>
 810af18:	f3c8 550a 	ubfx	r5, r8, #20, #11
 810af1c:	4682      	mov	sl, r0
 810af1e:	2d00      	cmp	r5, #0
 810af20:	d07f      	beq.n	810b022 <_dtoa_r+0x20a>
 810af22:	ee18 3a90 	vmov	r3, s17
 810af26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810af2a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 810af2e:	ec51 0b18 	vmov	r0, r1, d8
 810af32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 810af36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 810af3a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 810af3e:	4619      	mov	r1, r3
 810af40:	2200      	movs	r2, #0
 810af42:	4b75      	ldr	r3, [pc, #468]	; (810b118 <_dtoa_r+0x300>)
 810af44:	f7f5 fa28 	bl	8100398 <__aeabi_dsub>
 810af48:	a367      	add	r3, pc, #412	; (adr r3, 810b0e8 <_dtoa_r+0x2d0>)
 810af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af4e:	f7f5 fbdb 	bl	8100708 <__aeabi_dmul>
 810af52:	a367      	add	r3, pc, #412	; (adr r3, 810b0f0 <_dtoa_r+0x2d8>)
 810af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af58:	f7f5 fa20 	bl	810039c <__adddf3>
 810af5c:	4606      	mov	r6, r0
 810af5e:	4628      	mov	r0, r5
 810af60:	460f      	mov	r7, r1
 810af62:	f7f5 fb67 	bl	8100634 <__aeabi_i2d>
 810af66:	a364      	add	r3, pc, #400	; (adr r3, 810b0f8 <_dtoa_r+0x2e0>)
 810af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 810af6c:	f7f5 fbcc 	bl	8100708 <__aeabi_dmul>
 810af70:	4602      	mov	r2, r0
 810af72:	460b      	mov	r3, r1
 810af74:	4630      	mov	r0, r6
 810af76:	4639      	mov	r1, r7
 810af78:	f7f5 fa10 	bl	810039c <__adddf3>
 810af7c:	4606      	mov	r6, r0
 810af7e:	460f      	mov	r7, r1
 810af80:	f7f5 fe72 	bl	8100c68 <__aeabi_d2iz>
 810af84:	2200      	movs	r2, #0
 810af86:	4683      	mov	fp, r0
 810af88:	2300      	movs	r3, #0
 810af8a:	4630      	mov	r0, r6
 810af8c:	4639      	mov	r1, r7
 810af8e:	f7f5 fe2d 	bl	8100bec <__aeabi_dcmplt>
 810af92:	b148      	cbz	r0, 810afa8 <_dtoa_r+0x190>
 810af94:	4658      	mov	r0, fp
 810af96:	f7f5 fb4d 	bl	8100634 <__aeabi_i2d>
 810af9a:	4632      	mov	r2, r6
 810af9c:	463b      	mov	r3, r7
 810af9e:	f7f5 fe1b 	bl	8100bd8 <__aeabi_dcmpeq>
 810afa2:	b908      	cbnz	r0, 810afa8 <_dtoa_r+0x190>
 810afa4:	f10b 3bff 	add.w	fp, fp, #4294967295
 810afa8:	f1bb 0f16 	cmp.w	fp, #22
 810afac:	d857      	bhi.n	810b05e <_dtoa_r+0x246>
 810afae:	4b5b      	ldr	r3, [pc, #364]	; (810b11c <_dtoa_r+0x304>)
 810afb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 810afb8:	ec51 0b18 	vmov	r0, r1, d8
 810afbc:	f7f5 fe16 	bl	8100bec <__aeabi_dcmplt>
 810afc0:	2800      	cmp	r0, #0
 810afc2:	d04e      	beq.n	810b062 <_dtoa_r+0x24a>
 810afc4:	f10b 3bff 	add.w	fp, fp, #4294967295
 810afc8:	2300      	movs	r3, #0
 810afca:	930c      	str	r3, [sp, #48]	; 0x30
 810afcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810afce:	1b5b      	subs	r3, r3, r5
 810afd0:	1e5a      	subs	r2, r3, #1
 810afd2:	bf45      	ittet	mi
 810afd4:	f1c3 0301 	rsbmi	r3, r3, #1
 810afd8:	9305      	strmi	r3, [sp, #20]
 810afda:	2300      	movpl	r3, #0
 810afdc:	2300      	movmi	r3, #0
 810afde:	9206      	str	r2, [sp, #24]
 810afe0:	bf54      	ite	pl
 810afe2:	9305      	strpl	r3, [sp, #20]
 810afe4:	9306      	strmi	r3, [sp, #24]
 810afe6:	f1bb 0f00 	cmp.w	fp, #0
 810afea:	db3c      	blt.n	810b066 <_dtoa_r+0x24e>
 810afec:	9b06      	ldr	r3, [sp, #24]
 810afee:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 810aff2:	445b      	add	r3, fp
 810aff4:	9306      	str	r3, [sp, #24]
 810aff6:	2300      	movs	r3, #0
 810aff8:	9308      	str	r3, [sp, #32]
 810affa:	9b07      	ldr	r3, [sp, #28]
 810affc:	2b09      	cmp	r3, #9
 810affe:	d868      	bhi.n	810b0d2 <_dtoa_r+0x2ba>
 810b000:	2b05      	cmp	r3, #5
 810b002:	bfc4      	itt	gt
 810b004:	3b04      	subgt	r3, #4
 810b006:	9307      	strgt	r3, [sp, #28]
 810b008:	9b07      	ldr	r3, [sp, #28]
 810b00a:	f1a3 0302 	sub.w	r3, r3, #2
 810b00e:	bfcc      	ite	gt
 810b010:	2500      	movgt	r5, #0
 810b012:	2501      	movle	r5, #1
 810b014:	2b03      	cmp	r3, #3
 810b016:	f200 8085 	bhi.w	810b124 <_dtoa_r+0x30c>
 810b01a:	e8df f003 	tbb	[pc, r3]
 810b01e:	3b2e      	.short	0x3b2e
 810b020:	5839      	.short	0x5839
 810b022:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 810b026:	441d      	add	r5, r3
 810b028:	f205 4332 	addw	r3, r5, #1074	; 0x432
 810b02c:	2b20      	cmp	r3, #32
 810b02e:	bfc1      	itttt	gt
 810b030:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 810b034:	fa08 f803 	lslgt.w	r8, r8, r3
 810b038:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 810b03c:	fa26 f303 	lsrgt.w	r3, r6, r3
 810b040:	bfd6      	itet	le
 810b042:	f1c3 0320 	rsble	r3, r3, #32
 810b046:	ea48 0003 	orrgt.w	r0, r8, r3
 810b04a:	fa06 f003 	lslle.w	r0, r6, r3
 810b04e:	f7f5 fae1 	bl	8100614 <__aeabi_ui2d>
 810b052:	2201      	movs	r2, #1
 810b054:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 810b058:	3d01      	subs	r5, #1
 810b05a:	920e      	str	r2, [sp, #56]	; 0x38
 810b05c:	e76f      	b.n	810af3e <_dtoa_r+0x126>
 810b05e:	2301      	movs	r3, #1
 810b060:	e7b3      	b.n	810afca <_dtoa_r+0x1b2>
 810b062:	900c      	str	r0, [sp, #48]	; 0x30
 810b064:	e7b2      	b.n	810afcc <_dtoa_r+0x1b4>
 810b066:	9b05      	ldr	r3, [sp, #20]
 810b068:	eba3 030b 	sub.w	r3, r3, fp
 810b06c:	9305      	str	r3, [sp, #20]
 810b06e:	f1cb 0300 	rsb	r3, fp, #0
 810b072:	9308      	str	r3, [sp, #32]
 810b074:	2300      	movs	r3, #0
 810b076:	930b      	str	r3, [sp, #44]	; 0x2c
 810b078:	e7bf      	b.n	810affa <_dtoa_r+0x1e2>
 810b07a:	2300      	movs	r3, #0
 810b07c:	9309      	str	r3, [sp, #36]	; 0x24
 810b07e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b080:	2b00      	cmp	r3, #0
 810b082:	dc52      	bgt.n	810b12a <_dtoa_r+0x312>
 810b084:	2301      	movs	r3, #1
 810b086:	9301      	str	r3, [sp, #4]
 810b088:	9304      	str	r3, [sp, #16]
 810b08a:	461a      	mov	r2, r3
 810b08c:	920a      	str	r2, [sp, #40]	; 0x28
 810b08e:	e00b      	b.n	810b0a8 <_dtoa_r+0x290>
 810b090:	2301      	movs	r3, #1
 810b092:	e7f3      	b.n	810b07c <_dtoa_r+0x264>
 810b094:	2300      	movs	r3, #0
 810b096:	9309      	str	r3, [sp, #36]	; 0x24
 810b098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b09a:	445b      	add	r3, fp
 810b09c:	9301      	str	r3, [sp, #4]
 810b09e:	3301      	adds	r3, #1
 810b0a0:	2b01      	cmp	r3, #1
 810b0a2:	9304      	str	r3, [sp, #16]
 810b0a4:	bfb8      	it	lt
 810b0a6:	2301      	movlt	r3, #1
 810b0a8:	69e0      	ldr	r0, [r4, #28]
 810b0aa:	2100      	movs	r1, #0
 810b0ac:	2204      	movs	r2, #4
 810b0ae:	f102 0614 	add.w	r6, r2, #20
 810b0b2:	429e      	cmp	r6, r3
 810b0b4:	d93d      	bls.n	810b132 <_dtoa_r+0x31a>
 810b0b6:	6041      	str	r1, [r0, #4]
 810b0b8:	4620      	mov	r0, r4
 810b0ba:	f000 fd9f 	bl	810bbfc <_Balloc>
 810b0be:	9000      	str	r0, [sp, #0]
 810b0c0:	2800      	cmp	r0, #0
 810b0c2:	d139      	bne.n	810b138 <_dtoa_r+0x320>
 810b0c4:	4b16      	ldr	r3, [pc, #88]	; (810b120 <_dtoa_r+0x308>)
 810b0c6:	4602      	mov	r2, r0
 810b0c8:	f240 11af 	movw	r1, #431	; 0x1af
 810b0cc:	e6bd      	b.n	810ae4a <_dtoa_r+0x32>
 810b0ce:	2301      	movs	r3, #1
 810b0d0:	e7e1      	b.n	810b096 <_dtoa_r+0x27e>
 810b0d2:	2501      	movs	r5, #1
 810b0d4:	2300      	movs	r3, #0
 810b0d6:	9307      	str	r3, [sp, #28]
 810b0d8:	9509      	str	r5, [sp, #36]	; 0x24
 810b0da:	f04f 33ff 	mov.w	r3, #4294967295
 810b0de:	9301      	str	r3, [sp, #4]
 810b0e0:	9304      	str	r3, [sp, #16]
 810b0e2:	2200      	movs	r2, #0
 810b0e4:	2312      	movs	r3, #18
 810b0e6:	e7d1      	b.n	810b08c <_dtoa_r+0x274>
 810b0e8:	636f4361 	.word	0x636f4361
 810b0ec:	3fd287a7 	.word	0x3fd287a7
 810b0f0:	8b60c8b3 	.word	0x8b60c8b3
 810b0f4:	3fc68a28 	.word	0x3fc68a28
 810b0f8:	509f79fb 	.word	0x509f79fb
 810b0fc:	3fd34413 	.word	0x3fd34413
 810b100:	0810e8b6 	.word	0x0810e8b6
 810b104:	0810e8cd 	.word	0x0810e8cd
 810b108:	7ff00000 	.word	0x7ff00000
 810b10c:	0810e8b2 	.word	0x0810e8b2
 810b110:	0810e8a9 	.word	0x0810e8a9
 810b114:	0810e881 	.word	0x0810e881
 810b118:	3ff80000 	.word	0x3ff80000
 810b11c:	0810e9b8 	.word	0x0810e9b8
 810b120:	0810e925 	.word	0x0810e925
 810b124:	2301      	movs	r3, #1
 810b126:	9309      	str	r3, [sp, #36]	; 0x24
 810b128:	e7d7      	b.n	810b0da <_dtoa_r+0x2c2>
 810b12a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b12c:	9301      	str	r3, [sp, #4]
 810b12e:	9304      	str	r3, [sp, #16]
 810b130:	e7ba      	b.n	810b0a8 <_dtoa_r+0x290>
 810b132:	3101      	adds	r1, #1
 810b134:	0052      	lsls	r2, r2, #1
 810b136:	e7ba      	b.n	810b0ae <_dtoa_r+0x296>
 810b138:	69e3      	ldr	r3, [r4, #28]
 810b13a:	9a00      	ldr	r2, [sp, #0]
 810b13c:	601a      	str	r2, [r3, #0]
 810b13e:	9b04      	ldr	r3, [sp, #16]
 810b140:	2b0e      	cmp	r3, #14
 810b142:	f200 80a8 	bhi.w	810b296 <_dtoa_r+0x47e>
 810b146:	2d00      	cmp	r5, #0
 810b148:	f000 80a5 	beq.w	810b296 <_dtoa_r+0x47e>
 810b14c:	f1bb 0f00 	cmp.w	fp, #0
 810b150:	dd38      	ble.n	810b1c4 <_dtoa_r+0x3ac>
 810b152:	4bc0      	ldr	r3, [pc, #768]	; (810b454 <_dtoa_r+0x63c>)
 810b154:	f00b 020f 	and.w	r2, fp, #15
 810b158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b15c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 810b160:	e9d3 6700 	ldrd	r6, r7, [r3]
 810b164:	ea4f 182b 	mov.w	r8, fp, asr #4
 810b168:	d019      	beq.n	810b19e <_dtoa_r+0x386>
 810b16a:	4bbb      	ldr	r3, [pc, #748]	; (810b458 <_dtoa_r+0x640>)
 810b16c:	ec51 0b18 	vmov	r0, r1, d8
 810b170:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 810b174:	f7f5 fbf2 	bl	810095c <__aeabi_ddiv>
 810b178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b17c:	f008 080f 	and.w	r8, r8, #15
 810b180:	2503      	movs	r5, #3
 810b182:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 810b458 <_dtoa_r+0x640>
 810b186:	f1b8 0f00 	cmp.w	r8, #0
 810b18a:	d10a      	bne.n	810b1a2 <_dtoa_r+0x38a>
 810b18c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810b190:	4632      	mov	r2, r6
 810b192:	463b      	mov	r3, r7
 810b194:	f7f5 fbe2 	bl	810095c <__aeabi_ddiv>
 810b198:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b19c:	e02b      	b.n	810b1f6 <_dtoa_r+0x3de>
 810b19e:	2502      	movs	r5, #2
 810b1a0:	e7ef      	b.n	810b182 <_dtoa_r+0x36a>
 810b1a2:	f018 0f01 	tst.w	r8, #1
 810b1a6:	d008      	beq.n	810b1ba <_dtoa_r+0x3a2>
 810b1a8:	4630      	mov	r0, r6
 810b1aa:	4639      	mov	r1, r7
 810b1ac:	e9d9 2300 	ldrd	r2, r3, [r9]
 810b1b0:	f7f5 faaa 	bl	8100708 <__aeabi_dmul>
 810b1b4:	3501      	adds	r5, #1
 810b1b6:	4606      	mov	r6, r0
 810b1b8:	460f      	mov	r7, r1
 810b1ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 810b1be:	f109 0908 	add.w	r9, r9, #8
 810b1c2:	e7e0      	b.n	810b186 <_dtoa_r+0x36e>
 810b1c4:	f000 809f 	beq.w	810b306 <_dtoa_r+0x4ee>
 810b1c8:	f1cb 0600 	rsb	r6, fp, #0
 810b1cc:	4ba1      	ldr	r3, [pc, #644]	; (810b454 <_dtoa_r+0x63c>)
 810b1ce:	4fa2      	ldr	r7, [pc, #648]	; (810b458 <_dtoa_r+0x640>)
 810b1d0:	f006 020f 	and.w	r2, r6, #15
 810b1d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 810b1dc:	ec51 0b18 	vmov	r0, r1, d8
 810b1e0:	f7f5 fa92 	bl	8100708 <__aeabi_dmul>
 810b1e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b1e8:	1136      	asrs	r6, r6, #4
 810b1ea:	2300      	movs	r3, #0
 810b1ec:	2502      	movs	r5, #2
 810b1ee:	2e00      	cmp	r6, #0
 810b1f0:	d17e      	bne.n	810b2f0 <_dtoa_r+0x4d8>
 810b1f2:	2b00      	cmp	r3, #0
 810b1f4:	d1d0      	bne.n	810b198 <_dtoa_r+0x380>
 810b1f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b1f8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b1fc:	2b00      	cmp	r3, #0
 810b1fe:	f000 8084 	beq.w	810b30a <_dtoa_r+0x4f2>
 810b202:	4b96      	ldr	r3, [pc, #600]	; (810b45c <_dtoa_r+0x644>)
 810b204:	2200      	movs	r2, #0
 810b206:	4640      	mov	r0, r8
 810b208:	4649      	mov	r1, r9
 810b20a:	f7f5 fcef 	bl	8100bec <__aeabi_dcmplt>
 810b20e:	2800      	cmp	r0, #0
 810b210:	d07b      	beq.n	810b30a <_dtoa_r+0x4f2>
 810b212:	9b04      	ldr	r3, [sp, #16]
 810b214:	2b00      	cmp	r3, #0
 810b216:	d078      	beq.n	810b30a <_dtoa_r+0x4f2>
 810b218:	9b01      	ldr	r3, [sp, #4]
 810b21a:	2b00      	cmp	r3, #0
 810b21c:	dd39      	ble.n	810b292 <_dtoa_r+0x47a>
 810b21e:	4b90      	ldr	r3, [pc, #576]	; (810b460 <_dtoa_r+0x648>)
 810b220:	2200      	movs	r2, #0
 810b222:	4640      	mov	r0, r8
 810b224:	4649      	mov	r1, r9
 810b226:	f7f5 fa6f 	bl	8100708 <__aeabi_dmul>
 810b22a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b22e:	9e01      	ldr	r6, [sp, #4]
 810b230:	f10b 37ff 	add.w	r7, fp, #4294967295
 810b234:	3501      	adds	r5, #1
 810b236:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 810b23a:	4628      	mov	r0, r5
 810b23c:	f7f5 f9fa 	bl	8100634 <__aeabi_i2d>
 810b240:	4642      	mov	r2, r8
 810b242:	464b      	mov	r3, r9
 810b244:	f7f5 fa60 	bl	8100708 <__aeabi_dmul>
 810b248:	4b86      	ldr	r3, [pc, #536]	; (810b464 <_dtoa_r+0x64c>)
 810b24a:	2200      	movs	r2, #0
 810b24c:	f7f5 f8a6 	bl	810039c <__adddf3>
 810b250:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 810b254:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810b258:	9303      	str	r3, [sp, #12]
 810b25a:	2e00      	cmp	r6, #0
 810b25c:	d158      	bne.n	810b310 <_dtoa_r+0x4f8>
 810b25e:	4b82      	ldr	r3, [pc, #520]	; (810b468 <_dtoa_r+0x650>)
 810b260:	2200      	movs	r2, #0
 810b262:	4640      	mov	r0, r8
 810b264:	4649      	mov	r1, r9
 810b266:	f7f5 f897 	bl	8100398 <__aeabi_dsub>
 810b26a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b26e:	4680      	mov	r8, r0
 810b270:	4689      	mov	r9, r1
 810b272:	f7f5 fcd9 	bl	8100c28 <__aeabi_dcmpgt>
 810b276:	2800      	cmp	r0, #0
 810b278:	f040 8296 	bne.w	810b7a8 <_dtoa_r+0x990>
 810b27c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 810b280:	4640      	mov	r0, r8
 810b282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810b286:	4649      	mov	r1, r9
 810b288:	f7f5 fcb0 	bl	8100bec <__aeabi_dcmplt>
 810b28c:	2800      	cmp	r0, #0
 810b28e:	f040 8289 	bne.w	810b7a4 <_dtoa_r+0x98c>
 810b292:	ed8d 8b02 	vstr	d8, [sp, #8]
 810b296:	9b11      	ldr	r3, [sp, #68]	; 0x44
 810b298:	2b00      	cmp	r3, #0
 810b29a:	f2c0 814e 	blt.w	810b53a <_dtoa_r+0x722>
 810b29e:	f1bb 0f0e 	cmp.w	fp, #14
 810b2a2:	f300 814a 	bgt.w	810b53a <_dtoa_r+0x722>
 810b2a6:	4b6b      	ldr	r3, [pc, #428]	; (810b454 <_dtoa_r+0x63c>)
 810b2a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 810b2ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 810b2b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b2b2:	2b00      	cmp	r3, #0
 810b2b4:	f280 80dc 	bge.w	810b470 <_dtoa_r+0x658>
 810b2b8:	9b04      	ldr	r3, [sp, #16]
 810b2ba:	2b00      	cmp	r3, #0
 810b2bc:	f300 80d8 	bgt.w	810b470 <_dtoa_r+0x658>
 810b2c0:	f040 826f 	bne.w	810b7a2 <_dtoa_r+0x98a>
 810b2c4:	4b68      	ldr	r3, [pc, #416]	; (810b468 <_dtoa_r+0x650>)
 810b2c6:	2200      	movs	r2, #0
 810b2c8:	4640      	mov	r0, r8
 810b2ca:	4649      	mov	r1, r9
 810b2cc:	f7f5 fa1c 	bl	8100708 <__aeabi_dmul>
 810b2d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810b2d4:	f7f5 fc9e 	bl	8100c14 <__aeabi_dcmpge>
 810b2d8:	9e04      	ldr	r6, [sp, #16]
 810b2da:	4637      	mov	r7, r6
 810b2dc:	2800      	cmp	r0, #0
 810b2de:	f040 8245 	bne.w	810b76c <_dtoa_r+0x954>
 810b2e2:	9d00      	ldr	r5, [sp, #0]
 810b2e4:	2331      	movs	r3, #49	; 0x31
 810b2e6:	f805 3b01 	strb.w	r3, [r5], #1
 810b2ea:	f10b 0b01 	add.w	fp, fp, #1
 810b2ee:	e241      	b.n	810b774 <_dtoa_r+0x95c>
 810b2f0:	07f2      	lsls	r2, r6, #31
 810b2f2:	d505      	bpl.n	810b300 <_dtoa_r+0x4e8>
 810b2f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 810b2f8:	f7f5 fa06 	bl	8100708 <__aeabi_dmul>
 810b2fc:	3501      	adds	r5, #1
 810b2fe:	2301      	movs	r3, #1
 810b300:	1076      	asrs	r6, r6, #1
 810b302:	3708      	adds	r7, #8
 810b304:	e773      	b.n	810b1ee <_dtoa_r+0x3d6>
 810b306:	2502      	movs	r5, #2
 810b308:	e775      	b.n	810b1f6 <_dtoa_r+0x3de>
 810b30a:	9e04      	ldr	r6, [sp, #16]
 810b30c:	465f      	mov	r7, fp
 810b30e:	e792      	b.n	810b236 <_dtoa_r+0x41e>
 810b310:	9900      	ldr	r1, [sp, #0]
 810b312:	4b50      	ldr	r3, [pc, #320]	; (810b454 <_dtoa_r+0x63c>)
 810b314:	ed9d 7b02 	vldr	d7, [sp, #8]
 810b318:	4431      	add	r1, r6
 810b31a:	9102      	str	r1, [sp, #8]
 810b31c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810b31e:	eeb0 9a47 	vmov.f32	s18, s14
 810b322:	eef0 9a67 	vmov.f32	s19, s15
 810b326:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 810b32a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810b32e:	2900      	cmp	r1, #0
 810b330:	d044      	beq.n	810b3bc <_dtoa_r+0x5a4>
 810b332:	494e      	ldr	r1, [pc, #312]	; (810b46c <_dtoa_r+0x654>)
 810b334:	2000      	movs	r0, #0
 810b336:	f7f5 fb11 	bl	810095c <__aeabi_ddiv>
 810b33a:	ec53 2b19 	vmov	r2, r3, d9
 810b33e:	f7f5 f82b 	bl	8100398 <__aeabi_dsub>
 810b342:	9d00      	ldr	r5, [sp, #0]
 810b344:	ec41 0b19 	vmov	d9, r0, r1
 810b348:	4649      	mov	r1, r9
 810b34a:	4640      	mov	r0, r8
 810b34c:	f7f5 fc8c 	bl	8100c68 <__aeabi_d2iz>
 810b350:	4606      	mov	r6, r0
 810b352:	f7f5 f96f 	bl	8100634 <__aeabi_i2d>
 810b356:	4602      	mov	r2, r0
 810b358:	460b      	mov	r3, r1
 810b35a:	4640      	mov	r0, r8
 810b35c:	4649      	mov	r1, r9
 810b35e:	f7f5 f81b 	bl	8100398 <__aeabi_dsub>
 810b362:	3630      	adds	r6, #48	; 0x30
 810b364:	f805 6b01 	strb.w	r6, [r5], #1
 810b368:	ec53 2b19 	vmov	r2, r3, d9
 810b36c:	4680      	mov	r8, r0
 810b36e:	4689      	mov	r9, r1
 810b370:	f7f5 fc3c 	bl	8100bec <__aeabi_dcmplt>
 810b374:	2800      	cmp	r0, #0
 810b376:	d164      	bne.n	810b442 <_dtoa_r+0x62a>
 810b378:	4642      	mov	r2, r8
 810b37a:	464b      	mov	r3, r9
 810b37c:	4937      	ldr	r1, [pc, #220]	; (810b45c <_dtoa_r+0x644>)
 810b37e:	2000      	movs	r0, #0
 810b380:	f7f5 f80a 	bl	8100398 <__aeabi_dsub>
 810b384:	ec53 2b19 	vmov	r2, r3, d9
 810b388:	f7f5 fc30 	bl	8100bec <__aeabi_dcmplt>
 810b38c:	2800      	cmp	r0, #0
 810b38e:	f040 80b6 	bne.w	810b4fe <_dtoa_r+0x6e6>
 810b392:	9b02      	ldr	r3, [sp, #8]
 810b394:	429d      	cmp	r5, r3
 810b396:	f43f af7c 	beq.w	810b292 <_dtoa_r+0x47a>
 810b39a:	4b31      	ldr	r3, [pc, #196]	; (810b460 <_dtoa_r+0x648>)
 810b39c:	ec51 0b19 	vmov	r0, r1, d9
 810b3a0:	2200      	movs	r2, #0
 810b3a2:	f7f5 f9b1 	bl	8100708 <__aeabi_dmul>
 810b3a6:	4b2e      	ldr	r3, [pc, #184]	; (810b460 <_dtoa_r+0x648>)
 810b3a8:	ec41 0b19 	vmov	d9, r0, r1
 810b3ac:	2200      	movs	r2, #0
 810b3ae:	4640      	mov	r0, r8
 810b3b0:	4649      	mov	r1, r9
 810b3b2:	f7f5 f9a9 	bl	8100708 <__aeabi_dmul>
 810b3b6:	4680      	mov	r8, r0
 810b3b8:	4689      	mov	r9, r1
 810b3ba:	e7c5      	b.n	810b348 <_dtoa_r+0x530>
 810b3bc:	ec51 0b17 	vmov	r0, r1, d7
 810b3c0:	f7f5 f9a2 	bl	8100708 <__aeabi_dmul>
 810b3c4:	9b02      	ldr	r3, [sp, #8]
 810b3c6:	9d00      	ldr	r5, [sp, #0]
 810b3c8:	930f      	str	r3, [sp, #60]	; 0x3c
 810b3ca:	ec41 0b19 	vmov	d9, r0, r1
 810b3ce:	4649      	mov	r1, r9
 810b3d0:	4640      	mov	r0, r8
 810b3d2:	f7f5 fc49 	bl	8100c68 <__aeabi_d2iz>
 810b3d6:	4606      	mov	r6, r0
 810b3d8:	f7f5 f92c 	bl	8100634 <__aeabi_i2d>
 810b3dc:	3630      	adds	r6, #48	; 0x30
 810b3de:	4602      	mov	r2, r0
 810b3e0:	460b      	mov	r3, r1
 810b3e2:	4640      	mov	r0, r8
 810b3e4:	4649      	mov	r1, r9
 810b3e6:	f7f4 ffd7 	bl	8100398 <__aeabi_dsub>
 810b3ea:	f805 6b01 	strb.w	r6, [r5], #1
 810b3ee:	9b02      	ldr	r3, [sp, #8]
 810b3f0:	429d      	cmp	r5, r3
 810b3f2:	4680      	mov	r8, r0
 810b3f4:	4689      	mov	r9, r1
 810b3f6:	f04f 0200 	mov.w	r2, #0
 810b3fa:	d124      	bne.n	810b446 <_dtoa_r+0x62e>
 810b3fc:	4b1b      	ldr	r3, [pc, #108]	; (810b46c <_dtoa_r+0x654>)
 810b3fe:	ec51 0b19 	vmov	r0, r1, d9
 810b402:	f7f4 ffcb 	bl	810039c <__adddf3>
 810b406:	4602      	mov	r2, r0
 810b408:	460b      	mov	r3, r1
 810b40a:	4640      	mov	r0, r8
 810b40c:	4649      	mov	r1, r9
 810b40e:	f7f5 fc0b 	bl	8100c28 <__aeabi_dcmpgt>
 810b412:	2800      	cmp	r0, #0
 810b414:	d173      	bne.n	810b4fe <_dtoa_r+0x6e6>
 810b416:	ec53 2b19 	vmov	r2, r3, d9
 810b41a:	4914      	ldr	r1, [pc, #80]	; (810b46c <_dtoa_r+0x654>)
 810b41c:	2000      	movs	r0, #0
 810b41e:	f7f4 ffbb 	bl	8100398 <__aeabi_dsub>
 810b422:	4602      	mov	r2, r0
 810b424:	460b      	mov	r3, r1
 810b426:	4640      	mov	r0, r8
 810b428:	4649      	mov	r1, r9
 810b42a:	f7f5 fbdf 	bl	8100bec <__aeabi_dcmplt>
 810b42e:	2800      	cmp	r0, #0
 810b430:	f43f af2f 	beq.w	810b292 <_dtoa_r+0x47a>
 810b434:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 810b436:	1e6b      	subs	r3, r5, #1
 810b438:	930f      	str	r3, [sp, #60]	; 0x3c
 810b43a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810b43e:	2b30      	cmp	r3, #48	; 0x30
 810b440:	d0f8      	beq.n	810b434 <_dtoa_r+0x61c>
 810b442:	46bb      	mov	fp, r7
 810b444:	e04a      	b.n	810b4dc <_dtoa_r+0x6c4>
 810b446:	4b06      	ldr	r3, [pc, #24]	; (810b460 <_dtoa_r+0x648>)
 810b448:	f7f5 f95e 	bl	8100708 <__aeabi_dmul>
 810b44c:	4680      	mov	r8, r0
 810b44e:	4689      	mov	r9, r1
 810b450:	e7bd      	b.n	810b3ce <_dtoa_r+0x5b6>
 810b452:	bf00      	nop
 810b454:	0810e9b8 	.word	0x0810e9b8
 810b458:	0810e990 	.word	0x0810e990
 810b45c:	3ff00000 	.word	0x3ff00000
 810b460:	40240000 	.word	0x40240000
 810b464:	401c0000 	.word	0x401c0000
 810b468:	40140000 	.word	0x40140000
 810b46c:	3fe00000 	.word	0x3fe00000
 810b470:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 810b474:	9d00      	ldr	r5, [sp, #0]
 810b476:	4642      	mov	r2, r8
 810b478:	464b      	mov	r3, r9
 810b47a:	4630      	mov	r0, r6
 810b47c:	4639      	mov	r1, r7
 810b47e:	f7f5 fa6d 	bl	810095c <__aeabi_ddiv>
 810b482:	f7f5 fbf1 	bl	8100c68 <__aeabi_d2iz>
 810b486:	9001      	str	r0, [sp, #4]
 810b488:	f7f5 f8d4 	bl	8100634 <__aeabi_i2d>
 810b48c:	4642      	mov	r2, r8
 810b48e:	464b      	mov	r3, r9
 810b490:	f7f5 f93a 	bl	8100708 <__aeabi_dmul>
 810b494:	4602      	mov	r2, r0
 810b496:	460b      	mov	r3, r1
 810b498:	4630      	mov	r0, r6
 810b49a:	4639      	mov	r1, r7
 810b49c:	f7f4 ff7c 	bl	8100398 <__aeabi_dsub>
 810b4a0:	9e01      	ldr	r6, [sp, #4]
 810b4a2:	9f04      	ldr	r7, [sp, #16]
 810b4a4:	3630      	adds	r6, #48	; 0x30
 810b4a6:	f805 6b01 	strb.w	r6, [r5], #1
 810b4aa:	9e00      	ldr	r6, [sp, #0]
 810b4ac:	1bae      	subs	r6, r5, r6
 810b4ae:	42b7      	cmp	r7, r6
 810b4b0:	4602      	mov	r2, r0
 810b4b2:	460b      	mov	r3, r1
 810b4b4:	d134      	bne.n	810b520 <_dtoa_r+0x708>
 810b4b6:	f7f4 ff71 	bl	810039c <__adddf3>
 810b4ba:	4642      	mov	r2, r8
 810b4bc:	464b      	mov	r3, r9
 810b4be:	4606      	mov	r6, r0
 810b4c0:	460f      	mov	r7, r1
 810b4c2:	f7f5 fbb1 	bl	8100c28 <__aeabi_dcmpgt>
 810b4c6:	b9c8      	cbnz	r0, 810b4fc <_dtoa_r+0x6e4>
 810b4c8:	4642      	mov	r2, r8
 810b4ca:	464b      	mov	r3, r9
 810b4cc:	4630      	mov	r0, r6
 810b4ce:	4639      	mov	r1, r7
 810b4d0:	f7f5 fb82 	bl	8100bd8 <__aeabi_dcmpeq>
 810b4d4:	b110      	cbz	r0, 810b4dc <_dtoa_r+0x6c4>
 810b4d6:	9b01      	ldr	r3, [sp, #4]
 810b4d8:	07db      	lsls	r3, r3, #31
 810b4da:	d40f      	bmi.n	810b4fc <_dtoa_r+0x6e4>
 810b4dc:	4651      	mov	r1, sl
 810b4de:	4620      	mov	r0, r4
 810b4e0:	f000 fbcc 	bl	810bc7c <_Bfree>
 810b4e4:	2300      	movs	r3, #0
 810b4e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810b4e8:	702b      	strb	r3, [r5, #0]
 810b4ea:	f10b 0301 	add.w	r3, fp, #1
 810b4ee:	6013      	str	r3, [r2, #0]
 810b4f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b4f2:	2b00      	cmp	r3, #0
 810b4f4:	f43f ace2 	beq.w	810aebc <_dtoa_r+0xa4>
 810b4f8:	601d      	str	r5, [r3, #0]
 810b4fa:	e4df      	b.n	810aebc <_dtoa_r+0xa4>
 810b4fc:	465f      	mov	r7, fp
 810b4fe:	462b      	mov	r3, r5
 810b500:	461d      	mov	r5, r3
 810b502:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b506:	2a39      	cmp	r2, #57	; 0x39
 810b508:	d106      	bne.n	810b518 <_dtoa_r+0x700>
 810b50a:	9a00      	ldr	r2, [sp, #0]
 810b50c:	429a      	cmp	r2, r3
 810b50e:	d1f7      	bne.n	810b500 <_dtoa_r+0x6e8>
 810b510:	9900      	ldr	r1, [sp, #0]
 810b512:	2230      	movs	r2, #48	; 0x30
 810b514:	3701      	adds	r7, #1
 810b516:	700a      	strb	r2, [r1, #0]
 810b518:	781a      	ldrb	r2, [r3, #0]
 810b51a:	3201      	adds	r2, #1
 810b51c:	701a      	strb	r2, [r3, #0]
 810b51e:	e790      	b.n	810b442 <_dtoa_r+0x62a>
 810b520:	4ba3      	ldr	r3, [pc, #652]	; (810b7b0 <_dtoa_r+0x998>)
 810b522:	2200      	movs	r2, #0
 810b524:	f7f5 f8f0 	bl	8100708 <__aeabi_dmul>
 810b528:	2200      	movs	r2, #0
 810b52a:	2300      	movs	r3, #0
 810b52c:	4606      	mov	r6, r0
 810b52e:	460f      	mov	r7, r1
 810b530:	f7f5 fb52 	bl	8100bd8 <__aeabi_dcmpeq>
 810b534:	2800      	cmp	r0, #0
 810b536:	d09e      	beq.n	810b476 <_dtoa_r+0x65e>
 810b538:	e7d0      	b.n	810b4dc <_dtoa_r+0x6c4>
 810b53a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b53c:	2a00      	cmp	r2, #0
 810b53e:	f000 80ca 	beq.w	810b6d6 <_dtoa_r+0x8be>
 810b542:	9a07      	ldr	r2, [sp, #28]
 810b544:	2a01      	cmp	r2, #1
 810b546:	f300 80ad 	bgt.w	810b6a4 <_dtoa_r+0x88c>
 810b54a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810b54c:	2a00      	cmp	r2, #0
 810b54e:	f000 80a5 	beq.w	810b69c <_dtoa_r+0x884>
 810b552:	f203 4333 	addw	r3, r3, #1075	; 0x433
 810b556:	9e08      	ldr	r6, [sp, #32]
 810b558:	9d05      	ldr	r5, [sp, #20]
 810b55a:	9a05      	ldr	r2, [sp, #20]
 810b55c:	441a      	add	r2, r3
 810b55e:	9205      	str	r2, [sp, #20]
 810b560:	9a06      	ldr	r2, [sp, #24]
 810b562:	2101      	movs	r1, #1
 810b564:	441a      	add	r2, r3
 810b566:	4620      	mov	r0, r4
 810b568:	9206      	str	r2, [sp, #24]
 810b56a:	f000 fc87 	bl	810be7c <__i2b>
 810b56e:	4607      	mov	r7, r0
 810b570:	b165      	cbz	r5, 810b58c <_dtoa_r+0x774>
 810b572:	9b06      	ldr	r3, [sp, #24]
 810b574:	2b00      	cmp	r3, #0
 810b576:	dd09      	ble.n	810b58c <_dtoa_r+0x774>
 810b578:	42ab      	cmp	r3, r5
 810b57a:	9a05      	ldr	r2, [sp, #20]
 810b57c:	bfa8      	it	ge
 810b57e:	462b      	movge	r3, r5
 810b580:	1ad2      	subs	r2, r2, r3
 810b582:	9205      	str	r2, [sp, #20]
 810b584:	9a06      	ldr	r2, [sp, #24]
 810b586:	1aed      	subs	r5, r5, r3
 810b588:	1ad3      	subs	r3, r2, r3
 810b58a:	9306      	str	r3, [sp, #24]
 810b58c:	9b08      	ldr	r3, [sp, #32]
 810b58e:	b1f3      	cbz	r3, 810b5ce <_dtoa_r+0x7b6>
 810b590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b592:	2b00      	cmp	r3, #0
 810b594:	f000 80a3 	beq.w	810b6de <_dtoa_r+0x8c6>
 810b598:	2e00      	cmp	r6, #0
 810b59a:	dd10      	ble.n	810b5be <_dtoa_r+0x7a6>
 810b59c:	4639      	mov	r1, r7
 810b59e:	4632      	mov	r2, r6
 810b5a0:	4620      	mov	r0, r4
 810b5a2:	f000 fd2b 	bl	810bffc <__pow5mult>
 810b5a6:	4652      	mov	r2, sl
 810b5a8:	4601      	mov	r1, r0
 810b5aa:	4607      	mov	r7, r0
 810b5ac:	4620      	mov	r0, r4
 810b5ae:	f000 fc7b 	bl	810bea8 <__multiply>
 810b5b2:	4651      	mov	r1, sl
 810b5b4:	4680      	mov	r8, r0
 810b5b6:	4620      	mov	r0, r4
 810b5b8:	f000 fb60 	bl	810bc7c <_Bfree>
 810b5bc:	46c2      	mov	sl, r8
 810b5be:	9b08      	ldr	r3, [sp, #32]
 810b5c0:	1b9a      	subs	r2, r3, r6
 810b5c2:	d004      	beq.n	810b5ce <_dtoa_r+0x7b6>
 810b5c4:	4651      	mov	r1, sl
 810b5c6:	4620      	mov	r0, r4
 810b5c8:	f000 fd18 	bl	810bffc <__pow5mult>
 810b5cc:	4682      	mov	sl, r0
 810b5ce:	2101      	movs	r1, #1
 810b5d0:	4620      	mov	r0, r4
 810b5d2:	f000 fc53 	bl	810be7c <__i2b>
 810b5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b5d8:	2b00      	cmp	r3, #0
 810b5da:	4606      	mov	r6, r0
 810b5dc:	f340 8081 	ble.w	810b6e2 <_dtoa_r+0x8ca>
 810b5e0:	461a      	mov	r2, r3
 810b5e2:	4601      	mov	r1, r0
 810b5e4:	4620      	mov	r0, r4
 810b5e6:	f000 fd09 	bl	810bffc <__pow5mult>
 810b5ea:	9b07      	ldr	r3, [sp, #28]
 810b5ec:	2b01      	cmp	r3, #1
 810b5ee:	4606      	mov	r6, r0
 810b5f0:	dd7a      	ble.n	810b6e8 <_dtoa_r+0x8d0>
 810b5f2:	f04f 0800 	mov.w	r8, #0
 810b5f6:	6933      	ldr	r3, [r6, #16]
 810b5f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810b5fc:	6918      	ldr	r0, [r3, #16]
 810b5fe:	f000 fbef 	bl	810bde0 <__hi0bits>
 810b602:	f1c0 0020 	rsb	r0, r0, #32
 810b606:	9b06      	ldr	r3, [sp, #24]
 810b608:	4418      	add	r0, r3
 810b60a:	f010 001f 	ands.w	r0, r0, #31
 810b60e:	f000 8094 	beq.w	810b73a <_dtoa_r+0x922>
 810b612:	f1c0 0320 	rsb	r3, r0, #32
 810b616:	2b04      	cmp	r3, #4
 810b618:	f340 8085 	ble.w	810b726 <_dtoa_r+0x90e>
 810b61c:	9b05      	ldr	r3, [sp, #20]
 810b61e:	f1c0 001c 	rsb	r0, r0, #28
 810b622:	4403      	add	r3, r0
 810b624:	9305      	str	r3, [sp, #20]
 810b626:	9b06      	ldr	r3, [sp, #24]
 810b628:	4403      	add	r3, r0
 810b62a:	4405      	add	r5, r0
 810b62c:	9306      	str	r3, [sp, #24]
 810b62e:	9b05      	ldr	r3, [sp, #20]
 810b630:	2b00      	cmp	r3, #0
 810b632:	dd05      	ble.n	810b640 <_dtoa_r+0x828>
 810b634:	4651      	mov	r1, sl
 810b636:	461a      	mov	r2, r3
 810b638:	4620      	mov	r0, r4
 810b63a:	f000 fd39 	bl	810c0b0 <__lshift>
 810b63e:	4682      	mov	sl, r0
 810b640:	9b06      	ldr	r3, [sp, #24]
 810b642:	2b00      	cmp	r3, #0
 810b644:	dd05      	ble.n	810b652 <_dtoa_r+0x83a>
 810b646:	4631      	mov	r1, r6
 810b648:	461a      	mov	r2, r3
 810b64a:	4620      	mov	r0, r4
 810b64c:	f000 fd30 	bl	810c0b0 <__lshift>
 810b650:	4606      	mov	r6, r0
 810b652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810b654:	2b00      	cmp	r3, #0
 810b656:	d072      	beq.n	810b73e <_dtoa_r+0x926>
 810b658:	4631      	mov	r1, r6
 810b65a:	4650      	mov	r0, sl
 810b65c:	f000 fd94 	bl	810c188 <__mcmp>
 810b660:	2800      	cmp	r0, #0
 810b662:	da6c      	bge.n	810b73e <_dtoa_r+0x926>
 810b664:	2300      	movs	r3, #0
 810b666:	4651      	mov	r1, sl
 810b668:	220a      	movs	r2, #10
 810b66a:	4620      	mov	r0, r4
 810b66c:	f000 fb28 	bl	810bcc0 <__multadd>
 810b670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b672:	f10b 3bff 	add.w	fp, fp, #4294967295
 810b676:	4682      	mov	sl, r0
 810b678:	2b00      	cmp	r3, #0
 810b67a:	f000 81b0 	beq.w	810b9de <_dtoa_r+0xbc6>
 810b67e:	2300      	movs	r3, #0
 810b680:	4639      	mov	r1, r7
 810b682:	220a      	movs	r2, #10
 810b684:	4620      	mov	r0, r4
 810b686:	f000 fb1b 	bl	810bcc0 <__multadd>
 810b68a:	9b01      	ldr	r3, [sp, #4]
 810b68c:	2b00      	cmp	r3, #0
 810b68e:	4607      	mov	r7, r0
 810b690:	f300 8096 	bgt.w	810b7c0 <_dtoa_r+0x9a8>
 810b694:	9b07      	ldr	r3, [sp, #28]
 810b696:	2b02      	cmp	r3, #2
 810b698:	dc59      	bgt.n	810b74e <_dtoa_r+0x936>
 810b69a:	e091      	b.n	810b7c0 <_dtoa_r+0x9a8>
 810b69c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810b69e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 810b6a2:	e758      	b.n	810b556 <_dtoa_r+0x73e>
 810b6a4:	9b04      	ldr	r3, [sp, #16]
 810b6a6:	1e5e      	subs	r6, r3, #1
 810b6a8:	9b08      	ldr	r3, [sp, #32]
 810b6aa:	42b3      	cmp	r3, r6
 810b6ac:	bfbf      	itttt	lt
 810b6ae:	9b08      	ldrlt	r3, [sp, #32]
 810b6b0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 810b6b2:	9608      	strlt	r6, [sp, #32]
 810b6b4:	1af3      	sublt	r3, r6, r3
 810b6b6:	bfb4      	ite	lt
 810b6b8:	18d2      	addlt	r2, r2, r3
 810b6ba:	1b9e      	subge	r6, r3, r6
 810b6bc:	9b04      	ldr	r3, [sp, #16]
 810b6be:	bfbc      	itt	lt
 810b6c0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 810b6c2:	2600      	movlt	r6, #0
 810b6c4:	2b00      	cmp	r3, #0
 810b6c6:	bfb7      	itett	lt
 810b6c8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 810b6cc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 810b6d0:	1a9d      	sublt	r5, r3, r2
 810b6d2:	2300      	movlt	r3, #0
 810b6d4:	e741      	b.n	810b55a <_dtoa_r+0x742>
 810b6d6:	9e08      	ldr	r6, [sp, #32]
 810b6d8:	9d05      	ldr	r5, [sp, #20]
 810b6da:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810b6dc:	e748      	b.n	810b570 <_dtoa_r+0x758>
 810b6de:	9a08      	ldr	r2, [sp, #32]
 810b6e0:	e770      	b.n	810b5c4 <_dtoa_r+0x7ac>
 810b6e2:	9b07      	ldr	r3, [sp, #28]
 810b6e4:	2b01      	cmp	r3, #1
 810b6e6:	dc19      	bgt.n	810b71c <_dtoa_r+0x904>
 810b6e8:	9b02      	ldr	r3, [sp, #8]
 810b6ea:	b9bb      	cbnz	r3, 810b71c <_dtoa_r+0x904>
 810b6ec:	9b03      	ldr	r3, [sp, #12]
 810b6ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810b6f2:	b99b      	cbnz	r3, 810b71c <_dtoa_r+0x904>
 810b6f4:	9b03      	ldr	r3, [sp, #12]
 810b6f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810b6fa:	0d1b      	lsrs	r3, r3, #20
 810b6fc:	051b      	lsls	r3, r3, #20
 810b6fe:	b183      	cbz	r3, 810b722 <_dtoa_r+0x90a>
 810b700:	9b05      	ldr	r3, [sp, #20]
 810b702:	3301      	adds	r3, #1
 810b704:	9305      	str	r3, [sp, #20]
 810b706:	9b06      	ldr	r3, [sp, #24]
 810b708:	3301      	adds	r3, #1
 810b70a:	9306      	str	r3, [sp, #24]
 810b70c:	f04f 0801 	mov.w	r8, #1
 810b710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810b712:	2b00      	cmp	r3, #0
 810b714:	f47f af6f 	bne.w	810b5f6 <_dtoa_r+0x7de>
 810b718:	2001      	movs	r0, #1
 810b71a:	e774      	b.n	810b606 <_dtoa_r+0x7ee>
 810b71c:	f04f 0800 	mov.w	r8, #0
 810b720:	e7f6      	b.n	810b710 <_dtoa_r+0x8f8>
 810b722:	4698      	mov	r8, r3
 810b724:	e7f4      	b.n	810b710 <_dtoa_r+0x8f8>
 810b726:	d082      	beq.n	810b62e <_dtoa_r+0x816>
 810b728:	9a05      	ldr	r2, [sp, #20]
 810b72a:	331c      	adds	r3, #28
 810b72c:	441a      	add	r2, r3
 810b72e:	9205      	str	r2, [sp, #20]
 810b730:	9a06      	ldr	r2, [sp, #24]
 810b732:	441a      	add	r2, r3
 810b734:	441d      	add	r5, r3
 810b736:	9206      	str	r2, [sp, #24]
 810b738:	e779      	b.n	810b62e <_dtoa_r+0x816>
 810b73a:	4603      	mov	r3, r0
 810b73c:	e7f4      	b.n	810b728 <_dtoa_r+0x910>
 810b73e:	9b04      	ldr	r3, [sp, #16]
 810b740:	2b00      	cmp	r3, #0
 810b742:	dc37      	bgt.n	810b7b4 <_dtoa_r+0x99c>
 810b744:	9b07      	ldr	r3, [sp, #28]
 810b746:	2b02      	cmp	r3, #2
 810b748:	dd34      	ble.n	810b7b4 <_dtoa_r+0x99c>
 810b74a:	9b04      	ldr	r3, [sp, #16]
 810b74c:	9301      	str	r3, [sp, #4]
 810b74e:	9b01      	ldr	r3, [sp, #4]
 810b750:	b963      	cbnz	r3, 810b76c <_dtoa_r+0x954>
 810b752:	4631      	mov	r1, r6
 810b754:	2205      	movs	r2, #5
 810b756:	4620      	mov	r0, r4
 810b758:	f000 fab2 	bl	810bcc0 <__multadd>
 810b75c:	4601      	mov	r1, r0
 810b75e:	4606      	mov	r6, r0
 810b760:	4650      	mov	r0, sl
 810b762:	f000 fd11 	bl	810c188 <__mcmp>
 810b766:	2800      	cmp	r0, #0
 810b768:	f73f adbb 	bgt.w	810b2e2 <_dtoa_r+0x4ca>
 810b76c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810b76e:	9d00      	ldr	r5, [sp, #0]
 810b770:	ea6f 0b03 	mvn.w	fp, r3
 810b774:	f04f 0800 	mov.w	r8, #0
 810b778:	4631      	mov	r1, r6
 810b77a:	4620      	mov	r0, r4
 810b77c:	f000 fa7e 	bl	810bc7c <_Bfree>
 810b780:	2f00      	cmp	r7, #0
 810b782:	f43f aeab 	beq.w	810b4dc <_dtoa_r+0x6c4>
 810b786:	f1b8 0f00 	cmp.w	r8, #0
 810b78a:	d005      	beq.n	810b798 <_dtoa_r+0x980>
 810b78c:	45b8      	cmp	r8, r7
 810b78e:	d003      	beq.n	810b798 <_dtoa_r+0x980>
 810b790:	4641      	mov	r1, r8
 810b792:	4620      	mov	r0, r4
 810b794:	f000 fa72 	bl	810bc7c <_Bfree>
 810b798:	4639      	mov	r1, r7
 810b79a:	4620      	mov	r0, r4
 810b79c:	f000 fa6e 	bl	810bc7c <_Bfree>
 810b7a0:	e69c      	b.n	810b4dc <_dtoa_r+0x6c4>
 810b7a2:	2600      	movs	r6, #0
 810b7a4:	4637      	mov	r7, r6
 810b7a6:	e7e1      	b.n	810b76c <_dtoa_r+0x954>
 810b7a8:	46bb      	mov	fp, r7
 810b7aa:	4637      	mov	r7, r6
 810b7ac:	e599      	b.n	810b2e2 <_dtoa_r+0x4ca>
 810b7ae:	bf00      	nop
 810b7b0:	40240000 	.word	0x40240000
 810b7b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810b7b6:	2b00      	cmp	r3, #0
 810b7b8:	f000 80c8 	beq.w	810b94c <_dtoa_r+0xb34>
 810b7bc:	9b04      	ldr	r3, [sp, #16]
 810b7be:	9301      	str	r3, [sp, #4]
 810b7c0:	2d00      	cmp	r5, #0
 810b7c2:	dd05      	ble.n	810b7d0 <_dtoa_r+0x9b8>
 810b7c4:	4639      	mov	r1, r7
 810b7c6:	462a      	mov	r2, r5
 810b7c8:	4620      	mov	r0, r4
 810b7ca:	f000 fc71 	bl	810c0b0 <__lshift>
 810b7ce:	4607      	mov	r7, r0
 810b7d0:	f1b8 0f00 	cmp.w	r8, #0
 810b7d4:	d05b      	beq.n	810b88e <_dtoa_r+0xa76>
 810b7d6:	6879      	ldr	r1, [r7, #4]
 810b7d8:	4620      	mov	r0, r4
 810b7da:	f000 fa0f 	bl	810bbfc <_Balloc>
 810b7de:	4605      	mov	r5, r0
 810b7e0:	b928      	cbnz	r0, 810b7ee <_dtoa_r+0x9d6>
 810b7e2:	4b83      	ldr	r3, [pc, #524]	; (810b9f0 <_dtoa_r+0xbd8>)
 810b7e4:	4602      	mov	r2, r0
 810b7e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 810b7ea:	f7ff bb2e 	b.w	810ae4a <_dtoa_r+0x32>
 810b7ee:	693a      	ldr	r2, [r7, #16]
 810b7f0:	3202      	adds	r2, #2
 810b7f2:	0092      	lsls	r2, r2, #2
 810b7f4:	f107 010c 	add.w	r1, r7, #12
 810b7f8:	300c      	adds	r0, #12
 810b7fa:	f002 f95f 	bl	810dabc <memcpy>
 810b7fe:	2201      	movs	r2, #1
 810b800:	4629      	mov	r1, r5
 810b802:	4620      	mov	r0, r4
 810b804:	f000 fc54 	bl	810c0b0 <__lshift>
 810b808:	9b00      	ldr	r3, [sp, #0]
 810b80a:	3301      	adds	r3, #1
 810b80c:	9304      	str	r3, [sp, #16]
 810b80e:	e9dd 2300 	ldrd	r2, r3, [sp]
 810b812:	4413      	add	r3, r2
 810b814:	9308      	str	r3, [sp, #32]
 810b816:	9b02      	ldr	r3, [sp, #8]
 810b818:	f003 0301 	and.w	r3, r3, #1
 810b81c:	46b8      	mov	r8, r7
 810b81e:	9306      	str	r3, [sp, #24]
 810b820:	4607      	mov	r7, r0
 810b822:	9b04      	ldr	r3, [sp, #16]
 810b824:	4631      	mov	r1, r6
 810b826:	3b01      	subs	r3, #1
 810b828:	4650      	mov	r0, sl
 810b82a:	9301      	str	r3, [sp, #4]
 810b82c:	f7ff fa6a 	bl	810ad04 <quorem>
 810b830:	4641      	mov	r1, r8
 810b832:	9002      	str	r0, [sp, #8]
 810b834:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810b838:	4650      	mov	r0, sl
 810b83a:	f000 fca5 	bl	810c188 <__mcmp>
 810b83e:	463a      	mov	r2, r7
 810b840:	9005      	str	r0, [sp, #20]
 810b842:	4631      	mov	r1, r6
 810b844:	4620      	mov	r0, r4
 810b846:	f000 fcbb 	bl	810c1c0 <__mdiff>
 810b84a:	68c2      	ldr	r2, [r0, #12]
 810b84c:	4605      	mov	r5, r0
 810b84e:	bb02      	cbnz	r2, 810b892 <_dtoa_r+0xa7a>
 810b850:	4601      	mov	r1, r0
 810b852:	4650      	mov	r0, sl
 810b854:	f000 fc98 	bl	810c188 <__mcmp>
 810b858:	4602      	mov	r2, r0
 810b85a:	4629      	mov	r1, r5
 810b85c:	4620      	mov	r0, r4
 810b85e:	9209      	str	r2, [sp, #36]	; 0x24
 810b860:	f000 fa0c 	bl	810bc7c <_Bfree>
 810b864:	9b07      	ldr	r3, [sp, #28]
 810b866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810b868:	9d04      	ldr	r5, [sp, #16]
 810b86a:	ea43 0102 	orr.w	r1, r3, r2
 810b86e:	9b06      	ldr	r3, [sp, #24]
 810b870:	4319      	orrs	r1, r3
 810b872:	d110      	bne.n	810b896 <_dtoa_r+0xa7e>
 810b874:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b878:	d029      	beq.n	810b8ce <_dtoa_r+0xab6>
 810b87a:	9b05      	ldr	r3, [sp, #20]
 810b87c:	2b00      	cmp	r3, #0
 810b87e:	dd02      	ble.n	810b886 <_dtoa_r+0xa6e>
 810b880:	9b02      	ldr	r3, [sp, #8]
 810b882:	f103 0931 	add.w	r9, r3, #49	; 0x31
 810b886:	9b01      	ldr	r3, [sp, #4]
 810b888:	f883 9000 	strb.w	r9, [r3]
 810b88c:	e774      	b.n	810b778 <_dtoa_r+0x960>
 810b88e:	4638      	mov	r0, r7
 810b890:	e7ba      	b.n	810b808 <_dtoa_r+0x9f0>
 810b892:	2201      	movs	r2, #1
 810b894:	e7e1      	b.n	810b85a <_dtoa_r+0xa42>
 810b896:	9b05      	ldr	r3, [sp, #20]
 810b898:	2b00      	cmp	r3, #0
 810b89a:	db04      	blt.n	810b8a6 <_dtoa_r+0xa8e>
 810b89c:	9907      	ldr	r1, [sp, #28]
 810b89e:	430b      	orrs	r3, r1
 810b8a0:	9906      	ldr	r1, [sp, #24]
 810b8a2:	430b      	orrs	r3, r1
 810b8a4:	d120      	bne.n	810b8e8 <_dtoa_r+0xad0>
 810b8a6:	2a00      	cmp	r2, #0
 810b8a8:	dded      	ble.n	810b886 <_dtoa_r+0xa6e>
 810b8aa:	4651      	mov	r1, sl
 810b8ac:	2201      	movs	r2, #1
 810b8ae:	4620      	mov	r0, r4
 810b8b0:	f000 fbfe 	bl	810c0b0 <__lshift>
 810b8b4:	4631      	mov	r1, r6
 810b8b6:	4682      	mov	sl, r0
 810b8b8:	f000 fc66 	bl	810c188 <__mcmp>
 810b8bc:	2800      	cmp	r0, #0
 810b8be:	dc03      	bgt.n	810b8c8 <_dtoa_r+0xab0>
 810b8c0:	d1e1      	bne.n	810b886 <_dtoa_r+0xa6e>
 810b8c2:	f019 0f01 	tst.w	r9, #1
 810b8c6:	d0de      	beq.n	810b886 <_dtoa_r+0xa6e>
 810b8c8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b8cc:	d1d8      	bne.n	810b880 <_dtoa_r+0xa68>
 810b8ce:	9a01      	ldr	r2, [sp, #4]
 810b8d0:	2339      	movs	r3, #57	; 0x39
 810b8d2:	7013      	strb	r3, [r2, #0]
 810b8d4:	462b      	mov	r3, r5
 810b8d6:	461d      	mov	r5, r3
 810b8d8:	3b01      	subs	r3, #1
 810b8da:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810b8de:	2a39      	cmp	r2, #57	; 0x39
 810b8e0:	d06c      	beq.n	810b9bc <_dtoa_r+0xba4>
 810b8e2:	3201      	adds	r2, #1
 810b8e4:	701a      	strb	r2, [r3, #0]
 810b8e6:	e747      	b.n	810b778 <_dtoa_r+0x960>
 810b8e8:	2a00      	cmp	r2, #0
 810b8ea:	dd07      	ble.n	810b8fc <_dtoa_r+0xae4>
 810b8ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810b8f0:	d0ed      	beq.n	810b8ce <_dtoa_r+0xab6>
 810b8f2:	9a01      	ldr	r2, [sp, #4]
 810b8f4:	f109 0301 	add.w	r3, r9, #1
 810b8f8:	7013      	strb	r3, [r2, #0]
 810b8fa:	e73d      	b.n	810b778 <_dtoa_r+0x960>
 810b8fc:	9b04      	ldr	r3, [sp, #16]
 810b8fe:	9a08      	ldr	r2, [sp, #32]
 810b900:	f803 9c01 	strb.w	r9, [r3, #-1]
 810b904:	4293      	cmp	r3, r2
 810b906:	d043      	beq.n	810b990 <_dtoa_r+0xb78>
 810b908:	4651      	mov	r1, sl
 810b90a:	2300      	movs	r3, #0
 810b90c:	220a      	movs	r2, #10
 810b90e:	4620      	mov	r0, r4
 810b910:	f000 f9d6 	bl	810bcc0 <__multadd>
 810b914:	45b8      	cmp	r8, r7
 810b916:	4682      	mov	sl, r0
 810b918:	f04f 0300 	mov.w	r3, #0
 810b91c:	f04f 020a 	mov.w	r2, #10
 810b920:	4641      	mov	r1, r8
 810b922:	4620      	mov	r0, r4
 810b924:	d107      	bne.n	810b936 <_dtoa_r+0xb1e>
 810b926:	f000 f9cb 	bl	810bcc0 <__multadd>
 810b92a:	4680      	mov	r8, r0
 810b92c:	4607      	mov	r7, r0
 810b92e:	9b04      	ldr	r3, [sp, #16]
 810b930:	3301      	adds	r3, #1
 810b932:	9304      	str	r3, [sp, #16]
 810b934:	e775      	b.n	810b822 <_dtoa_r+0xa0a>
 810b936:	f000 f9c3 	bl	810bcc0 <__multadd>
 810b93a:	4639      	mov	r1, r7
 810b93c:	4680      	mov	r8, r0
 810b93e:	2300      	movs	r3, #0
 810b940:	220a      	movs	r2, #10
 810b942:	4620      	mov	r0, r4
 810b944:	f000 f9bc 	bl	810bcc0 <__multadd>
 810b948:	4607      	mov	r7, r0
 810b94a:	e7f0      	b.n	810b92e <_dtoa_r+0xb16>
 810b94c:	9b04      	ldr	r3, [sp, #16]
 810b94e:	9301      	str	r3, [sp, #4]
 810b950:	9d00      	ldr	r5, [sp, #0]
 810b952:	4631      	mov	r1, r6
 810b954:	4650      	mov	r0, sl
 810b956:	f7ff f9d5 	bl	810ad04 <quorem>
 810b95a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810b95e:	9b00      	ldr	r3, [sp, #0]
 810b960:	f805 9b01 	strb.w	r9, [r5], #1
 810b964:	1aea      	subs	r2, r5, r3
 810b966:	9b01      	ldr	r3, [sp, #4]
 810b968:	4293      	cmp	r3, r2
 810b96a:	dd07      	ble.n	810b97c <_dtoa_r+0xb64>
 810b96c:	4651      	mov	r1, sl
 810b96e:	2300      	movs	r3, #0
 810b970:	220a      	movs	r2, #10
 810b972:	4620      	mov	r0, r4
 810b974:	f000 f9a4 	bl	810bcc0 <__multadd>
 810b978:	4682      	mov	sl, r0
 810b97a:	e7ea      	b.n	810b952 <_dtoa_r+0xb3a>
 810b97c:	9b01      	ldr	r3, [sp, #4]
 810b97e:	2b00      	cmp	r3, #0
 810b980:	bfc8      	it	gt
 810b982:	461d      	movgt	r5, r3
 810b984:	9b00      	ldr	r3, [sp, #0]
 810b986:	bfd8      	it	le
 810b988:	2501      	movle	r5, #1
 810b98a:	441d      	add	r5, r3
 810b98c:	f04f 0800 	mov.w	r8, #0
 810b990:	4651      	mov	r1, sl
 810b992:	2201      	movs	r2, #1
 810b994:	4620      	mov	r0, r4
 810b996:	f000 fb8b 	bl	810c0b0 <__lshift>
 810b99a:	4631      	mov	r1, r6
 810b99c:	4682      	mov	sl, r0
 810b99e:	f000 fbf3 	bl	810c188 <__mcmp>
 810b9a2:	2800      	cmp	r0, #0
 810b9a4:	dc96      	bgt.n	810b8d4 <_dtoa_r+0xabc>
 810b9a6:	d102      	bne.n	810b9ae <_dtoa_r+0xb96>
 810b9a8:	f019 0f01 	tst.w	r9, #1
 810b9ac:	d192      	bne.n	810b8d4 <_dtoa_r+0xabc>
 810b9ae:	462b      	mov	r3, r5
 810b9b0:	461d      	mov	r5, r3
 810b9b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810b9b6:	2a30      	cmp	r2, #48	; 0x30
 810b9b8:	d0fa      	beq.n	810b9b0 <_dtoa_r+0xb98>
 810b9ba:	e6dd      	b.n	810b778 <_dtoa_r+0x960>
 810b9bc:	9a00      	ldr	r2, [sp, #0]
 810b9be:	429a      	cmp	r2, r3
 810b9c0:	d189      	bne.n	810b8d6 <_dtoa_r+0xabe>
 810b9c2:	f10b 0b01 	add.w	fp, fp, #1
 810b9c6:	2331      	movs	r3, #49	; 0x31
 810b9c8:	e796      	b.n	810b8f8 <_dtoa_r+0xae0>
 810b9ca:	4b0a      	ldr	r3, [pc, #40]	; (810b9f4 <_dtoa_r+0xbdc>)
 810b9cc:	f7ff ba99 	b.w	810af02 <_dtoa_r+0xea>
 810b9d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 810b9d2:	2b00      	cmp	r3, #0
 810b9d4:	f47f aa6d 	bne.w	810aeb2 <_dtoa_r+0x9a>
 810b9d8:	4b07      	ldr	r3, [pc, #28]	; (810b9f8 <_dtoa_r+0xbe0>)
 810b9da:	f7ff ba92 	b.w	810af02 <_dtoa_r+0xea>
 810b9de:	9b01      	ldr	r3, [sp, #4]
 810b9e0:	2b00      	cmp	r3, #0
 810b9e2:	dcb5      	bgt.n	810b950 <_dtoa_r+0xb38>
 810b9e4:	9b07      	ldr	r3, [sp, #28]
 810b9e6:	2b02      	cmp	r3, #2
 810b9e8:	f73f aeb1 	bgt.w	810b74e <_dtoa_r+0x936>
 810b9ec:	e7b0      	b.n	810b950 <_dtoa_r+0xb38>
 810b9ee:	bf00      	nop
 810b9f0:	0810e925 	.word	0x0810e925
 810b9f4:	0810e880 	.word	0x0810e880
 810b9f8:	0810e8a9 	.word	0x0810e8a9

0810b9fc <_free_r>:
 810b9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810b9fe:	2900      	cmp	r1, #0
 810ba00:	d044      	beq.n	810ba8c <_free_r+0x90>
 810ba02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ba06:	9001      	str	r0, [sp, #4]
 810ba08:	2b00      	cmp	r3, #0
 810ba0a:	f1a1 0404 	sub.w	r4, r1, #4
 810ba0e:	bfb8      	it	lt
 810ba10:	18e4      	addlt	r4, r4, r3
 810ba12:	f000 f8e7 	bl	810bbe4 <__malloc_lock>
 810ba16:	4a1e      	ldr	r2, [pc, #120]	; (810ba90 <_free_r+0x94>)
 810ba18:	9801      	ldr	r0, [sp, #4]
 810ba1a:	6813      	ldr	r3, [r2, #0]
 810ba1c:	b933      	cbnz	r3, 810ba2c <_free_r+0x30>
 810ba1e:	6063      	str	r3, [r4, #4]
 810ba20:	6014      	str	r4, [r2, #0]
 810ba22:	b003      	add	sp, #12
 810ba24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 810ba28:	f000 b8e2 	b.w	810bbf0 <__malloc_unlock>
 810ba2c:	42a3      	cmp	r3, r4
 810ba2e:	d908      	bls.n	810ba42 <_free_r+0x46>
 810ba30:	6825      	ldr	r5, [r4, #0]
 810ba32:	1961      	adds	r1, r4, r5
 810ba34:	428b      	cmp	r3, r1
 810ba36:	bf01      	itttt	eq
 810ba38:	6819      	ldreq	r1, [r3, #0]
 810ba3a:	685b      	ldreq	r3, [r3, #4]
 810ba3c:	1949      	addeq	r1, r1, r5
 810ba3e:	6021      	streq	r1, [r4, #0]
 810ba40:	e7ed      	b.n	810ba1e <_free_r+0x22>
 810ba42:	461a      	mov	r2, r3
 810ba44:	685b      	ldr	r3, [r3, #4]
 810ba46:	b10b      	cbz	r3, 810ba4c <_free_r+0x50>
 810ba48:	42a3      	cmp	r3, r4
 810ba4a:	d9fa      	bls.n	810ba42 <_free_r+0x46>
 810ba4c:	6811      	ldr	r1, [r2, #0]
 810ba4e:	1855      	adds	r5, r2, r1
 810ba50:	42a5      	cmp	r5, r4
 810ba52:	d10b      	bne.n	810ba6c <_free_r+0x70>
 810ba54:	6824      	ldr	r4, [r4, #0]
 810ba56:	4421      	add	r1, r4
 810ba58:	1854      	adds	r4, r2, r1
 810ba5a:	42a3      	cmp	r3, r4
 810ba5c:	6011      	str	r1, [r2, #0]
 810ba5e:	d1e0      	bne.n	810ba22 <_free_r+0x26>
 810ba60:	681c      	ldr	r4, [r3, #0]
 810ba62:	685b      	ldr	r3, [r3, #4]
 810ba64:	6053      	str	r3, [r2, #4]
 810ba66:	440c      	add	r4, r1
 810ba68:	6014      	str	r4, [r2, #0]
 810ba6a:	e7da      	b.n	810ba22 <_free_r+0x26>
 810ba6c:	d902      	bls.n	810ba74 <_free_r+0x78>
 810ba6e:	230c      	movs	r3, #12
 810ba70:	6003      	str	r3, [r0, #0]
 810ba72:	e7d6      	b.n	810ba22 <_free_r+0x26>
 810ba74:	6825      	ldr	r5, [r4, #0]
 810ba76:	1961      	adds	r1, r4, r5
 810ba78:	428b      	cmp	r3, r1
 810ba7a:	bf04      	itt	eq
 810ba7c:	6819      	ldreq	r1, [r3, #0]
 810ba7e:	685b      	ldreq	r3, [r3, #4]
 810ba80:	6063      	str	r3, [r4, #4]
 810ba82:	bf04      	itt	eq
 810ba84:	1949      	addeq	r1, r1, r5
 810ba86:	6021      	streq	r1, [r4, #0]
 810ba88:	6054      	str	r4, [r2, #4]
 810ba8a:	e7ca      	b.n	810ba22 <_free_r+0x26>
 810ba8c:	b003      	add	sp, #12
 810ba8e:	bd30      	pop	{r4, r5, pc}
 810ba90:	100006ac 	.word	0x100006ac

0810ba94 <malloc>:
 810ba94:	4b02      	ldr	r3, [pc, #8]	; (810baa0 <malloc+0xc>)
 810ba96:	4601      	mov	r1, r0
 810ba98:	6818      	ldr	r0, [r3, #0]
 810ba9a:	f000 b823 	b.w	810bae4 <_malloc_r>
 810ba9e:	bf00      	nop
 810baa0:	100000c8 	.word	0x100000c8

0810baa4 <sbrk_aligned>:
 810baa4:	b570      	push	{r4, r5, r6, lr}
 810baa6:	4e0e      	ldr	r6, [pc, #56]	; (810bae0 <sbrk_aligned+0x3c>)
 810baa8:	460c      	mov	r4, r1
 810baaa:	6831      	ldr	r1, [r6, #0]
 810baac:	4605      	mov	r5, r0
 810baae:	b911      	cbnz	r1, 810bab6 <sbrk_aligned+0x12>
 810bab0:	f001 fff4 	bl	810da9c <_sbrk_r>
 810bab4:	6030      	str	r0, [r6, #0]
 810bab6:	4621      	mov	r1, r4
 810bab8:	4628      	mov	r0, r5
 810baba:	f001 ffef 	bl	810da9c <_sbrk_r>
 810babe:	1c43      	adds	r3, r0, #1
 810bac0:	d00a      	beq.n	810bad8 <sbrk_aligned+0x34>
 810bac2:	1cc4      	adds	r4, r0, #3
 810bac4:	f024 0403 	bic.w	r4, r4, #3
 810bac8:	42a0      	cmp	r0, r4
 810baca:	d007      	beq.n	810badc <sbrk_aligned+0x38>
 810bacc:	1a21      	subs	r1, r4, r0
 810bace:	4628      	mov	r0, r5
 810bad0:	f001 ffe4 	bl	810da9c <_sbrk_r>
 810bad4:	3001      	adds	r0, #1
 810bad6:	d101      	bne.n	810badc <sbrk_aligned+0x38>
 810bad8:	f04f 34ff 	mov.w	r4, #4294967295
 810badc:	4620      	mov	r0, r4
 810bade:	bd70      	pop	{r4, r5, r6, pc}
 810bae0:	100006b0 	.word	0x100006b0

0810bae4 <_malloc_r>:
 810bae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bae8:	1ccd      	adds	r5, r1, #3
 810baea:	f025 0503 	bic.w	r5, r5, #3
 810baee:	3508      	adds	r5, #8
 810baf0:	2d0c      	cmp	r5, #12
 810baf2:	bf38      	it	cc
 810baf4:	250c      	movcc	r5, #12
 810baf6:	2d00      	cmp	r5, #0
 810baf8:	4607      	mov	r7, r0
 810bafa:	db01      	blt.n	810bb00 <_malloc_r+0x1c>
 810bafc:	42a9      	cmp	r1, r5
 810bafe:	d905      	bls.n	810bb0c <_malloc_r+0x28>
 810bb00:	230c      	movs	r3, #12
 810bb02:	603b      	str	r3, [r7, #0]
 810bb04:	2600      	movs	r6, #0
 810bb06:	4630      	mov	r0, r6
 810bb08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bb0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 810bbe0 <_malloc_r+0xfc>
 810bb10:	f000 f868 	bl	810bbe4 <__malloc_lock>
 810bb14:	f8d8 3000 	ldr.w	r3, [r8]
 810bb18:	461c      	mov	r4, r3
 810bb1a:	bb5c      	cbnz	r4, 810bb74 <_malloc_r+0x90>
 810bb1c:	4629      	mov	r1, r5
 810bb1e:	4638      	mov	r0, r7
 810bb20:	f7ff ffc0 	bl	810baa4 <sbrk_aligned>
 810bb24:	1c43      	adds	r3, r0, #1
 810bb26:	4604      	mov	r4, r0
 810bb28:	d155      	bne.n	810bbd6 <_malloc_r+0xf2>
 810bb2a:	f8d8 4000 	ldr.w	r4, [r8]
 810bb2e:	4626      	mov	r6, r4
 810bb30:	2e00      	cmp	r6, #0
 810bb32:	d145      	bne.n	810bbc0 <_malloc_r+0xdc>
 810bb34:	2c00      	cmp	r4, #0
 810bb36:	d048      	beq.n	810bbca <_malloc_r+0xe6>
 810bb38:	6823      	ldr	r3, [r4, #0]
 810bb3a:	4631      	mov	r1, r6
 810bb3c:	4638      	mov	r0, r7
 810bb3e:	eb04 0903 	add.w	r9, r4, r3
 810bb42:	f001 ffab 	bl	810da9c <_sbrk_r>
 810bb46:	4581      	cmp	r9, r0
 810bb48:	d13f      	bne.n	810bbca <_malloc_r+0xe6>
 810bb4a:	6821      	ldr	r1, [r4, #0]
 810bb4c:	1a6d      	subs	r5, r5, r1
 810bb4e:	4629      	mov	r1, r5
 810bb50:	4638      	mov	r0, r7
 810bb52:	f7ff ffa7 	bl	810baa4 <sbrk_aligned>
 810bb56:	3001      	adds	r0, #1
 810bb58:	d037      	beq.n	810bbca <_malloc_r+0xe6>
 810bb5a:	6823      	ldr	r3, [r4, #0]
 810bb5c:	442b      	add	r3, r5
 810bb5e:	6023      	str	r3, [r4, #0]
 810bb60:	f8d8 3000 	ldr.w	r3, [r8]
 810bb64:	2b00      	cmp	r3, #0
 810bb66:	d038      	beq.n	810bbda <_malloc_r+0xf6>
 810bb68:	685a      	ldr	r2, [r3, #4]
 810bb6a:	42a2      	cmp	r2, r4
 810bb6c:	d12b      	bne.n	810bbc6 <_malloc_r+0xe2>
 810bb6e:	2200      	movs	r2, #0
 810bb70:	605a      	str	r2, [r3, #4]
 810bb72:	e00f      	b.n	810bb94 <_malloc_r+0xb0>
 810bb74:	6822      	ldr	r2, [r4, #0]
 810bb76:	1b52      	subs	r2, r2, r5
 810bb78:	d41f      	bmi.n	810bbba <_malloc_r+0xd6>
 810bb7a:	2a0b      	cmp	r2, #11
 810bb7c:	d917      	bls.n	810bbae <_malloc_r+0xca>
 810bb7e:	1961      	adds	r1, r4, r5
 810bb80:	42a3      	cmp	r3, r4
 810bb82:	6025      	str	r5, [r4, #0]
 810bb84:	bf18      	it	ne
 810bb86:	6059      	strne	r1, [r3, #4]
 810bb88:	6863      	ldr	r3, [r4, #4]
 810bb8a:	bf08      	it	eq
 810bb8c:	f8c8 1000 	streq.w	r1, [r8]
 810bb90:	5162      	str	r2, [r4, r5]
 810bb92:	604b      	str	r3, [r1, #4]
 810bb94:	4638      	mov	r0, r7
 810bb96:	f104 060b 	add.w	r6, r4, #11
 810bb9a:	f000 f829 	bl	810bbf0 <__malloc_unlock>
 810bb9e:	f026 0607 	bic.w	r6, r6, #7
 810bba2:	1d23      	adds	r3, r4, #4
 810bba4:	1af2      	subs	r2, r6, r3
 810bba6:	d0ae      	beq.n	810bb06 <_malloc_r+0x22>
 810bba8:	1b9b      	subs	r3, r3, r6
 810bbaa:	50a3      	str	r3, [r4, r2]
 810bbac:	e7ab      	b.n	810bb06 <_malloc_r+0x22>
 810bbae:	42a3      	cmp	r3, r4
 810bbb0:	6862      	ldr	r2, [r4, #4]
 810bbb2:	d1dd      	bne.n	810bb70 <_malloc_r+0x8c>
 810bbb4:	f8c8 2000 	str.w	r2, [r8]
 810bbb8:	e7ec      	b.n	810bb94 <_malloc_r+0xb0>
 810bbba:	4623      	mov	r3, r4
 810bbbc:	6864      	ldr	r4, [r4, #4]
 810bbbe:	e7ac      	b.n	810bb1a <_malloc_r+0x36>
 810bbc0:	4634      	mov	r4, r6
 810bbc2:	6876      	ldr	r6, [r6, #4]
 810bbc4:	e7b4      	b.n	810bb30 <_malloc_r+0x4c>
 810bbc6:	4613      	mov	r3, r2
 810bbc8:	e7cc      	b.n	810bb64 <_malloc_r+0x80>
 810bbca:	230c      	movs	r3, #12
 810bbcc:	603b      	str	r3, [r7, #0]
 810bbce:	4638      	mov	r0, r7
 810bbd0:	f000 f80e 	bl	810bbf0 <__malloc_unlock>
 810bbd4:	e797      	b.n	810bb06 <_malloc_r+0x22>
 810bbd6:	6025      	str	r5, [r4, #0]
 810bbd8:	e7dc      	b.n	810bb94 <_malloc_r+0xb0>
 810bbda:	605b      	str	r3, [r3, #4]
 810bbdc:	deff      	udf	#255	; 0xff
 810bbde:	bf00      	nop
 810bbe0:	100006ac 	.word	0x100006ac

0810bbe4 <__malloc_lock>:
 810bbe4:	4801      	ldr	r0, [pc, #4]	; (810bbec <__malloc_lock+0x8>)
 810bbe6:	f7ff b884 	b.w	810acf2 <__retarget_lock_acquire_recursive>
 810bbea:	bf00      	nop
 810bbec:	100006a8 	.word	0x100006a8

0810bbf0 <__malloc_unlock>:
 810bbf0:	4801      	ldr	r0, [pc, #4]	; (810bbf8 <__malloc_unlock+0x8>)
 810bbf2:	f7ff b87f 	b.w	810acf4 <__retarget_lock_release_recursive>
 810bbf6:	bf00      	nop
 810bbf8:	100006a8 	.word	0x100006a8

0810bbfc <_Balloc>:
 810bbfc:	b570      	push	{r4, r5, r6, lr}
 810bbfe:	69c6      	ldr	r6, [r0, #28]
 810bc00:	4604      	mov	r4, r0
 810bc02:	460d      	mov	r5, r1
 810bc04:	b976      	cbnz	r6, 810bc24 <_Balloc+0x28>
 810bc06:	2010      	movs	r0, #16
 810bc08:	f7ff ff44 	bl	810ba94 <malloc>
 810bc0c:	4602      	mov	r2, r0
 810bc0e:	61e0      	str	r0, [r4, #28]
 810bc10:	b920      	cbnz	r0, 810bc1c <_Balloc+0x20>
 810bc12:	4b18      	ldr	r3, [pc, #96]	; (810bc74 <_Balloc+0x78>)
 810bc14:	4818      	ldr	r0, [pc, #96]	; (810bc78 <_Balloc+0x7c>)
 810bc16:	216b      	movs	r1, #107	; 0x6b
 810bc18:	f001 ff66 	bl	810dae8 <__assert_func>
 810bc1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810bc20:	6006      	str	r6, [r0, #0]
 810bc22:	60c6      	str	r6, [r0, #12]
 810bc24:	69e6      	ldr	r6, [r4, #28]
 810bc26:	68f3      	ldr	r3, [r6, #12]
 810bc28:	b183      	cbz	r3, 810bc4c <_Balloc+0x50>
 810bc2a:	69e3      	ldr	r3, [r4, #28]
 810bc2c:	68db      	ldr	r3, [r3, #12]
 810bc2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810bc32:	b9b8      	cbnz	r0, 810bc64 <_Balloc+0x68>
 810bc34:	2101      	movs	r1, #1
 810bc36:	fa01 f605 	lsl.w	r6, r1, r5
 810bc3a:	1d72      	adds	r2, r6, #5
 810bc3c:	0092      	lsls	r2, r2, #2
 810bc3e:	4620      	mov	r0, r4
 810bc40:	f001 ff70 	bl	810db24 <_calloc_r>
 810bc44:	b160      	cbz	r0, 810bc60 <_Balloc+0x64>
 810bc46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810bc4a:	e00e      	b.n	810bc6a <_Balloc+0x6e>
 810bc4c:	2221      	movs	r2, #33	; 0x21
 810bc4e:	2104      	movs	r1, #4
 810bc50:	4620      	mov	r0, r4
 810bc52:	f001 ff67 	bl	810db24 <_calloc_r>
 810bc56:	69e3      	ldr	r3, [r4, #28]
 810bc58:	60f0      	str	r0, [r6, #12]
 810bc5a:	68db      	ldr	r3, [r3, #12]
 810bc5c:	2b00      	cmp	r3, #0
 810bc5e:	d1e4      	bne.n	810bc2a <_Balloc+0x2e>
 810bc60:	2000      	movs	r0, #0
 810bc62:	bd70      	pop	{r4, r5, r6, pc}
 810bc64:	6802      	ldr	r2, [r0, #0]
 810bc66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810bc6a:	2300      	movs	r3, #0
 810bc6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810bc70:	e7f7      	b.n	810bc62 <_Balloc+0x66>
 810bc72:	bf00      	nop
 810bc74:	0810e8b6 	.word	0x0810e8b6
 810bc78:	0810e936 	.word	0x0810e936

0810bc7c <_Bfree>:
 810bc7c:	b570      	push	{r4, r5, r6, lr}
 810bc7e:	69c6      	ldr	r6, [r0, #28]
 810bc80:	4605      	mov	r5, r0
 810bc82:	460c      	mov	r4, r1
 810bc84:	b976      	cbnz	r6, 810bca4 <_Bfree+0x28>
 810bc86:	2010      	movs	r0, #16
 810bc88:	f7ff ff04 	bl	810ba94 <malloc>
 810bc8c:	4602      	mov	r2, r0
 810bc8e:	61e8      	str	r0, [r5, #28]
 810bc90:	b920      	cbnz	r0, 810bc9c <_Bfree+0x20>
 810bc92:	4b09      	ldr	r3, [pc, #36]	; (810bcb8 <_Bfree+0x3c>)
 810bc94:	4809      	ldr	r0, [pc, #36]	; (810bcbc <_Bfree+0x40>)
 810bc96:	218f      	movs	r1, #143	; 0x8f
 810bc98:	f001 ff26 	bl	810dae8 <__assert_func>
 810bc9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810bca0:	6006      	str	r6, [r0, #0]
 810bca2:	60c6      	str	r6, [r0, #12]
 810bca4:	b13c      	cbz	r4, 810bcb6 <_Bfree+0x3a>
 810bca6:	69eb      	ldr	r3, [r5, #28]
 810bca8:	6862      	ldr	r2, [r4, #4]
 810bcaa:	68db      	ldr	r3, [r3, #12]
 810bcac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 810bcb0:	6021      	str	r1, [r4, #0]
 810bcb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810bcb6:	bd70      	pop	{r4, r5, r6, pc}
 810bcb8:	0810e8b6 	.word	0x0810e8b6
 810bcbc:	0810e936 	.word	0x0810e936

0810bcc0 <__multadd>:
 810bcc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810bcc4:	690d      	ldr	r5, [r1, #16]
 810bcc6:	4607      	mov	r7, r0
 810bcc8:	460c      	mov	r4, r1
 810bcca:	461e      	mov	r6, r3
 810bccc:	f101 0c14 	add.w	ip, r1, #20
 810bcd0:	2000      	movs	r0, #0
 810bcd2:	f8dc 3000 	ldr.w	r3, [ip]
 810bcd6:	b299      	uxth	r1, r3
 810bcd8:	fb02 6101 	mla	r1, r2, r1, r6
 810bcdc:	0c1e      	lsrs	r6, r3, #16
 810bcde:	0c0b      	lsrs	r3, r1, #16
 810bce0:	fb02 3306 	mla	r3, r2, r6, r3
 810bce4:	b289      	uxth	r1, r1
 810bce6:	3001      	adds	r0, #1
 810bce8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810bcec:	4285      	cmp	r5, r0
 810bcee:	f84c 1b04 	str.w	r1, [ip], #4
 810bcf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810bcf6:	dcec      	bgt.n	810bcd2 <__multadd+0x12>
 810bcf8:	b30e      	cbz	r6, 810bd3e <__multadd+0x7e>
 810bcfa:	68a3      	ldr	r3, [r4, #8]
 810bcfc:	42ab      	cmp	r3, r5
 810bcfe:	dc19      	bgt.n	810bd34 <__multadd+0x74>
 810bd00:	6861      	ldr	r1, [r4, #4]
 810bd02:	4638      	mov	r0, r7
 810bd04:	3101      	adds	r1, #1
 810bd06:	f7ff ff79 	bl	810bbfc <_Balloc>
 810bd0a:	4680      	mov	r8, r0
 810bd0c:	b928      	cbnz	r0, 810bd1a <__multadd+0x5a>
 810bd0e:	4602      	mov	r2, r0
 810bd10:	4b0c      	ldr	r3, [pc, #48]	; (810bd44 <__multadd+0x84>)
 810bd12:	480d      	ldr	r0, [pc, #52]	; (810bd48 <__multadd+0x88>)
 810bd14:	21ba      	movs	r1, #186	; 0xba
 810bd16:	f001 fee7 	bl	810dae8 <__assert_func>
 810bd1a:	6922      	ldr	r2, [r4, #16]
 810bd1c:	3202      	adds	r2, #2
 810bd1e:	f104 010c 	add.w	r1, r4, #12
 810bd22:	0092      	lsls	r2, r2, #2
 810bd24:	300c      	adds	r0, #12
 810bd26:	f001 fec9 	bl	810dabc <memcpy>
 810bd2a:	4621      	mov	r1, r4
 810bd2c:	4638      	mov	r0, r7
 810bd2e:	f7ff ffa5 	bl	810bc7c <_Bfree>
 810bd32:	4644      	mov	r4, r8
 810bd34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810bd38:	3501      	adds	r5, #1
 810bd3a:	615e      	str	r6, [r3, #20]
 810bd3c:	6125      	str	r5, [r4, #16]
 810bd3e:	4620      	mov	r0, r4
 810bd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810bd44:	0810e925 	.word	0x0810e925
 810bd48:	0810e936 	.word	0x0810e936

0810bd4c <__s2b>:
 810bd4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810bd50:	460c      	mov	r4, r1
 810bd52:	4615      	mov	r5, r2
 810bd54:	461f      	mov	r7, r3
 810bd56:	2209      	movs	r2, #9
 810bd58:	3308      	adds	r3, #8
 810bd5a:	4606      	mov	r6, r0
 810bd5c:	fb93 f3f2 	sdiv	r3, r3, r2
 810bd60:	2100      	movs	r1, #0
 810bd62:	2201      	movs	r2, #1
 810bd64:	429a      	cmp	r2, r3
 810bd66:	db09      	blt.n	810bd7c <__s2b+0x30>
 810bd68:	4630      	mov	r0, r6
 810bd6a:	f7ff ff47 	bl	810bbfc <_Balloc>
 810bd6e:	b940      	cbnz	r0, 810bd82 <__s2b+0x36>
 810bd70:	4602      	mov	r2, r0
 810bd72:	4b19      	ldr	r3, [pc, #100]	; (810bdd8 <__s2b+0x8c>)
 810bd74:	4819      	ldr	r0, [pc, #100]	; (810bddc <__s2b+0x90>)
 810bd76:	21d3      	movs	r1, #211	; 0xd3
 810bd78:	f001 feb6 	bl	810dae8 <__assert_func>
 810bd7c:	0052      	lsls	r2, r2, #1
 810bd7e:	3101      	adds	r1, #1
 810bd80:	e7f0      	b.n	810bd64 <__s2b+0x18>
 810bd82:	9b08      	ldr	r3, [sp, #32]
 810bd84:	6143      	str	r3, [r0, #20]
 810bd86:	2d09      	cmp	r5, #9
 810bd88:	f04f 0301 	mov.w	r3, #1
 810bd8c:	6103      	str	r3, [r0, #16]
 810bd8e:	dd16      	ble.n	810bdbe <__s2b+0x72>
 810bd90:	f104 0909 	add.w	r9, r4, #9
 810bd94:	46c8      	mov	r8, r9
 810bd96:	442c      	add	r4, r5
 810bd98:	f818 3b01 	ldrb.w	r3, [r8], #1
 810bd9c:	4601      	mov	r1, r0
 810bd9e:	3b30      	subs	r3, #48	; 0x30
 810bda0:	220a      	movs	r2, #10
 810bda2:	4630      	mov	r0, r6
 810bda4:	f7ff ff8c 	bl	810bcc0 <__multadd>
 810bda8:	45a0      	cmp	r8, r4
 810bdaa:	d1f5      	bne.n	810bd98 <__s2b+0x4c>
 810bdac:	f1a5 0408 	sub.w	r4, r5, #8
 810bdb0:	444c      	add	r4, r9
 810bdb2:	1b2d      	subs	r5, r5, r4
 810bdb4:	1963      	adds	r3, r4, r5
 810bdb6:	42bb      	cmp	r3, r7
 810bdb8:	db04      	blt.n	810bdc4 <__s2b+0x78>
 810bdba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810bdbe:	340a      	adds	r4, #10
 810bdc0:	2509      	movs	r5, #9
 810bdc2:	e7f6      	b.n	810bdb2 <__s2b+0x66>
 810bdc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 810bdc8:	4601      	mov	r1, r0
 810bdca:	3b30      	subs	r3, #48	; 0x30
 810bdcc:	220a      	movs	r2, #10
 810bdce:	4630      	mov	r0, r6
 810bdd0:	f7ff ff76 	bl	810bcc0 <__multadd>
 810bdd4:	e7ee      	b.n	810bdb4 <__s2b+0x68>
 810bdd6:	bf00      	nop
 810bdd8:	0810e925 	.word	0x0810e925
 810bddc:	0810e936 	.word	0x0810e936

0810bde0 <__hi0bits>:
 810bde0:	0c03      	lsrs	r3, r0, #16
 810bde2:	041b      	lsls	r3, r3, #16
 810bde4:	b9d3      	cbnz	r3, 810be1c <__hi0bits+0x3c>
 810bde6:	0400      	lsls	r0, r0, #16
 810bde8:	2310      	movs	r3, #16
 810bdea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810bdee:	bf04      	itt	eq
 810bdf0:	0200      	lsleq	r0, r0, #8
 810bdf2:	3308      	addeq	r3, #8
 810bdf4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810bdf8:	bf04      	itt	eq
 810bdfa:	0100      	lsleq	r0, r0, #4
 810bdfc:	3304      	addeq	r3, #4
 810bdfe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 810be02:	bf04      	itt	eq
 810be04:	0080      	lsleq	r0, r0, #2
 810be06:	3302      	addeq	r3, #2
 810be08:	2800      	cmp	r0, #0
 810be0a:	db05      	blt.n	810be18 <__hi0bits+0x38>
 810be0c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 810be10:	f103 0301 	add.w	r3, r3, #1
 810be14:	bf08      	it	eq
 810be16:	2320      	moveq	r3, #32
 810be18:	4618      	mov	r0, r3
 810be1a:	4770      	bx	lr
 810be1c:	2300      	movs	r3, #0
 810be1e:	e7e4      	b.n	810bdea <__hi0bits+0xa>

0810be20 <__lo0bits>:
 810be20:	6803      	ldr	r3, [r0, #0]
 810be22:	f013 0207 	ands.w	r2, r3, #7
 810be26:	d00c      	beq.n	810be42 <__lo0bits+0x22>
 810be28:	07d9      	lsls	r1, r3, #31
 810be2a:	d422      	bmi.n	810be72 <__lo0bits+0x52>
 810be2c:	079a      	lsls	r2, r3, #30
 810be2e:	bf49      	itett	mi
 810be30:	085b      	lsrmi	r3, r3, #1
 810be32:	089b      	lsrpl	r3, r3, #2
 810be34:	6003      	strmi	r3, [r0, #0]
 810be36:	2201      	movmi	r2, #1
 810be38:	bf5c      	itt	pl
 810be3a:	6003      	strpl	r3, [r0, #0]
 810be3c:	2202      	movpl	r2, #2
 810be3e:	4610      	mov	r0, r2
 810be40:	4770      	bx	lr
 810be42:	b299      	uxth	r1, r3
 810be44:	b909      	cbnz	r1, 810be4a <__lo0bits+0x2a>
 810be46:	0c1b      	lsrs	r3, r3, #16
 810be48:	2210      	movs	r2, #16
 810be4a:	b2d9      	uxtb	r1, r3
 810be4c:	b909      	cbnz	r1, 810be52 <__lo0bits+0x32>
 810be4e:	3208      	adds	r2, #8
 810be50:	0a1b      	lsrs	r3, r3, #8
 810be52:	0719      	lsls	r1, r3, #28
 810be54:	bf04      	itt	eq
 810be56:	091b      	lsreq	r3, r3, #4
 810be58:	3204      	addeq	r2, #4
 810be5a:	0799      	lsls	r1, r3, #30
 810be5c:	bf04      	itt	eq
 810be5e:	089b      	lsreq	r3, r3, #2
 810be60:	3202      	addeq	r2, #2
 810be62:	07d9      	lsls	r1, r3, #31
 810be64:	d403      	bmi.n	810be6e <__lo0bits+0x4e>
 810be66:	085b      	lsrs	r3, r3, #1
 810be68:	f102 0201 	add.w	r2, r2, #1
 810be6c:	d003      	beq.n	810be76 <__lo0bits+0x56>
 810be6e:	6003      	str	r3, [r0, #0]
 810be70:	e7e5      	b.n	810be3e <__lo0bits+0x1e>
 810be72:	2200      	movs	r2, #0
 810be74:	e7e3      	b.n	810be3e <__lo0bits+0x1e>
 810be76:	2220      	movs	r2, #32
 810be78:	e7e1      	b.n	810be3e <__lo0bits+0x1e>
	...

0810be7c <__i2b>:
 810be7c:	b510      	push	{r4, lr}
 810be7e:	460c      	mov	r4, r1
 810be80:	2101      	movs	r1, #1
 810be82:	f7ff febb 	bl	810bbfc <_Balloc>
 810be86:	4602      	mov	r2, r0
 810be88:	b928      	cbnz	r0, 810be96 <__i2b+0x1a>
 810be8a:	4b05      	ldr	r3, [pc, #20]	; (810bea0 <__i2b+0x24>)
 810be8c:	4805      	ldr	r0, [pc, #20]	; (810bea4 <__i2b+0x28>)
 810be8e:	f240 1145 	movw	r1, #325	; 0x145
 810be92:	f001 fe29 	bl	810dae8 <__assert_func>
 810be96:	2301      	movs	r3, #1
 810be98:	6144      	str	r4, [r0, #20]
 810be9a:	6103      	str	r3, [r0, #16]
 810be9c:	bd10      	pop	{r4, pc}
 810be9e:	bf00      	nop
 810bea0:	0810e925 	.word	0x0810e925
 810bea4:	0810e936 	.word	0x0810e936

0810bea8 <__multiply>:
 810bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810beac:	4691      	mov	r9, r2
 810beae:	690a      	ldr	r2, [r1, #16]
 810beb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810beb4:	429a      	cmp	r2, r3
 810beb6:	bfb8      	it	lt
 810beb8:	460b      	movlt	r3, r1
 810beba:	460c      	mov	r4, r1
 810bebc:	bfbc      	itt	lt
 810bebe:	464c      	movlt	r4, r9
 810bec0:	4699      	movlt	r9, r3
 810bec2:	6927      	ldr	r7, [r4, #16]
 810bec4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 810bec8:	68a3      	ldr	r3, [r4, #8]
 810beca:	6861      	ldr	r1, [r4, #4]
 810becc:	eb07 060a 	add.w	r6, r7, sl
 810bed0:	42b3      	cmp	r3, r6
 810bed2:	b085      	sub	sp, #20
 810bed4:	bfb8      	it	lt
 810bed6:	3101      	addlt	r1, #1
 810bed8:	f7ff fe90 	bl	810bbfc <_Balloc>
 810bedc:	b930      	cbnz	r0, 810beec <__multiply+0x44>
 810bede:	4602      	mov	r2, r0
 810bee0:	4b44      	ldr	r3, [pc, #272]	; (810bff4 <__multiply+0x14c>)
 810bee2:	4845      	ldr	r0, [pc, #276]	; (810bff8 <__multiply+0x150>)
 810bee4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 810bee8:	f001 fdfe 	bl	810dae8 <__assert_func>
 810beec:	f100 0514 	add.w	r5, r0, #20
 810bef0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810bef4:	462b      	mov	r3, r5
 810bef6:	2200      	movs	r2, #0
 810bef8:	4543      	cmp	r3, r8
 810befa:	d321      	bcc.n	810bf40 <__multiply+0x98>
 810befc:	f104 0314 	add.w	r3, r4, #20
 810bf00:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 810bf04:	f109 0314 	add.w	r3, r9, #20
 810bf08:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 810bf0c:	9202      	str	r2, [sp, #8]
 810bf0e:	1b3a      	subs	r2, r7, r4
 810bf10:	3a15      	subs	r2, #21
 810bf12:	f022 0203 	bic.w	r2, r2, #3
 810bf16:	3204      	adds	r2, #4
 810bf18:	f104 0115 	add.w	r1, r4, #21
 810bf1c:	428f      	cmp	r7, r1
 810bf1e:	bf38      	it	cc
 810bf20:	2204      	movcc	r2, #4
 810bf22:	9201      	str	r2, [sp, #4]
 810bf24:	9a02      	ldr	r2, [sp, #8]
 810bf26:	9303      	str	r3, [sp, #12]
 810bf28:	429a      	cmp	r2, r3
 810bf2a:	d80c      	bhi.n	810bf46 <__multiply+0x9e>
 810bf2c:	2e00      	cmp	r6, #0
 810bf2e:	dd03      	ble.n	810bf38 <__multiply+0x90>
 810bf30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810bf34:	2b00      	cmp	r3, #0
 810bf36:	d05b      	beq.n	810bff0 <__multiply+0x148>
 810bf38:	6106      	str	r6, [r0, #16]
 810bf3a:	b005      	add	sp, #20
 810bf3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810bf40:	f843 2b04 	str.w	r2, [r3], #4
 810bf44:	e7d8      	b.n	810bef8 <__multiply+0x50>
 810bf46:	f8b3 a000 	ldrh.w	sl, [r3]
 810bf4a:	f1ba 0f00 	cmp.w	sl, #0
 810bf4e:	d024      	beq.n	810bf9a <__multiply+0xf2>
 810bf50:	f104 0e14 	add.w	lr, r4, #20
 810bf54:	46a9      	mov	r9, r5
 810bf56:	f04f 0c00 	mov.w	ip, #0
 810bf5a:	f85e 2b04 	ldr.w	r2, [lr], #4
 810bf5e:	f8d9 1000 	ldr.w	r1, [r9]
 810bf62:	fa1f fb82 	uxth.w	fp, r2
 810bf66:	b289      	uxth	r1, r1
 810bf68:	fb0a 110b 	mla	r1, sl, fp, r1
 810bf6c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 810bf70:	f8d9 2000 	ldr.w	r2, [r9]
 810bf74:	4461      	add	r1, ip
 810bf76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810bf7a:	fb0a c20b 	mla	r2, sl, fp, ip
 810bf7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 810bf82:	b289      	uxth	r1, r1
 810bf84:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810bf88:	4577      	cmp	r7, lr
 810bf8a:	f849 1b04 	str.w	r1, [r9], #4
 810bf8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810bf92:	d8e2      	bhi.n	810bf5a <__multiply+0xb2>
 810bf94:	9a01      	ldr	r2, [sp, #4]
 810bf96:	f845 c002 	str.w	ip, [r5, r2]
 810bf9a:	9a03      	ldr	r2, [sp, #12]
 810bf9c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 810bfa0:	3304      	adds	r3, #4
 810bfa2:	f1b9 0f00 	cmp.w	r9, #0
 810bfa6:	d021      	beq.n	810bfec <__multiply+0x144>
 810bfa8:	6829      	ldr	r1, [r5, #0]
 810bfaa:	f104 0c14 	add.w	ip, r4, #20
 810bfae:	46ae      	mov	lr, r5
 810bfb0:	f04f 0a00 	mov.w	sl, #0
 810bfb4:	f8bc b000 	ldrh.w	fp, [ip]
 810bfb8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 810bfbc:	fb09 220b 	mla	r2, r9, fp, r2
 810bfc0:	4452      	add	r2, sl
 810bfc2:	b289      	uxth	r1, r1
 810bfc4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810bfc8:	f84e 1b04 	str.w	r1, [lr], #4
 810bfcc:	f85c 1b04 	ldr.w	r1, [ip], #4
 810bfd0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810bfd4:	f8be 1000 	ldrh.w	r1, [lr]
 810bfd8:	fb09 110a 	mla	r1, r9, sl, r1
 810bfdc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 810bfe0:	4567      	cmp	r7, ip
 810bfe2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 810bfe6:	d8e5      	bhi.n	810bfb4 <__multiply+0x10c>
 810bfe8:	9a01      	ldr	r2, [sp, #4]
 810bfea:	50a9      	str	r1, [r5, r2]
 810bfec:	3504      	adds	r5, #4
 810bfee:	e799      	b.n	810bf24 <__multiply+0x7c>
 810bff0:	3e01      	subs	r6, #1
 810bff2:	e79b      	b.n	810bf2c <__multiply+0x84>
 810bff4:	0810e925 	.word	0x0810e925
 810bff8:	0810e936 	.word	0x0810e936

0810bffc <__pow5mult>:
 810bffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810c000:	4615      	mov	r5, r2
 810c002:	f012 0203 	ands.w	r2, r2, #3
 810c006:	4606      	mov	r6, r0
 810c008:	460f      	mov	r7, r1
 810c00a:	d007      	beq.n	810c01c <__pow5mult+0x20>
 810c00c:	4c25      	ldr	r4, [pc, #148]	; (810c0a4 <__pow5mult+0xa8>)
 810c00e:	3a01      	subs	r2, #1
 810c010:	2300      	movs	r3, #0
 810c012:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810c016:	f7ff fe53 	bl	810bcc0 <__multadd>
 810c01a:	4607      	mov	r7, r0
 810c01c:	10ad      	asrs	r5, r5, #2
 810c01e:	d03d      	beq.n	810c09c <__pow5mult+0xa0>
 810c020:	69f4      	ldr	r4, [r6, #28]
 810c022:	b97c      	cbnz	r4, 810c044 <__pow5mult+0x48>
 810c024:	2010      	movs	r0, #16
 810c026:	f7ff fd35 	bl	810ba94 <malloc>
 810c02a:	4602      	mov	r2, r0
 810c02c:	61f0      	str	r0, [r6, #28]
 810c02e:	b928      	cbnz	r0, 810c03c <__pow5mult+0x40>
 810c030:	4b1d      	ldr	r3, [pc, #116]	; (810c0a8 <__pow5mult+0xac>)
 810c032:	481e      	ldr	r0, [pc, #120]	; (810c0ac <__pow5mult+0xb0>)
 810c034:	f240 11b3 	movw	r1, #435	; 0x1b3
 810c038:	f001 fd56 	bl	810dae8 <__assert_func>
 810c03c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 810c040:	6004      	str	r4, [r0, #0]
 810c042:	60c4      	str	r4, [r0, #12]
 810c044:	f8d6 801c 	ldr.w	r8, [r6, #28]
 810c048:	f8d8 4008 	ldr.w	r4, [r8, #8]
 810c04c:	b94c      	cbnz	r4, 810c062 <__pow5mult+0x66>
 810c04e:	f240 2171 	movw	r1, #625	; 0x271
 810c052:	4630      	mov	r0, r6
 810c054:	f7ff ff12 	bl	810be7c <__i2b>
 810c058:	2300      	movs	r3, #0
 810c05a:	f8c8 0008 	str.w	r0, [r8, #8]
 810c05e:	4604      	mov	r4, r0
 810c060:	6003      	str	r3, [r0, #0]
 810c062:	f04f 0900 	mov.w	r9, #0
 810c066:	07eb      	lsls	r3, r5, #31
 810c068:	d50a      	bpl.n	810c080 <__pow5mult+0x84>
 810c06a:	4639      	mov	r1, r7
 810c06c:	4622      	mov	r2, r4
 810c06e:	4630      	mov	r0, r6
 810c070:	f7ff ff1a 	bl	810bea8 <__multiply>
 810c074:	4639      	mov	r1, r7
 810c076:	4680      	mov	r8, r0
 810c078:	4630      	mov	r0, r6
 810c07a:	f7ff fdff 	bl	810bc7c <_Bfree>
 810c07e:	4647      	mov	r7, r8
 810c080:	106d      	asrs	r5, r5, #1
 810c082:	d00b      	beq.n	810c09c <__pow5mult+0xa0>
 810c084:	6820      	ldr	r0, [r4, #0]
 810c086:	b938      	cbnz	r0, 810c098 <__pow5mult+0x9c>
 810c088:	4622      	mov	r2, r4
 810c08a:	4621      	mov	r1, r4
 810c08c:	4630      	mov	r0, r6
 810c08e:	f7ff ff0b 	bl	810bea8 <__multiply>
 810c092:	6020      	str	r0, [r4, #0]
 810c094:	f8c0 9000 	str.w	r9, [r0]
 810c098:	4604      	mov	r4, r0
 810c09a:	e7e4      	b.n	810c066 <__pow5mult+0x6a>
 810c09c:	4638      	mov	r0, r7
 810c09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810c0a2:	bf00      	nop
 810c0a4:	0810ea80 	.word	0x0810ea80
 810c0a8:	0810e8b6 	.word	0x0810e8b6
 810c0ac:	0810e936 	.word	0x0810e936

0810c0b0 <__lshift>:
 810c0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810c0b4:	460c      	mov	r4, r1
 810c0b6:	6849      	ldr	r1, [r1, #4]
 810c0b8:	6923      	ldr	r3, [r4, #16]
 810c0ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 810c0be:	68a3      	ldr	r3, [r4, #8]
 810c0c0:	4607      	mov	r7, r0
 810c0c2:	4691      	mov	r9, r2
 810c0c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 810c0c8:	f108 0601 	add.w	r6, r8, #1
 810c0cc:	42b3      	cmp	r3, r6
 810c0ce:	db0b      	blt.n	810c0e8 <__lshift+0x38>
 810c0d0:	4638      	mov	r0, r7
 810c0d2:	f7ff fd93 	bl	810bbfc <_Balloc>
 810c0d6:	4605      	mov	r5, r0
 810c0d8:	b948      	cbnz	r0, 810c0ee <__lshift+0x3e>
 810c0da:	4602      	mov	r2, r0
 810c0dc:	4b28      	ldr	r3, [pc, #160]	; (810c180 <__lshift+0xd0>)
 810c0de:	4829      	ldr	r0, [pc, #164]	; (810c184 <__lshift+0xd4>)
 810c0e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 810c0e4:	f001 fd00 	bl	810dae8 <__assert_func>
 810c0e8:	3101      	adds	r1, #1
 810c0ea:	005b      	lsls	r3, r3, #1
 810c0ec:	e7ee      	b.n	810c0cc <__lshift+0x1c>
 810c0ee:	2300      	movs	r3, #0
 810c0f0:	f100 0114 	add.w	r1, r0, #20
 810c0f4:	f100 0210 	add.w	r2, r0, #16
 810c0f8:	4618      	mov	r0, r3
 810c0fa:	4553      	cmp	r3, sl
 810c0fc:	db33      	blt.n	810c166 <__lshift+0xb6>
 810c0fe:	6920      	ldr	r0, [r4, #16]
 810c100:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810c104:	f104 0314 	add.w	r3, r4, #20
 810c108:	f019 091f 	ands.w	r9, r9, #31
 810c10c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 810c110:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810c114:	d02b      	beq.n	810c16e <__lshift+0xbe>
 810c116:	f1c9 0e20 	rsb	lr, r9, #32
 810c11a:	468a      	mov	sl, r1
 810c11c:	2200      	movs	r2, #0
 810c11e:	6818      	ldr	r0, [r3, #0]
 810c120:	fa00 f009 	lsl.w	r0, r0, r9
 810c124:	4310      	orrs	r0, r2
 810c126:	f84a 0b04 	str.w	r0, [sl], #4
 810c12a:	f853 2b04 	ldr.w	r2, [r3], #4
 810c12e:	459c      	cmp	ip, r3
 810c130:	fa22 f20e 	lsr.w	r2, r2, lr
 810c134:	d8f3      	bhi.n	810c11e <__lshift+0x6e>
 810c136:	ebac 0304 	sub.w	r3, ip, r4
 810c13a:	3b15      	subs	r3, #21
 810c13c:	f023 0303 	bic.w	r3, r3, #3
 810c140:	3304      	adds	r3, #4
 810c142:	f104 0015 	add.w	r0, r4, #21
 810c146:	4584      	cmp	ip, r0
 810c148:	bf38      	it	cc
 810c14a:	2304      	movcc	r3, #4
 810c14c:	50ca      	str	r2, [r1, r3]
 810c14e:	b10a      	cbz	r2, 810c154 <__lshift+0xa4>
 810c150:	f108 0602 	add.w	r6, r8, #2
 810c154:	3e01      	subs	r6, #1
 810c156:	4638      	mov	r0, r7
 810c158:	612e      	str	r6, [r5, #16]
 810c15a:	4621      	mov	r1, r4
 810c15c:	f7ff fd8e 	bl	810bc7c <_Bfree>
 810c160:	4628      	mov	r0, r5
 810c162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810c166:	f842 0f04 	str.w	r0, [r2, #4]!
 810c16a:	3301      	adds	r3, #1
 810c16c:	e7c5      	b.n	810c0fa <__lshift+0x4a>
 810c16e:	3904      	subs	r1, #4
 810c170:	f853 2b04 	ldr.w	r2, [r3], #4
 810c174:	f841 2f04 	str.w	r2, [r1, #4]!
 810c178:	459c      	cmp	ip, r3
 810c17a:	d8f9      	bhi.n	810c170 <__lshift+0xc0>
 810c17c:	e7ea      	b.n	810c154 <__lshift+0xa4>
 810c17e:	bf00      	nop
 810c180:	0810e925 	.word	0x0810e925
 810c184:	0810e936 	.word	0x0810e936

0810c188 <__mcmp>:
 810c188:	b530      	push	{r4, r5, lr}
 810c18a:	6902      	ldr	r2, [r0, #16]
 810c18c:	690c      	ldr	r4, [r1, #16]
 810c18e:	1b12      	subs	r2, r2, r4
 810c190:	d10e      	bne.n	810c1b0 <__mcmp+0x28>
 810c192:	f100 0314 	add.w	r3, r0, #20
 810c196:	3114      	adds	r1, #20
 810c198:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 810c19c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 810c1a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 810c1a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 810c1a8:	42a5      	cmp	r5, r4
 810c1aa:	d003      	beq.n	810c1b4 <__mcmp+0x2c>
 810c1ac:	d305      	bcc.n	810c1ba <__mcmp+0x32>
 810c1ae:	2201      	movs	r2, #1
 810c1b0:	4610      	mov	r0, r2
 810c1b2:	bd30      	pop	{r4, r5, pc}
 810c1b4:	4283      	cmp	r3, r0
 810c1b6:	d3f3      	bcc.n	810c1a0 <__mcmp+0x18>
 810c1b8:	e7fa      	b.n	810c1b0 <__mcmp+0x28>
 810c1ba:	f04f 32ff 	mov.w	r2, #4294967295
 810c1be:	e7f7      	b.n	810c1b0 <__mcmp+0x28>

0810c1c0 <__mdiff>:
 810c1c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c1c4:	460c      	mov	r4, r1
 810c1c6:	4606      	mov	r6, r0
 810c1c8:	4611      	mov	r1, r2
 810c1ca:	4620      	mov	r0, r4
 810c1cc:	4690      	mov	r8, r2
 810c1ce:	f7ff ffdb 	bl	810c188 <__mcmp>
 810c1d2:	1e05      	subs	r5, r0, #0
 810c1d4:	d110      	bne.n	810c1f8 <__mdiff+0x38>
 810c1d6:	4629      	mov	r1, r5
 810c1d8:	4630      	mov	r0, r6
 810c1da:	f7ff fd0f 	bl	810bbfc <_Balloc>
 810c1de:	b930      	cbnz	r0, 810c1ee <__mdiff+0x2e>
 810c1e0:	4b3a      	ldr	r3, [pc, #232]	; (810c2cc <__mdiff+0x10c>)
 810c1e2:	4602      	mov	r2, r0
 810c1e4:	f240 2137 	movw	r1, #567	; 0x237
 810c1e8:	4839      	ldr	r0, [pc, #228]	; (810c2d0 <__mdiff+0x110>)
 810c1ea:	f001 fc7d 	bl	810dae8 <__assert_func>
 810c1ee:	2301      	movs	r3, #1
 810c1f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810c1f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c1f8:	bfa4      	itt	ge
 810c1fa:	4643      	movge	r3, r8
 810c1fc:	46a0      	movge	r8, r4
 810c1fe:	4630      	mov	r0, r6
 810c200:	f8d8 1004 	ldr.w	r1, [r8, #4]
 810c204:	bfa6      	itte	ge
 810c206:	461c      	movge	r4, r3
 810c208:	2500      	movge	r5, #0
 810c20a:	2501      	movlt	r5, #1
 810c20c:	f7ff fcf6 	bl	810bbfc <_Balloc>
 810c210:	b920      	cbnz	r0, 810c21c <__mdiff+0x5c>
 810c212:	4b2e      	ldr	r3, [pc, #184]	; (810c2cc <__mdiff+0x10c>)
 810c214:	4602      	mov	r2, r0
 810c216:	f240 2145 	movw	r1, #581	; 0x245
 810c21a:	e7e5      	b.n	810c1e8 <__mdiff+0x28>
 810c21c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 810c220:	6926      	ldr	r6, [r4, #16]
 810c222:	60c5      	str	r5, [r0, #12]
 810c224:	f104 0914 	add.w	r9, r4, #20
 810c228:	f108 0514 	add.w	r5, r8, #20
 810c22c:	f100 0e14 	add.w	lr, r0, #20
 810c230:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 810c234:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810c238:	f108 0210 	add.w	r2, r8, #16
 810c23c:	46f2      	mov	sl, lr
 810c23e:	2100      	movs	r1, #0
 810c240:	f859 3b04 	ldr.w	r3, [r9], #4
 810c244:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810c248:	fa11 f88b 	uxtah	r8, r1, fp
 810c24c:	b299      	uxth	r1, r3
 810c24e:	0c1b      	lsrs	r3, r3, #16
 810c250:	eba8 0801 	sub.w	r8, r8, r1
 810c254:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810c258:	eb03 4328 	add.w	r3, r3, r8, asr #16
 810c25c:	fa1f f888 	uxth.w	r8, r8
 810c260:	1419      	asrs	r1, r3, #16
 810c262:	454e      	cmp	r6, r9
 810c264:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810c268:	f84a 3b04 	str.w	r3, [sl], #4
 810c26c:	d8e8      	bhi.n	810c240 <__mdiff+0x80>
 810c26e:	1b33      	subs	r3, r6, r4
 810c270:	3b15      	subs	r3, #21
 810c272:	f023 0303 	bic.w	r3, r3, #3
 810c276:	3304      	adds	r3, #4
 810c278:	3415      	adds	r4, #21
 810c27a:	42a6      	cmp	r6, r4
 810c27c:	bf38      	it	cc
 810c27e:	2304      	movcc	r3, #4
 810c280:	441d      	add	r5, r3
 810c282:	4473      	add	r3, lr
 810c284:	469e      	mov	lr, r3
 810c286:	462e      	mov	r6, r5
 810c288:	4566      	cmp	r6, ip
 810c28a:	d30e      	bcc.n	810c2aa <__mdiff+0xea>
 810c28c:	f10c 0203 	add.w	r2, ip, #3
 810c290:	1b52      	subs	r2, r2, r5
 810c292:	f022 0203 	bic.w	r2, r2, #3
 810c296:	3d03      	subs	r5, #3
 810c298:	45ac      	cmp	ip, r5
 810c29a:	bf38      	it	cc
 810c29c:	2200      	movcc	r2, #0
 810c29e:	4413      	add	r3, r2
 810c2a0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 810c2a4:	b17a      	cbz	r2, 810c2c6 <__mdiff+0x106>
 810c2a6:	6107      	str	r7, [r0, #16]
 810c2a8:	e7a4      	b.n	810c1f4 <__mdiff+0x34>
 810c2aa:	f856 8b04 	ldr.w	r8, [r6], #4
 810c2ae:	fa11 f288 	uxtah	r2, r1, r8
 810c2b2:	1414      	asrs	r4, r2, #16
 810c2b4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 810c2b8:	b292      	uxth	r2, r2
 810c2ba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 810c2be:	f84e 2b04 	str.w	r2, [lr], #4
 810c2c2:	1421      	asrs	r1, r4, #16
 810c2c4:	e7e0      	b.n	810c288 <__mdiff+0xc8>
 810c2c6:	3f01      	subs	r7, #1
 810c2c8:	e7ea      	b.n	810c2a0 <__mdiff+0xe0>
 810c2ca:	bf00      	nop
 810c2cc:	0810e925 	.word	0x0810e925
 810c2d0:	0810e936 	.word	0x0810e936

0810c2d4 <__ulp>:
 810c2d4:	b082      	sub	sp, #8
 810c2d6:	ed8d 0b00 	vstr	d0, [sp]
 810c2da:	9a01      	ldr	r2, [sp, #4]
 810c2dc:	4b0f      	ldr	r3, [pc, #60]	; (810c31c <__ulp+0x48>)
 810c2de:	4013      	ands	r3, r2
 810c2e0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 810c2e4:	2b00      	cmp	r3, #0
 810c2e6:	dc08      	bgt.n	810c2fa <__ulp+0x26>
 810c2e8:	425b      	negs	r3, r3
 810c2ea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 810c2ee:	ea4f 5223 	mov.w	r2, r3, asr #20
 810c2f2:	da04      	bge.n	810c2fe <__ulp+0x2a>
 810c2f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810c2f8:	4113      	asrs	r3, r2
 810c2fa:	2200      	movs	r2, #0
 810c2fc:	e008      	b.n	810c310 <__ulp+0x3c>
 810c2fe:	f1a2 0314 	sub.w	r3, r2, #20
 810c302:	2b1e      	cmp	r3, #30
 810c304:	bfda      	itte	le
 810c306:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 810c30a:	40da      	lsrle	r2, r3
 810c30c:	2201      	movgt	r2, #1
 810c30e:	2300      	movs	r3, #0
 810c310:	4619      	mov	r1, r3
 810c312:	4610      	mov	r0, r2
 810c314:	ec41 0b10 	vmov	d0, r0, r1
 810c318:	b002      	add	sp, #8
 810c31a:	4770      	bx	lr
 810c31c:	7ff00000 	.word	0x7ff00000

0810c320 <__b2d>:
 810c320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810c324:	6906      	ldr	r6, [r0, #16]
 810c326:	f100 0814 	add.w	r8, r0, #20
 810c32a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810c32e:	1f37      	subs	r7, r6, #4
 810c330:	f856 2c04 	ldr.w	r2, [r6, #-4]
 810c334:	4610      	mov	r0, r2
 810c336:	f7ff fd53 	bl	810bde0 <__hi0bits>
 810c33a:	f1c0 0320 	rsb	r3, r0, #32
 810c33e:	280a      	cmp	r0, #10
 810c340:	600b      	str	r3, [r1, #0]
 810c342:	491b      	ldr	r1, [pc, #108]	; (810c3b0 <__b2d+0x90>)
 810c344:	dc15      	bgt.n	810c372 <__b2d+0x52>
 810c346:	f1c0 0c0b 	rsb	ip, r0, #11
 810c34a:	fa22 f30c 	lsr.w	r3, r2, ip
 810c34e:	45b8      	cmp	r8, r7
 810c350:	ea43 0501 	orr.w	r5, r3, r1
 810c354:	bf34      	ite	cc
 810c356:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c35a:	2300      	movcs	r3, #0
 810c35c:	3015      	adds	r0, #21
 810c35e:	fa02 f000 	lsl.w	r0, r2, r0
 810c362:	fa23 f30c 	lsr.w	r3, r3, ip
 810c366:	4303      	orrs	r3, r0
 810c368:	461c      	mov	r4, r3
 810c36a:	ec45 4b10 	vmov	d0, r4, r5
 810c36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810c372:	45b8      	cmp	r8, r7
 810c374:	bf3a      	itte	cc
 810c376:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810c37a:	f1a6 0708 	subcc.w	r7, r6, #8
 810c37e:	2300      	movcs	r3, #0
 810c380:	380b      	subs	r0, #11
 810c382:	d012      	beq.n	810c3aa <__b2d+0x8a>
 810c384:	f1c0 0120 	rsb	r1, r0, #32
 810c388:	fa23 f401 	lsr.w	r4, r3, r1
 810c38c:	4082      	lsls	r2, r0
 810c38e:	4322      	orrs	r2, r4
 810c390:	4547      	cmp	r7, r8
 810c392:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 810c396:	bf8c      	ite	hi
 810c398:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 810c39c:	2200      	movls	r2, #0
 810c39e:	4083      	lsls	r3, r0
 810c3a0:	40ca      	lsrs	r2, r1
 810c3a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 810c3a6:	4313      	orrs	r3, r2
 810c3a8:	e7de      	b.n	810c368 <__b2d+0x48>
 810c3aa:	ea42 0501 	orr.w	r5, r2, r1
 810c3ae:	e7db      	b.n	810c368 <__b2d+0x48>
 810c3b0:	3ff00000 	.word	0x3ff00000

0810c3b4 <__d2b>:
 810c3b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 810c3b8:	460f      	mov	r7, r1
 810c3ba:	2101      	movs	r1, #1
 810c3bc:	ec59 8b10 	vmov	r8, r9, d0
 810c3c0:	4616      	mov	r6, r2
 810c3c2:	f7ff fc1b 	bl	810bbfc <_Balloc>
 810c3c6:	4604      	mov	r4, r0
 810c3c8:	b930      	cbnz	r0, 810c3d8 <__d2b+0x24>
 810c3ca:	4602      	mov	r2, r0
 810c3cc:	4b24      	ldr	r3, [pc, #144]	; (810c460 <__d2b+0xac>)
 810c3ce:	4825      	ldr	r0, [pc, #148]	; (810c464 <__d2b+0xb0>)
 810c3d0:	f240 310f 	movw	r1, #783	; 0x30f
 810c3d4:	f001 fb88 	bl	810dae8 <__assert_func>
 810c3d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 810c3dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810c3e0:	bb2d      	cbnz	r5, 810c42e <__d2b+0x7a>
 810c3e2:	9301      	str	r3, [sp, #4]
 810c3e4:	f1b8 0300 	subs.w	r3, r8, #0
 810c3e8:	d026      	beq.n	810c438 <__d2b+0x84>
 810c3ea:	4668      	mov	r0, sp
 810c3ec:	9300      	str	r3, [sp, #0]
 810c3ee:	f7ff fd17 	bl	810be20 <__lo0bits>
 810c3f2:	e9dd 1200 	ldrd	r1, r2, [sp]
 810c3f6:	b1e8      	cbz	r0, 810c434 <__d2b+0x80>
 810c3f8:	f1c0 0320 	rsb	r3, r0, #32
 810c3fc:	fa02 f303 	lsl.w	r3, r2, r3
 810c400:	430b      	orrs	r3, r1
 810c402:	40c2      	lsrs	r2, r0
 810c404:	6163      	str	r3, [r4, #20]
 810c406:	9201      	str	r2, [sp, #4]
 810c408:	9b01      	ldr	r3, [sp, #4]
 810c40a:	61a3      	str	r3, [r4, #24]
 810c40c:	2b00      	cmp	r3, #0
 810c40e:	bf14      	ite	ne
 810c410:	2202      	movne	r2, #2
 810c412:	2201      	moveq	r2, #1
 810c414:	6122      	str	r2, [r4, #16]
 810c416:	b1bd      	cbz	r5, 810c448 <__d2b+0x94>
 810c418:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 810c41c:	4405      	add	r5, r0
 810c41e:	603d      	str	r5, [r7, #0]
 810c420:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 810c424:	6030      	str	r0, [r6, #0]
 810c426:	4620      	mov	r0, r4
 810c428:	b003      	add	sp, #12
 810c42a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810c42e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810c432:	e7d6      	b.n	810c3e2 <__d2b+0x2e>
 810c434:	6161      	str	r1, [r4, #20]
 810c436:	e7e7      	b.n	810c408 <__d2b+0x54>
 810c438:	a801      	add	r0, sp, #4
 810c43a:	f7ff fcf1 	bl	810be20 <__lo0bits>
 810c43e:	9b01      	ldr	r3, [sp, #4]
 810c440:	6163      	str	r3, [r4, #20]
 810c442:	3020      	adds	r0, #32
 810c444:	2201      	movs	r2, #1
 810c446:	e7e5      	b.n	810c414 <__d2b+0x60>
 810c448:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 810c44c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 810c450:	6038      	str	r0, [r7, #0]
 810c452:	6918      	ldr	r0, [r3, #16]
 810c454:	f7ff fcc4 	bl	810bde0 <__hi0bits>
 810c458:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 810c45c:	e7e2      	b.n	810c424 <__d2b+0x70>
 810c45e:	bf00      	nop
 810c460:	0810e925 	.word	0x0810e925
 810c464:	0810e936 	.word	0x0810e936

0810c468 <__ratio>:
 810c468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c46c:	4688      	mov	r8, r1
 810c46e:	4669      	mov	r1, sp
 810c470:	4681      	mov	r9, r0
 810c472:	f7ff ff55 	bl	810c320 <__b2d>
 810c476:	a901      	add	r1, sp, #4
 810c478:	4640      	mov	r0, r8
 810c47a:	ec55 4b10 	vmov	r4, r5, d0
 810c47e:	f7ff ff4f 	bl	810c320 <__b2d>
 810c482:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810c486:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810c48a:	eba3 0c02 	sub.w	ip, r3, r2
 810c48e:	e9dd 3200 	ldrd	r3, r2, [sp]
 810c492:	1a9b      	subs	r3, r3, r2
 810c494:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 810c498:	ec51 0b10 	vmov	r0, r1, d0
 810c49c:	2b00      	cmp	r3, #0
 810c49e:	bfd6      	itet	le
 810c4a0:	460a      	movle	r2, r1
 810c4a2:	462a      	movgt	r2, r5
 810c4a4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 810c4a8:	468b      	mov	fp, r1
 810c4aa:	462f      	mov	r7, r5
 810c4ac:	bfd4      	ite	le
 810c4ae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 810c4b2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 810c4b6:	4620      	mov	r0, r4
 810c4b8:	ee10 2a10 	vmov	r2, s0
 810c4bc:	465b      	mov	r3, fp
 810c4be:	4639      	mov	r1, r7
 810c4c0:	f7f4 fa4c 	bl	810095c <__aeabi_ddiv>
 810c4c4:	ec41 0b10 	vmov	d0, r0, r1
 810c4c8:	b003      	add	sp, #12
 810c4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810c4ce <__copybits>:
 810c4ce:	3901      	subs	r1, #1
 810c4d0:	b570      	push	{r4, r5, r6, lr}
 810c4d2:	1149      	asrs	r1, r1, #5
 810c4d4:	6914      	ldr	r4, [r2, #16]
 810c4d6:	3101      	adds	r1, #1
 810c4d8:	f102 0314 	add.w	r3, r2, #20
 810c4dc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 810c4e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 810c4e4:	1f05      	subs	r5, r0, #4
 810c4e6:	42a3      	cmp	r3, r4
 810c4e8:	d30c      	bcc.n	810c504 <__copybits+0x36>
 810c4ea:	1aa3      	subs	r3, r4, r2
 810c4ec:	3b11      	subs	r3, #17
 810c4ee:	f023 0303 	bic.w	r3, r3, #3
 810c4f2:	3211      	adds	r2, #17
 810c4f4:	42a2      	cmp	r2, r4
 810c4f6:	bf88      	it	hi
 810c4f8:	2300      	movhi	r3, #0
 810c4fa:	4418      	add	r0, r3
 810c4fc:	2300      	movs	r3, #0
 810c4fe:	4288      	cmp	r0, r1
 810c500:	d305      	bcc.n	810c50e <__copybits+0x40>
 810c502:	bd70      	pop	{r4, r5, r6, pc}
 810c504:	f853 6b04 	ldr.w	r6, [r3], #4
 810c508:	f845 6f04 	str.w	r6, [r5, #4]!
 810c50c:	e7eb      	b.n	810c4e6 <__copybits+0x18>
 810c50e:	f840 3b04 	str.w	r3, [r0], #4
 810c512:	e7f4      	b.n	810c4fe <__copybits+0x30>

0810c514 <__any_on>:
 810c514:	f100 0214 	add.w	r2, r0, #20
 810c518:	6900      	ldr	r0, [r0, #16]
 810c51a:	114b      	asrs	r3, r1, #5
 810c51c:	4298      	cmp	r0, r3
 810c51e:	b510      	push	{r4, lr}
 810c520:	db11      	blt.n	810c546 <__any_on+0x32>
 810c522:	dd0a      	ble.n	810c53a <__any_on+0x26>
 810c524:	f011 011f 	ands.w	r1, r1, #31
 810c528:	d007      	beq.n	810c53a <__any_on+0x26>
 810c52a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 810c52e:	fa24 f001 	lsr.w	r0, r4, r1
 810c532:	fa00 f101 	lsl.w	r1, r0, r1
 810c536:	428c      	cmp	r4, r1
 810c538:	d10b      	bne.n	810c552 <__any_on+0x3e>
 810c53a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810c53e:	4293      	cmp	r3, r2
 810c540:	d803      	bhi.n	810c54a <__any_on+0x36>
 810c542:	2000      	movs	r0, #0
 810c544:	bd10      	pop	{r4, pc}
 810c546:	4603      	mov	r3, r0
 810c548:	e7f7      	b.n	810c53a <__any_on+0x26>
 810c54a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810c54e:	2900      	cmp	r1, #0
 810c550:	d0f5      	beq.n	810c53e <__any_on+0x2a>
 810c552:	2001      	movs	r0, #1
 810c554:	e7f6      	b.n	810c544 <__any_on+0x30>

0810c556 <sulp>:
 810c556:	b570      	push	{r4, r5, r6, lr}
 810c558:	4604      	mov	r4, r0
 810c55a:	460d      	mov	r5, r1
 810c55c:	ec45 4b10 	vmov	d0, r4, r5
 810c560:	4616      	mov	r6, r2
 810c562:	f7ff feb7 	bl	810c2d4 <__ulp>
 810c566:	ec51 0b10 	vmov	r0, r1, d0
 810c56a:	b17e      	cbz	r6, 810c58c <sulp+0x36>
 810c56c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810c570:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810c574:	2b00      	cmp	r3, #0
 810c576:	dd09      	ble.n	810c58c <sulp+0x36>
 810c578:	051b      	lsls	r3, r3, #20
 810c57a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 810c57e:	2400      	movs	r4, #0
 810c580:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 810c584:	4622      	mov	r2, r4
 810c586:	462b      	mov	r3, r5
 810c588:	f7f4 f8be 	bl	8100708 <__aeabi_dmul>
 810c58c:	bd70      	pop	{r4, r5, r6, pc}
	...

0810c590 <_strtod_l>:
 810c590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c594:	ed2d 8b02 	vpush	{d8}
 810c598:	b09b      	sub	sp, #108	; 0x6c
 810c59a:	4604      	mov	r4, r0
 810c59c:	9213      	str	r2, [sp, #76]	; 0x4c
 810c59e:	2200      	movs	r2, #0
 810c5a0:	9216      	str	r2, [sp, #88]	; 0x58
 810c5a2:	460d      	mov	r5, r1
 810c5a4:	f04f 0800 	mov.w	r8, #0
 810c5a8:	f04f 0900 	mov.w	r9, #0
 810c5ac:	460a      	mov	r2, r1
 810c5ae:	9215      	str	r2, [sp, #84]	; 0x54
 810c5b0:	7811      	ldrb	r1, [r2, #0]
 810c5b2:	292b      	cmp	r1, #43	; 0x2b
 810c5b4:	d04c      	beq.n	810c650 <_strtod_l+0xc0>
 810c5b6:	d83a      	bhi.n	810c62e <_strtod_l+0x9e>
 810c5b8:	290d      	cmp	r1, #13
 810c5ba:	d834      	bhi.n	810c626 <_strtod_l+0x96>
 810c5bc:	2908      	cmp	r1, #8
 810c5be:	d834      	bhi.n	810c62a <_strtod_l+0x9a>
 810c5c0:	2900      	cmp	r1, #0
 810c5c2:	d03d      	beq.n	810c640 <_strtod_l+0xb0>
 810c5c4:	2200      	movs	r2, #0
 810c5c6:	920a      	str	r2, [sp, #40]	; 0x28
 810c5c8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 810c5ca:	7832      	ldrb	r2, [r6, #0]
 810c5cc:	2a30      	cmp	r2, #48	; 0x30
 810c5ce:	f040 80b4 	bne.w	810c73a <_strtod_l+0x1aa>
 810c5d2:	7872      	ldrb	r2, [r6, #1]
 810c5d4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 810c5d8:	2a58      	cmp	r2, #88	; 0x58
 810c5da:	d170      	bne.n	810c6be <_strtod_l+0x12e>
 810c5dc:	9302      	str	r3, [sp, #8]
 810c5de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c5e0:	9301      	str	r3, [sp, #4]
 810c5e2:	ab16      	add	r3, sp, #88	; 0x58
 810c5e4:	9300      	str	r3, [sp, #0]
 810c5e6:	4a8e      	ldr	r2, [pc, #568]	; (810c820 <_strtod_l+0x290>)
 810c5e8:	ab17      	add	r3, sp, #92	; 0x5c
 810c5ea:	a915      	add	r1, sp, #84	; 0x54
 810c5ec:	4620      	mov	r0, r4
 810c5ee:	f001 fb17 	bl	810dc20 <__gethex>
 810c5f2:	f010 070f 	ands.w	r7, r0, #15
 810c5f6:	4605      	mov	r5, r0
 810c5f8:	d005      	beq.n	810c606 <_strtod_l+0x76>
 810c5fa:	2f06      	cmp	r7, #6
 810c5fc:	d12a      	bne.n	810c654 <_strtod_l+0xc4>
 810c5fe:	3601      	adds	r6, #1
 810c600:	2300      	movs	r3, #0
 810c602:	9615      	str	r6, [sp, #84]	; 0x54
 810c604:	930a      	str	r3, [sp, #40]	; 0x28
 810c606:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810c608:	2b00      	cmp	r3, #0
 810c60a:	f040 857f 	bne.w	810d10c <_strtod_l+0xb7c>
 810c60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810c610:	b1db      	cbz	r3, 810c64a <_strtod_l+0xba>
 810c612:	4642      	mov	r2, r8
 810c614:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 810c618:	ec43 2b10 	vmov	d0, r2, r3
 810c61c:	b01b      	add	sp, #108	; 0x6c
 810c61e:	ecbd 8b02 	vpop	{d8}
 810c622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810c626:	2920      	cmp	r1, #32
 810c628:	d1cc      	bne.n	810c5c4 <_strtod_l+0x34>
 810c62a:	3201      	adds	r2, #1
 810c62c:	e7bf      	b.n	810c5ae <_strtod_l+0x1e>
 810c62e:	292d      	cmp	r1, #45	; 0x2d
 810c630:	d1c8      	bne.n	810c5c4 <_strtod_l+0x34>
 810c632:	2101      	movs	r1, #1
 810c634:	910a      	str	r1, [sp, #40]	; 0x28
 810c636:	1c51      	adds	r1, r2, #1
 810c638:	9115      	str	r1, [sp, #84]	; 0x54
 810c63a:	7852      	ldrb	r2, [r2, #1]
 810c63c:	2a00      	cmp	r2, #0
 810c63e:	d1c3      	bne.n	810c5c8 <_strtod_l+0x38>
 810c640:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 810c642:	9515      	str	r5, [sp, #84]	; 0x54
 810c644:	2b00      	cmp	r3, #0
 810c646:	f040 855f 	bne.w	810d108 <_strtod_l+0xb78>
 810c64a:	4642      	mov	r2, r8
 810c64c:	464b      	mov	r3, r9
 810c64e:	e7e3      	b.n	810c618 <_strtod_l+0x88>
 810c650:	2100      	movs	r1, #0
 810c652:	e7ef      	b.n	810c634 <_strtod_l+0xa4>
 810c654:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810c656:	b13a      	cbz	r2, 810c668 <_strtod_l+0xd8>
 810c658:	2135      	movs	r1, #53	; 0x35
 810c65a:	a818      	add	r0, sp, #96	; 0x60
 810c65c:	f7ff ff37 	bl	810c4ce <__copybits>
 810c660:	9916      	ldr	r1, [sp, #88]	; 0x58
 810c662:	4620      	mov	r0, r4
 810c664:	f7ff fb0a 	bl	810bc7c <_Bfree>
 810c668:	3f01      	subs	r7, #1
 810c66a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 810c66c:	2f04      	cmp	r7, #4
 810c66e:	d806      	bhi.n	810c67e <_strtod_l+0xee>
 810c670:	e8df f007 	tbb	[pc, r7]
 810c674:	201d0314 	.word	0x201d0314
 810c678:	14          	.byte	0x14
 810c679:	00          	.byte	0x00
 810c67a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 810c67e:	05e9      	lsls	r1, r5, #23
 810c680:	bf48      	it	mi
 810c682:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 810c686:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810c68a:	0d1b      	lsrs	r3, r3, #20
 810c68c:	051b      	lsls	r3, r3, #20
 810c68e:	2b00      	cmp	r3, #0
 810c690:	d1b9      	bne.n	810c606 <_strtod_l+0x76>
 810c692:	f7fe fb03 	bl	810ac9c <__errno>
 810c696:	2322      	movs	r3, #34	; 0x22
 810c698:	6003      	str	r3, [r0, #0]
 810c69a:	e7b4      	b.n	810c606 <_strtod_l+0x76>
 810c69c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 810c6a0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 810c6a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 810c6a8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 810c6ac:	e7e7      	b.n	810c67e <_strtod_l+0xee>
 810c6ae:	f8df 9178 	ldr.w	r9, [pc, #376]	; 810c828 <_strtod_l+0x298>
 810c6b2:	e7e4      	b.n	810c67e <_strtod_l+0xee>
 810c6b4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 810c6b8:	f04f 38ff 	mov.w	r8, #4294967295
 810c6bc:	e7df      	b.n	810c67e <_strtod_l+0xee>
 810c6be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c6c0:	1c5a      	adds	r2, r3, #1
 810c6c2:	9215      	str	r2, [sp, #84]	; 0x54
 810c6c4:	785b      	ldrb	r3, [r3, #1]
 810c6c6:	2b30      	cmp	r3, #48	; 0x30
 810c6c8:	d0f9      	beq.n	810c6be <_strtod_l+0x12e>
 810c6ca:	2b00      	cmp	r3, #0
 810c6cc:	d09b      	beq.n	810c606 <_strtod_l+0x76>
 810c6ce:	2301      	movs	r3, #1
 810c6d0:	f04f 0a00 	mov.w	sl, #0
 810c6d4:	9304      	str	r3, [sp, #16]
 810c6d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c6d8:	930b      	str	r3, [sp, #44]	; 0x2c
 810c6da:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 810c6de:	46d3      	mov	fp, sl
 810c6e0:	220a      	movs	r2, #10
 810c6e2:	9815      	ldr	r0, [sp, #84]	; 0x54
 810c6e4:	7806      	ldrb	r6, [r0, #0]
 810c6e6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810c6ea:	b2d9      	uxtb	r1, r3
 810c6ec:	2909      	cmp	r1, #9
 810c6ee:	d926      	bls.n	810c73e <_strtod_l+0x1ae>
 810c6f0:	494c      	ldr	r1, [pc, #304]	; (810c824 <_strtod_l+0x294>)
 810c6f2:	2201      	movs	r2, #1
 810c6f4:	f001 f9c0 	bl	810da78 <strncmp>
 810c6f8:	2800      	cmp	r0, #0
 810c6fa:	d030      	beq.n	810c75e <_strtod_l+0x1ce>
 810c6fc:	2000      	movs	r0, #0
 810c6fe:	4632      	mov	r2, r6
 810c700:	9005      	str	r0, [sp, #20]
 810c702:	465e      	mov	r6, fp
 810c704:	4603      	mov	r3, r0
 810c706:	2a65      	cmp	r2, #101	; 0x65
 810c708:	d001      	beq.n	810c70e <_strtod_l+0x17e>
 810c70a:	2a45      	cmp	r2, #69	; 0x45
 810c70c:	d113      	bne.n	810c736 <_strtod_l+0x1a6>
 810c70e:	b91e      	cbnz	r6, 810c718 <_strtod_l+0x188>
 810c710:	9a04      	ldr	r2, [sp, #16]
 810c712:	4302      	orrs	r2, r0
 810c714:	d094      	beq.n	810c640 <_strtod_l+0xb0>
 810c716:	2600      	movs	r6, #0
 810c718:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810c71a:	1c6a      	adds	r2, r5, #1
 810c71c:	9215      	str	r2, [sp, #84]	; 0x54
 810c71e:	786a      	ldrb	r2, [r5, #1]
 810c720:	2a2b      	cmp	r2, #43	; 0x2b
 810c722:	d074      	beq.n	810c80e <_strtod_l+0x27e>
 810c724:	2a2d      	cmp	r2, #45	; 0x2d
 810c726:	d078      	beq.n	810c81a <_strtod_l+0x28a>
 810c728:	f04f 0c00 	mov.w	ip, #0
 810c72c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 810c730:	2909      	cmp	r1, #9
 810c732:	d97f      	bls.n	810c834 <_strtod_l+0x2a4>
 810c734:	9515      	str	r5, [sp, #84]	; 0x54
 810c736:	2700      	movs	r7, #0
 810c738:	e09e      	b.n	810c878 <_strtod_l+0x2e8>
 810c73a:	2300      	movs	r3, #0
 810c73c:	e7c8      	b.n	810c6d0 <_strtod_l+0x140>
 810c73e:	f1bb 0f08 	cmp.w	fp, #8
 810c742:	bfd8      	it	le
 810c744:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810c746:	f100 0001 	add.w	r0, r0, #1
 810c74a:	bfda      	itte	le
 810c74c:	fb02 3301 	mlale	r3, r2, r1, r3
 810c750:	9309      	strle	r3, [sp, #36]	; 0x24
 810c752:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 810c756:	f10b 0b01 	add.w	fp, fp, #1
 810c75a:	9015      	str	r0, [sp, #84]	; 0x54
 810c75c:	e7c1      	b.n	810c6e2 <_strtod_l+0x152>
 810c75e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c760:	1c5a      	adds	r2, r3, #1
 810c762:	9215      	str	r2, [sp, #84]	; 0x54
 810c764:	785a      	ldrb	r2, [r3, #1]
 810c766:	f1bb 0f00 	cmp.w	fp, #0
 810c76a:	d037      	beq.n	810c7dc <_strtod_l+0x24c>
 810c76c:	9005      	str	r0, [sp, #20]
 810c76e:	465e      	mov	r6, fp
 810c770:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810c774:	2b09      	cmp	r3, #9
 810c776:	d912      	bls.n	810c79e <_strtod_l+0x20e>
 810c778:	2301      	movs	r3, #1
 810c77a:	e7c4      	b.n	810c706 <_strtod_l+0x176>
 810c77c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c77e:	1c5a      	adds	r2, r3, #1
 810c780:	9215      	str	r2, [sp, #84]	; 0x54
 810c782:	785a      	ldrb	r2, [r3, #1]
 810c784:	3001      	adds	r0, #1
 810c786:	2a30      	cmp	r2, #48	; 0x30
 810c788:	d0f8      	beq.n	810c77c <_strtod_l+0x1ec>
 810c78a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810c78e:	2b08      	cmp	r3, #8
 810c790:	f200 84c1 	bhi.w	810d116 <_strtod_l+0xb86>
 810c794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c796:	9005      	str	r0, [sp, #20]
 810c798:	2000      	movs	r0, #0
 810c79a:	930b      	str	r3, [sp, #44]	; 0x2c
 810c79c:	4606      	mov	r6, r0
 810c79e:	3a30      	subs	r2, #48	; 0x30
 810c7a0:	f100 0301 	add.w	r3, r0, #1
 810c7a4:	d014      	beq.n	810c7d0 <_strtod_l+0x240>
 810c7a6:	9905      	ldr	r1, [sp, #20]
 810c7a8:	4419      	add	r1, r3
 810c7aa:	9105      	str	r1, [sp, #20]
 810c7ac:	4633      	mov	r3, r6
 810c7ae:	eb00 0c06 	add.w	ip, r0, r6
 810c7b2:	210a      	movs	r1, #10
 810c7b4:	4563      	cmp	r3, ip
 810c7b6:	d113      	bne.n	810c7e0 <_strtod_l+0x250>
 810c7b8:	1833      	adds	r3, r6, r0
 810c7ba:	2b08      	cmp	r3, #8
 810c7bc:	f106 0601 	add.w	r6, r6, #1
 810c7c0:	4406      	add	r6, r0
 810c7c2:	dc1a      	bgt.n	810c7fa <_strtod_l+0x26a>
 810c7c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 810c7c6:	230a      	movs	r3, #10
 810c7c8:	fb03 2301 	mla	r3, r3, r1, r2
 810c7cc:	9309      	str	r3, [sp, #36]	; 0x24
 810c7ce:	2300      	movs	r3, #0
 810c7d0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810c7d2:	1c51      	adds	r1, r2, #1
 810c7d4:	9115      	str	r1, [sp, #84]	; 0x54
 810c7d6:	7852      	ldrb	r2, [r2, #1]
 810c7d8:	4618      	mov	r0, r3
 810c7da:	e7c9      	b.n	810c770 <_strtod_l+0x1e0>
 810c7dc:	4658      	mov	r0, fp
 810c7de:	e7d2      	b.n	810c786 <_strtod_l+0x1f6>
 810c7e0:	2b08      	cmp	r3, #8
 810c7e2:	f103 0301 	add.w	r3, r3, #1
 810c7e6:	dc03      	bgt.n	810c7f0 <_strtod_l+0x260>
 810c7e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810c7ea:	434f      	muls	r7, r1
 810c7ec:	9709      	str	r7, [sp, #36]	; 0x24
 810c7ee:	e7e1      	b.n	810c7b4 <_strtod_l+0x224>
 810c7f0:	2b10      	cmp	r3, #16
 810c7f2:	bfd8      	it	le
 810c7f4:	fb01 fa0a 	mulle.w	sl, r1, sl
 810c7f8:	e7dc      	b.n	810c7b4 <_strtod_l+0x224>
 810c7fa:	2e10      	cmp	r6, #16
 810c7fc:	bfdc      	itt	le
 810c7fe:	230a      	movle	r3, #10
 810c800:	fb03 2a0a 	mlale	sl, r3, sl, r2
 810c804:	e7e3      	b.n	810c7ce <_strtod_l+0x23e>
 810c806:	2300      	movs	r3, #0
 810c808:	9305      	str	r3, [sp, #20]
 810c80a:	2301      	movs	r3, #1
 810c80c:	e780      	b.n	810c710 <_strtod_l+0x180>
 810c80e:	f04f 0c00 	mov.w	ip, #0
 810c812:	1caa      	adds	r2, r5, #2
 810c814:	9215      	str	r2, [sp, #84]	; 0x54
 810c816:	78aa      	ldrb	r2, [r5, #2]
 810c818:	e788      	b.n	810c72c <_strtod_l+0x19c>
 810c81a:	f04f 0c01 	mov.w	ip, #1
 810c81e:	e7f8      	b.n	810c812 <_strtod_l+0x282>
 810c820:	0810ea90 	.word	0x0810ea90
 810c824:	0810ea8c 	.word	0x0810ea8c
 810c828:	7ff00000 	.word	0x7ff00000
 810c82c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810c82e:	1c51      	adds	r1, r2, #1
 810c830:	9115      	str	r1, [sp, #84]	; 0x54
 810c832:	7852      	ldrb	r2, [r2, #1]
 810c834:	2a30      	cmp	r2, #48	; 0x30
 810c836:	d0f9      	beq.n	810c82c <_strtod_l+0x29c>
 810c838:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 810c83c:	2908      	cmp	r1, #8
 810c83e:	f63f af7a 	bhi.w	810c736 <_strtod_l+0x1a6>
 810c842:	3a30      	subs	r2, #48	; 0x30
 810c844:	9208      	str	r2, [sp, #32]
 810c846:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810c848:	920c      	str	r2, [sp, #48]	; 0x30
 810c84a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 810c84c:	1c57      	adds	r7, r2, #1
 810c84e:	9715      	str	r7, [sp, #84]	; 0x54
 810c850:	7852      	ldrb	r2, [r2, #1]
 810c852:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810c856:	f1be 0f09 	cmp.w	lr, #9
 810c85a:	d938      	bls.n	810c8ce <_strtod_l+0x33e>
 810c85c:	990c      	ldr	r1, [sp, #48]	; 0x30
 810c85e:	1a7f      	subs	r7, r7, r1
 810c860:	2f08      	cmp	r7, #8
 810c862:	f644 671f 	movw	r7, #19999	; 0x4e1f
 810c866:	dc03      	bgt.n	810c870 <_strtod_l+0x2e0>
 810c868:	9908      	ldr	r1, [sp, #32]
 810c86a:	428f      	cmp	r7, r1
 810c86c:	bfa8      	it	ge
 810c86e:	460f      	movge	r7, r1
 810c870:	f1bc 0f00 	cmp.w	ip, #0
 810c874:	d000      	beq.n	810c878 <_strtod_l+0x2e8>
 810c876:	427f      	negs	r7, r7
 810c878:	2e00      	cmp	r6, #0
 810c87a:	d14f      	bne.n	810c91c <_strtod_l+0x38c>
 810c87c:	9904      	ldr	r1, [sp, #16]
 810c87e:	4301      	orrs	r1, r0
 810c880:	f47f aec1 	bne.w	810c606 <_strtod_l+0x76>
 810c884:	2b00      	cmp	r3, #0
 810c886:	f47f aedb 	bne.w	810c640 <_strtod_l+0xb0>
 810c88a:	2a69      	cmp	r2, #105	; 0x69
 810c88c:	d029      	beq.n	810c8e2 <_strtod_l+0x352>
 810c88e:	dc26      	bgt.n	810c8de <_strtod_l+0x34e>
 810c890:	2a49      	cmp	r2, #73	; 0x49
 810c892:	d026      	beq.n	810c8e2 <_strtod_l+0x352>
 810c894:	2a4e      	cmp	r2, #78	; 0x4e
 810c896:	f47f aed3 	bne.w	810c640 <_strtod_l+0xb0>
 810c89a:	499b      	ldr	r1, [pc, #620]	; (810cb08 <_strtod_l+0x578>)
 810c89c:	a815      	add	r0, sp, #84	; 0x54
 810c89e:	f001 fbff 	bl	810e0a0 <__match>
 810c8a2:	2800      	cmp	r0, #0
 810c8a4:	f43f aecc 	beq.w	810c640 <_strtod_l+0xb0>
 810c8a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c8aa:	781b      	ldrb	r3, [r3, #0]
 810c8ac:	2b28      	cmp	r3, #40	; 0x28
 810c8ae:	d12f      	bne.n	810c910 <_strtod_l+0x380>
 810c8b0:	4996      	ldr	r1, [pc, #600]	; (810cb0c <_strtod_l+0x57c>)
 810c8b2:	aa18      	add	r2, sp, #96	; 0x60
 810c8b4:	a815      	add	r0, sp, #84	; 0x54
 810c8b6:	f001 fc07 	bl	810e0c8 <__hexnan>
 810c8ba:	2805      	cmp	r0, #5
 810c8bc:	d128      	bne.n	810c910 <_strtod_l+0x380>
 810c8be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 810c8c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810c8c4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 810c8c8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 810c8cc:	e69b      	b.n	810c606 <_strtod_l+0x76>
 810c8ce:	9f08      	ldr	r7, [sp, #32]
 810c8d0:	210a      	movs	r1, #10
 810c8d2:	fb01 2107 	mla	r1, r1, r7, r2
 810c8d6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 810c8da:	9208      	str	r2, [sp, #32]
 810c8dc:	e7b5      	b.n	810c84a <_strtod_l+0x2ba>
 810c8de:	2a6e      	cmp	r2, #110	; 0x6e
 810c8e0:	e7d9      	b.n	810c896 <_strtod_l+0x306>
 810c8e2:	498b      	ldr	r1, [pc, #556]	; (810cb10 <_strtod_l+0x580>)
 810c8e4:	a815      	add	r0, sp, #84	; 0x54
 810c8e6:	f001 fbdb 	bl	810e0a0 <__match>
 810c8ea:	2800      	cmp	r0, #0
 810c8ec:	f43f aea8 	beq.w	810c640 <_strtod_l+0xb0>
 810c8f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c8f2:	4988      	ldr	r1, [pc, #544]	; (810cb14 <_strtod_l+0x584>)
 810c8f4:	3b01      	subs	r3, #1
 810c8f6:	a815      	add	r0, sp, #84	; 0x54
 810c8f8:	9315      	str	r3, [sp, #84]	; 0x54
 810c8fa:	f001 fbd1 	bl	810e0a0 <__match>
 810c8fe:	b910      	cbnz	r0, 810c906 <_strtod_l+0x376>
 810c900:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810c902:	3301      	adds	r3, #1
 810c904:	9315      	str	r3, [sp, #84]	; 0x54
 810c906:	f8df 921c 	ldr.w	r9, [pc, #540]	; 810cb24 <_strtod_l+0x594>
 810c90a:	f04f 0800 	mov.w	r8, #0
 810c90e:	e67a      	b.n	810c606 <_strtod_l+0x76>
 810c910:	4881      	ldr	r0, [pc, #516]	; (810cb18 <_strtod_l+0x588>)
 810c912:	f001 f8e1 	bl	810dad8 <nan>
 810c916:	ec59 8b10 	vmov	r8, r9, d0
 810c91a:	e674      	b.n	810c606 <_strtod_l+0x76>
 810c91c:	9b05      	ldr	r3, [sp, #20]
 810c91e:	9809      	ldr	r0, [sp, #36]	; 0x24
 810c920:	1afb      	subs	r3, r7, r3
 810c922:	f1bb 0f00 	cmp.w	fp, #0
 810c926:	bf08      	it	eq
 810c928:	46b3      	moveq	fp, r6
 810c92a:	2e10      	cmp	r6, #16
 810c92c:	9308      	str	r3, [sp, #32]
 810c92e:	4635      	mov	r5, r6
 810c930:	bfa8      	it	ge
 810c932:	2510      	movge	r5, #16
 810c934:	f7f3 fe6e 	bl	8100614 <__aeabi_ui2d>
 810c938:	2e09      	cmp	r6, #9
 810c93a:	4680      	mov	r8, r0
 810c93c:	4689      	mov	r9, r1
 810c93e:	dd13      	ble.n	810c968 <_strtod_l+0x3d8>
 810c940:	4b76      	ldr	r3, [pc, #472]	; (810cb1c <_strtod_l+0x58c>)
 810c942:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810c946:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 810c94a:	f7f3 fedd 	bl	8100708 <__aeabi_dmul>
 810c94e:	4680      	mov	r8, r0
 810c950:	4650      	mov	r0, sl
 810c952:	4689      	mov	r9, r1
 810c954:	f7f3 fe5e 	bl	8100614 <__aeabi_ui2d>
 810c958:	4602      	mov	r2, r0
 810c95a:	460b      	mov	r3, r1
 810c95c:	4640      	mov	r0, r8
 810c95e:	4649      	mov	r1, r9
 810c960:	f7f3 fd1c 	bl	810039c <__adddf3>
 810c964:	4680      	mov	r8, r0
 810c966:	4689      	mov	r9, r1
 810c968:	2e0f      	cmp	r6, #15
 810c96a:	dc38      	bgt.n	810c9de <_strtod_l+0x44e>
 810c96c:	9b08      	ldr	r3, [sp, #32]
 810c96e:	2b00      	cmp	r3, #0
 810c970:	f43f ae49 	beq.w	810c606 <_strtod_l+0x76>
 810c974:	dd24      	ble.n	810c9c0 <_strtod_l+0x430>
 810c976:	2b16      	cmp	r3, #22
 810c978:	dc0b      	bgt.n	810c992 <_strtod_l+0x402>
 810c97a:	4968      	ldr	r1, [pc, #416]	; (810cb1c <_strtod_l+0x58c>)
 810c97c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c980:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c984:	4642      	mov	r2, r8
 810c986:	464b      	mov	r3, r9
 810c988:	f7f3 febe 	bl	8100708 <__aeabi_dmul>
 810c98c:	4680      	mov	r8, r0
 810c98e:	4689      	mov	r9, r1
 810c990:	e639      	b.n	810c606 <_strtod_l+0x76>
 810c992:	9a08      	ldr	r2, [sp, #32]
 810c994:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 810c998:	4293      	cmp	r3, r2
 810c99a:	db20      	blt.n	810c9de <_strtod_l+0x44e>
 810c99c:	4c5f      	ldr	r4, [pc, #380]	; (810cb1c <_strtod_l+0x58c>)
 810c99e:	f1c6 060f 	rsb	r6, r6, #15
 810c9a2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 810c9a6:	4642      	mov	r2, r8
 810c9a8:	464b      	mov	r3, r9
 810c9aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c9ae:	f7f3 feab 	bl	8100708 <__aeabi_dmul>
 810c9b2:	9b08      	ldr	r3, [sp, #32]
 810c9b4:	1b9e      	subs	r6, r3, r6
 810c9b6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 810c9ba:	e9d4 2300 	ldrd	r2, r3, [r4]
 810c9be:	e7e3      	b.n	810c988 <_strtod_l+0x3f8>
 810c9c0:	9b08      	ldr	r3, [sp, #32]
 810c9c2:	3316      	adds	r3, #22
 810c9c4:	db0b      	blt.n	810c9de <_strtod_l+0x44e>
 810c9c6:	9b05      	ldr	r3, [sp, #20]
 810c9c8:	1bdf      	subs	r7, r3, r7
 810c9ca:	4b54      	ldr	r3, [pc, #336]	; (810cb1c <_strtod_l+0x58c>)
 810c9cc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 810c9d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 810c9d4:	4640      	mov	r0, r8
 810c9d6:	4649      	mov	r1, r9
 810c9d8:	f7f3 ffc0 	bl	810095c <__aeabi_ddiv>
 810c9dc:	e7d6      	b.n	810c98c <_strtod_l+0x3fc>
 810c9de:	9b08      	ldr	r3, [sp, #32]
 810c9e0:	1b75      	subs	r5, r6, r5
 810c9e2:	441d      	add	r5, r3
 810c9e4:	2d00      	cmp	r5, #0
 810c9e6:	dd70      	ble.n	810caca <_strtod_l+0x53a>
 810c9e8:	f015 030f 	ands.w	r3, r5, #15
 810c9ec:	d00a      	beq.n	810ca04 <_strtod_l+0x474>
 810c9ee:	494b      	ldr	r1, [pc, #300]	; (810cb1c <_strtod_l+0x58c>)
 810c9f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810c9f4:	4642      	mov	r2, r8
 810c9f6:	464b      	mov	r3, r9
 810c9f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 810c9fc:	f7f3 fe84 	bl	8100708 <__aeabi_dmul>
 810ca00:	4680      	mov	r8, r0
 810ca02:	4689      	mov	r9, r1
 810ca04:	f035 050f 	bics.w	r5, r5, #15
 810ca08:	d04d      	beq.n	810caa6 <_strtod_l+0x516>
 810ca0a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 810ca0e:	dd22      	ble.n	810ca56 <_strtod_l+0x4c6>
 810ca10:	2500      	movs	r5, #0
 810ca12:	46ab      	mov	fp, r5
 810ca14:	9509      	str	r5, [sp, #36]	; 0x24
 810ca16:	9505      	str	r5, [sp, #20]
 810ca18:	2322      	movs	r3, #34	; 0x22
 810ca1a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 810cb24 <_strtod_l+0x594>
 810ca1e:	6023      	str	r3, [r4, #0]
 810ca20:	f04f 0800 	mov.w	r8, #0
 810ca24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810ca26:	2b00      	cmp	r3, #0
 810ca28:	f43f aded 	beq.w	810c606 <_strtod_l+0x76>
 810ca2c:	9916      	ldr	r1, [sp, #88]	; 0x58
 810ca2e:	4620      	mov	r0, r4
 810ca30:	f7ff f924 	bl	810bc7c <_Bfree>
 810ca34:	9905      	ldr	r1, [sp, #20]
 810ca36:	4620      	mov	r0, r4
 810ca38:	f7ff f920 	bl	810bc7c <_Bfree>
 810ca3c:	4659      	mov	r1, fp
 810ca3e:	4620      	mov	r0, r4
 810ca40:	f7ff f91c 	bl	810bc7c <_Bfree>
 810ca44:	9909      	ldr	r1, [sp, #36]	; 0x24
 810ca46:	4620      	mov	r0, r4
 810ca48:	f7ff f918 	bl	810bc7c <_Bfree>
 810ca4c:	4629      	mov	r1, r5
 810ca4e:	4620      	mov	r0, r4
 810ca50:	f7ff f914 	bl	810bc7c <_Bfree>
 810ca54:	e5d7      	b.n	810c606 <_strtod_l+0x76>
 810ca56:	4b32      	ldr	r3, [pc, #200]	; (810cb20 <_strtod_l+0x590>)
 810ca58:	9304      	str	r3, [sp, #16]
 810ca5a:	2300      	movs	r3, #0
 810ca5c:	112d      	asrs	r5, r5, #4
 810ca5e:	4640      	mov	r0, r8
 810ca60:	4649      	mov	r1, r9
 810ca62:	469a      	mov	sl, r3
 810ca64:	2d01      	cmp	r5, #1
 810ca66:	dc21      	bgt.n	810caac <_strtod_l+0x51c>
 810ca68:	b10b      	cbz	r3, 810ca6e <_strtod_l+0x4de>
 810ca6a:	4680      	mov	r8, r0
 810ca6c:	4689      	mov	r9, r1
 810ca6e:	492c      	ldr	r1, [pc, #176]	; (810cb20 <_strtod_l+0x590>)
 810ca70:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 810ca74:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 810ca78:	4642      	mov	r2, r8
 810ca7a:	464b      	mov	r3, r9
 810ca7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 810ca80:	f7f3 fe42 	bl	8100708 <__aeabi_dmul>
 810ca84:	4b27      	ldr	r3, [pc, #156]	; (810cb24 <_strtod_l+0x594>)
 810ca86:	460a      	mov	r2, r1
 810ca88:	400b      	ands	r3, r1
 810ca8a:	4927      	ldr	r1, [pc, #156]	; (810cb28 <_strtod_l+0x598>)
 810ca8c:	428b      	cmp	r3, r1
 810ca8e:	4680      	mov	r8, r0
 810ca90:	d8be      	bhi.n	810ca10 <_strtod_l+0x480>
 810ca92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810ca96:	428b      	cmp	r3, r1
 810ca98:	bf86      	itte	hi
 810ca9a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 810cb2c <_strtod_l+0x59c>
 810ca9e:	f04f 38ff 	movhi.w	r8, #4294967295
 810caa2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 810caa6:	2300      	movs	r3, #0
 810caa8:	9304      	str	r3, [sp, #16]
 810caaa:	e07b      	b.n	810cba4 <_strtod_l+0x614>
 810caac:	07ea      	lsls	r2, r5, #31
 810caae:	d505      	bpl.n	810cabc <_strtod_l+0x52c>
 810cab0:	9b04      	ldr	r3, [sp, #16]
 810cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cab6:	f7f3 fe27 	bl	8100708 <__aeabi_dmul>
 810caba:	2301      	movs	r3, #1
 810cabc:	9a04      	ldr	r2, [sp, #16]
 810cabe:	3208      	adds	r2, #8
 810cac0:	f10a 0a01 	add.w	sl, sl, #1
 810cac4:	106d      	asrs	r5, r5, #1
 810cac6:	9204      	str	r2, [sp, #16]
 810cac8:	e7cc      	b.n	810ca64 <_strtod_l+0x4d4>
 810caca:	d0ec      	beq.n	810caa6 <_strtod_l+0x516>
 810cacc:	426d      	negs	r5, r5
 810cace:	f015 020f 	ands.w	r2, r5, #15
 810cad2:	d00a      	beq.n	810caea <_strtod_l+0x55a>
 810cad4:	4b11      	ldr	r3, [pc, #68]	; (810cb1c <_strtod_l+0x58c>)
 810cad6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810cada:	4640      	mov	r0, r8
 810cadc:	4649      	mov	r1, r9
 810cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 810cae2:	f7f3 ff3b 	bl	810095c <__aeabi_ddiv>
 810cae6:	4680      	mov	r8, r0
 810cae8:	4689      	mov	r9, r1
 810caea:	112d      	asrs	r5, r5, #4
 810caec:	d0db      	beq.n	810caa6 <_strtod_l+0x516>
 810caee:	2d1f      	cmp	r5, #31
 810caf0:	dd1e      	ble.n	810cb30 <_strtod_l+0x5a0>
 810caf2:	2500      	movs	r5, #0
 810caf4:	46ab      	mov	fp, r5
 810caf6:	9509      	str	r5, [sp, #36]	; 0x24
 810caf8:	9505      	str	r5, [sp, #20]
 810cafa:	2322      	movs	r3, #34	; 0x22
 810cafc:	f04f 0800 	mov.w	r8, #0
 810cb00:	f04f 0900 	mov.w	r9, #0
 810cb04:	6023      	str	r3, [r4, #0]
 810cb06:	e78d      	b.n	810ca24 <_strtod_l+0x494>
 810cb08:	0810e87d 	.word	0x0810e87d
 810cb0c:	0810eaa4 	.word	0x0810eaa4
 810cb10:	0810e875 	.word	0x0810e875
 810cb14:	0810e8ac 	.word	0x0810e8ac
 810cb18:	0810ec35 	.word	0x0810ec35
 810cb1c:	0810e9b8 	.word	0x0810e9b8
 810cb20:	0810e990 	.word	0x0810e990
 810cb24:	7ff00000 	.word	0x7ff00000
 810cb28:	7ca00000 	.word	0x7ca00000
 810cb2c:	7fefffff 	.word	0x7fefffff
 810cb30:	f015 0310 	ands.w	r3, r5, #16
 810cb34:	bf18      	it	ne
 810cb36:	236a      	movne	r3, #106	; 0x6a
 810cb38:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 810cedc <_strtod_l+0x94c>
 810cb3c:	9304      	str	r3, [sp, #16]
 810cb3e:	4640      	mov	r0, r8
 810cb40:	4649      	mov	r1, r9
 810cb42:	2300      	movs	r3, #0
 810cb44:	07ea      	lsls	r2, r5, #31
 810cb46:	d504      	bpl.n	810cb52 <_strtod_l+0x5c2>
 810cb48:	e9da 2300 	ldrd	r2, r3, [sl]
 810cb4c:	f7f3 fddc 	bl	8100708 <__aeabi_dmul>
 810cb50:	2301      	movs	r3, #1
 810cb52:	106d      	asrs	r5, r5, #1
 810cb54:	f10a 0a08 	add.w	sl, sl, #8
 810cb58:	d1f4      	bne.n	810cb44 <_strtod_l+0x5b4>
 810cb5a:	b10b      	cbz	r3, 810cb60 <_strtod_l+0x5d0>
 810cb5c:	4680      	mov	r8, r0
 810cb5e:	4689      	mov	r9, r1
 810cb60:	9b04      	ldr	r3, [sp, #16]
 810cb62:	b1bb      	cbz	r3, 810cb94 <_strtod_l+0x604>
 810cb64:	f3c9 520a 	ubfx	r2, r9, #20, #11
 810cb68:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 810cb6c:	2b00      	cmp	r3, #0
 810cb6e:	4649      	mov	r1, r9
 810cb70:	dd10      	ble.n	810cb94 <_strtod_l+0x604>
 810cb72:	2b1f      	cmp	r3, #31
 810cb74:	f340 811e 	ble.w	810cdb4 <_strtod_l+0x824>
 810cb78:	2b34      	cmp	r3, #52	; 0x34
 810cb7a:	bfde      	ittt	le
 810cb7c:	f04f 33ff 	movle.w	r3, #4294967295
 810cb80:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810cb84:	4093      	lslle	r3, r2
 810cb86:	f04f 0800 	mov.w	r8, #0
 810cb8a:	bfcc      	ite	gt
 810cb8c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 810cb90:	ea03 0901 	andle.w	r9, r3, r1
 810cb94:	2200      	movs	r2, #0
 810cb96:	2300      	movs	r3, #0
 810cb98:	4640      	mov	r0, r8
 810cb9a:	4649      	mov	r1, r9
 810cb9c:	f7f4 f81c 	bl	8100bd8 <__aeabi_dcmpeq>
 810cba0:	2800      	cmp	r0, #0
 810cba2:	d1a6      	bne.n	810caf2 <_strtod_l+0x562>
 810cba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cba6:	9300      	str	r3, [sp, #0]
 810cba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810cbaa:	4633      	mov	r3, r6
 810cbac:	465a      	mov	r2, fp
 810cbae:	4620      	mov	r0, r4
 810cbb0:	f7ff f8cc 	bl	810bd4c <__s2b>
 810cbb4:	9009      	str	r0, [sp, #36]	; 0x24
 810cbb6:	2800      	cmp	r0, #0
 810cbb8:	f43f af2a 	beq.w	810ca10 <_strtod_l+0x480>
 810cbbc:	9a08      	ldr	r2, [sp, #32]
 810cbbe:	9b05      	ldr	r3, [sp, #20]
 810cbc0:	2a00      	cmp	r2, #0
 810cbc2:	eba3 0307 	sub.w	r3, r3, r7
 810cbc6:	bfa8      	it	ge
 810cbc8:	2300      	movge	r3, #0
 810cbca:	930c      	str	r3, [sp, #48]	; 0x30
 810cbcc:	2500      	movs	r5, #0
 810cbce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 810cbd2:	9312      	str	r3, [sp, #72]	; 0x48
 810cbd4:	46ab      	mov	fp, r5
 810cbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cbd8:	4620      	mov	r0, r4
 810cbda:	6859      	ldr	r1, [r3, #4]
 810cbdc:	f7ff f80e 	bl	810bbfc <_Balloc>
 810cbe0:	9005      	str	r0, [sp, #20]
 810cbe2:	2800      	cmp	r0, #0
 810cbe4:	f43f af18 	beq.w	810ca18 <_strtod_l+0x488>
 810cbe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810cbea:	691a      	ldr	r2, [r3, #16]
 810cbec:	3202      	adds	r2, #2
 810cbee:	f103 010c 	add.w	r1, r3, #12
 810cbf2:	0092      	lsls	r2, r2, #2
 810cbf4:	300c      	adds	r0, #12
 810cbf6:	f000 ff61 	bl	810dabc <memcpy>
 810cbfa:	ec49 8b10 	vmov	d0, r8, r9
 810cbfe:	aa18      	add	r2, sp, #96	; 0x60
 810cc00:	a917      	add	r1, sp, #92	; 0x5c
 810cc02:	4620      	mov	r0, r4
 810cc04:	f7ff fbd6 	bl	810c3b4 <__d2b>
 810cc08:	ec49 8b18 	vmov	d8, r8, r9
 810cc0c:	9016      	str	r0, [sp, #88]	; 0x58
 810cc0e:	2800      	cmp	r0, #0
 810cc10:	f43f af02 	beq.w	810ca18 <_strtod_l+0x488>
 810cc14:	2101      	movs	r1, #1
 810cc16:	4620      	mov	r0, r4
 810cc18:	f7ff f930 	bl	810be7c <__i2b>
 810cc1c:	4683      	mov	fp, r0
 810cc1e:	2800      	cmp	r0, #0
 810cc20:	f43f aefa 	beq.w	810ca18 <_strtod_l+0x488>
 810cc24:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810cc26:	9a18      	ldr	r2, [sp, #96]	; 0x60
 810cc28:	2e00      	cmp	r6, #0
 810cc2a:	bfab      	itete	ge
 810cc2c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 810cc2e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 810cc30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810cc32:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 810cc36:	bfac      	ite	ge
 810cc38:	eb06 0a03 	addge.w	sl, r6, r3
 810cc3c:	1b9f      	sublt	r7, r3, r6
 810cc3e:	9b04      	ldr	r3, [sp, #16]
 810cc40:	1af6      	subs	r6, r6, r3
 810cc42:	4416      	add	r6, r2
 810cc44:	4ba0      	ldr	r3, [pc, #640]	; (810cec8 <_strtod_l+0x938>)
 810cc46:	3e01      	subs	r6, #1
 810cc48:	429e      	cmp	r6, r3
 810cc4a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 810cc4e:	f280 80c4 	bge.w	810cdda <_strtod_l+0x84a>
 810cc52:	1b9b      	subs	r3, r3, r6
 810cc54:	2b1f      	cmp	r3, #31
 810cc56:	eba2 0203 	sub.w	r2, r2, r3
 810cc5a:	f04f 0101 	mov.w	r1, #1
 810cc5e:	f300 80b0 	bgt.w	810cdc2 <_strtod_l+0x832>
 810cc62:	fa01 f303 	lsl.w	r3, r1, r3
 810cc66:	930e      	str	r3, [sp, #56]	; 0x38
 810cc68:	2300      	movs	r3, #0
 810cc6a:	930d      	str	r3, [sp, #52]	; 0x34
 810cc6c:	eb0a 0602 	add.w	r6, sl, r2
 810cc70:	9b04      	ldr	r3, [sp, #16]
 810cc72:	45b2      	cmp	sl, r6
 810cc74:	4417      	add	r7, r2
 810cc76:	441f      	add	r7, r3
 810cc78:	4653      	mov	r3, sl
 810cc7a:	bfa8      	it	ge
 810cc7c:	4633      	movge	r3, r6
 810cc7e:	42bb      	cmp	r3, r7
 810cc80:	bfa8      	it	ge
 810cc82:	463b      	movge	r3, r7
 810cc84:	2b00      	cmp	r3, #0
 810cc86:	bfc2      	ittt	gt
 810cc88:	1af6      	subgt	r6, r6, r3
 810cc8a:	1aff      	subgt	r7, r7, r3
 810cc8c:	ebaa 0a03 	subgt.w	sl, sl, r3
 810cc90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810cc92:	2b00      	cmp	r3, #0
 810cc94:	dd17      	ble.n	810ccc6 <_strtod_l+0x736>
 810cc96:	4659      	mov	r1, fp
 810cc98:	461a      	mov	r2, r3
 810cc9a:	4620      	mov	r0, r4
 810cc9c:	f7ff f9ae 	bl	810bffc <__pow5mult>
 810cca0:	4683      	mov	fp, r0
 810cca2:	2800      	cmp	r0, #0
 810cca4:	f43f aeb8 	beq.w	810ca18 <_strtod_l+0x488>
 810cca8:	4601      	mov	r1, r0
 810ccaa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810ccac:	4620      	mov	r0, r4
 810ccae:	f7ff f8fb 	bl	810bea8 <__multiply>
 810ccb2:	900b      	str	r0, [sp, #44]	; 0x2c
 810ccb4:	2800      	cmp	r0, #0
 810ccb6:	f43f aeaf 	beq.w	810ca18 <_strtod_l+0x488>
 810ccba:	9916      	ldr	r1, [sp, #88]	; 0x58
 810ccbc:	4620      	mov	r0, r4
 810ccbe:	f7fe ffdd 	bl	810bc7c <_Bfree>
 810ccc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ccc4:	9316      	str	r3, [sp, #88]	; 0x58
 810ccc6:	2e00      	cmp	r6, #0
 810ccc8:	f300 808c 	bgt.w	810cde4 <_strtod_l+0x854>
 810cccc:	9b08      	ldr	r3, [sp, #32]
 810ccce:	2b00      	cmp	r3, #0
 810ccd0:	dd08      	ble.n	810cce4 <_strtod_l+0x754>
 810ccd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 810ccd4:	9905      	ldr	r1, [sp, #20]
 810ccd6:	4620      	mov	r0, r4
 810ccd8:	f7ff f990 	bl	810bffc <__pow5mult>
 810ccdc:	9005      	str	r0, [sp, #20]
 810ccde:	2800      	cmp	r0, #0
 810cce0:	f43f ae9a 	beq.w	810ca18 <_strtod_l+0x488>
 810cce4:	2f00      	cmp	r7, #0
 810cce6:	dd08      	ble.n	810ccfa <_strtod_l+0x76a>
 810cce8:	9905      	ldr	r1, [sp, #20]
 810ccea:	463a      	mov	r2, r7
 810ccec:	4620      	mov	r0, r4
 810ccee:	f7ff f9df 	bl	810c0b0 <__lshift>
 810ccf2:	9005      	str	r0, [sp, #20]
 810ccf4:	2800      	cmp	r0, #0
 810ccf6:	f43f ae8f 	beq.w	810ca18 <_strtod_l+0x488>
 810ccfa:	f1ba 0f00 	cmp.w	sl, #0
 810ccfe:	dd08      	ble.n	810cd12 <_strtod_l+0x782>
 810cd00:	4659      	mov	r1, fp
 810cd02:	4652      	mov	r2, sl
 810cd04:	4620      	mov	r0, r4
 810cd06:	f7ff f9d3 	bl	810c0b0 <__lshift>
 810cd0a:	4683      	mov	fp, r0
 810cd0c:	2800      	cmp	r0, #0
 810cd0e:	f43f ae83 	beq.w	810ca18 <_strtod_l+0x488>
 810cd12:	9a05      	ldr	r2, [sp, #20]
 810cd14:	9916      	ldr	r1, [sp, #88]	; 0x58
 810cd16:	4620      	mov	r0, r4
 810cd18:	f7ff fa52 	bl	810c1c0 <__mdiff>
 810cd1c:	4605      	mov	r5, r0
 810cd1e:	2800      	cmp	r0, #0
 810cd20:	f43f ae7a 	beq.w	810ca18 <_strtod_l+0x488>
 810cd24:	68c3      	ldr	r3, [r0, #12]
 810cd26:	930b      	str	r3, [sp, #44]	; 0x2c
 810cd28:	2300      	movs	r3, #0
 810cd2a:	60c3      	str	r3, [r0, #12]
 810cd2c:	4659      	mov	r1, fp
 810cd2e:	f7ff fa2b 	bl	810c188 <__mcmp>
 810cd32:	2800      	cmp	r0, #0
 810cd34:	da60      	bge.n	810cdf8 <_strtod_l+0x868>
 810cd36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810cd38:	ea53 0308 	orrs.w	r3, r3, r8
 810cd3c:	f040 8084 	bne.w	810ce48 <_strtod_l+0x8b8>
 810cd40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810cd44:	2b00      	cmp	r3, #0
 810cd46:	d17f      	bne.n	810ce48 <_strtod_l+0x8b8>
 810cd48:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810cd4c:	0d1b      	lsrs	r3, r3, #20
 810cd4e:	051b      	lsls	r3, r3, #20
 810cd50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810cd54:	d978      	bls.n	810ce48 <_strtod_l+0x8b8>
 810cd56:	696b      	ldr	r3, [r5, #20]
 810cd58:	b913      	cbnz	r3, 810cd60 <_strtod_l+0x7d0>
 810cd5a:	692b      	ldr	r3, [r5, #16]
 810cd5c:	2b01      	cmp	r3, #1
 810cd5e:	dd73      	ble.n	810ce48 <_strtod_l+0x8b8>
 810cd60:	4629      	mov	r1, r5
 810cd62:	2201      	movs	r2, #1
 810cd64:	4620      	mov	r0, r4
 810cd66:	f7ff f9a3 	bl	810c0b0 <__lshift>
 810cd6a:	4659      	mov	r1, fp
 810cd6c:	4605      	mov	r5, r0
 810cd6e:	f7ff fa0b 	bl	810c188 <__mcmp>
 810cd72:	2800      	cmp	r0, #0
 810cd74:	dd68      	ble.n	810ce48 <_strtod_l+0x8b8>
 810cd76:	9904      	ldr	r1, [sp, #16]
 810cd78:	4a54      	ldr	r2, [pc, #336]	; (810cecc <_strtod_l+0x93c>)
 810cd7a:	464b      	mov	r3, r9
 810cd7c:	2900      	cmp	r1, #0
 810cd7e:	f000 8084 	beq.w	810ce8a <_strtod_l+0x8fa>
 810cd82:	ea02 0109 	and.w	r1, r2, r9
 810cd86:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810cd8a:	dc7e      	bgt.n	810ce8a <_strtod_l+0x8fa>
 810cd8c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 810cd90:	f77f aeb3 	ble.w	810cafa <_strtod_l+0x56a>
 810cd94:	4b4e      	ldr	r3, [pc, #312]	; (810ced0 <_strtod_l+0x940>)
 810cd96:	4640      	mov	r0, r8
 810cd98:	4649      	mov	r1, r9
 810cd9a:	2200      	movs	r2, #0
 810cd9c:	f7f3 fcb4 	bl	8100708 <__aeabi_dmul>
 810cda0:	4b4a      	ldr	r3, [pc, #296]	; (810cecc <_strtod_l+0x93c>)
 810cda2:	400b      	ands	r3, r1
 810cda4:	4680      	mov	r8, r0
 810cda6:	4689      	mov	r9, r1
 810cda8:	2b00      	cmp	r3, #0
 810cdaa:	f47f ae3f 	bne.w	810ca2c <_strtod_l+0x49c>
 810cdae:	2322      	movs	r3, #34	; 0x22
 810cdb0:	6023      	str	r3, [r4, #0]
 810cdb2:	e63b      	b.n	810ca2c <_strtod_l+0x49c>
 810cdb4:	f04f 32ff 	mov.w	r2, #4294967295
 810cdb8:	fa02 f303 	lsl.w	r3, r2, r3
 810cdbc:	ea03 0808 	and.w	r8, r3, r8
 810cdc0:	e6e8      	b.n	810cb94 <_strtod_l+0x604>
 810cdc2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 810cdc6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 810cdca:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 810cdce:	36e2      	adds	r6, #226	; 0xe2
 810cdd0:	fa01 f306 	lsl.w	r3, r1, r6
 810cdd4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 810cdd8:	e748      	b.n	810cc6c <_strtod_l+0x6dc>
 810cdda:	2100      	movs	r1, #0
 810cddc:	2301      	movs	r3, #1
 810cdde:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 810cde2:	e743      	b.n	810cc6c <_strtod_l+0x6dc>
 810cde4:	9916      	ldr	r1, [sp, #88]	; 0x58
 810cde6:	4632      	mov	r2, r6
 810cde8:	4620      	mov	r0, r4
 810cdea:	f7ff f961 	bl	810c0b0 <__lshift>
 810cdee:	9016      	str	r0, [sp, #88]	; 0x58
 810cdf0:	2800      	cmp	r0, #0
 810cdf2:	f47f af6b 	bne.w	810cccc <_strtod_l+0x73c>
 810cdf6:	e60f      	b.n	810ca18 <_strtod_l+0x488>
 810cdf8:	46ca      	mov	sl, r9
 810cdfa:	d171      	bne.n	810cee0 <_strtod_l+0x950>
 810cdfc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810cdfe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810ce02:	b352      	cbz	r2, 810ce5a <_strtod_l+0x8ca>
 810ce04:	4a33      	ldr	r2, [pc, #204]	; (810ced4 <_strtod_l+0x944>)
 810ce06:	4293      	cmp	r3, r2
 810ce08:	d12a      	bne.n	810ce60 <_strtod_l+0x8d0>
 810ce0a:	9b04      	ldr	r3, [sp, #16]
 810ce0c:	4641      	mov	r1, r8
 810ce0e:	b1fb      	cbz	r3, 810ce50 <_strtod_l+0x8c0>
 810ce10:	4b2e      	ldr	r3, [pc, #184]	; (810cecc <_strtod_l+0x93c>)
 810ce12:	ea09 0303 	and.w	r3, r9, r3
 810ce16:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810ce1a:	f04f 32ff 	mov.w	r2, #4294967295
 810ce1e:	d81a      	bhi.n	810ce56 <_strtod_l+0x8c6>
 810ce20:	0d1b      	lsrs	r3, r3, #20
 810ce22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810ce26:	fa02 f303 	lsl.w	r3, r2, r3
 810ce2a:	4299      	cmp	r1, r3
 810ce2c:	d118      	bne.n	810ce60 <_strtod_l+0x8d0>
 810ce2e:	4b2a      	ldr	r3, [pc, #168]	; (810ced8 <_strtod_l+0x948>)
 810ce30:	459a      	cmp	sl, r3
 810ce32:	d102      	bne.n	810ce3a <_strtod_l+0x8aa>
 810ce34:	3101      	adds	r1, #1
 810ce36:	f43f adef 	beq.w	810ca18 <_strtod_l+0x488>
 810ce3a:	4b24      	ldr	r3, [pc, #144]	; (810cecc <_strtod_l+0x93c>)
 810ce3c:	ea0a 0303 	and.w	r3, sl, r3
 810ce40:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 810ce44:	f04f 0800 	mov.w	r8, #0
 810ce48:	9b04      	ldr	r3, [sp, #16]
 810ce4a:	2b00      	cmp	r3, #0
 810ce4c:	d1a2      	bne.n	810cd94 <_strtod_l+0x804>
 810ce4e:	e5ed      	b.n	810ca2c <_strtod_l+0x49c>
 810ce50:	f04f 33ff 	mov.w	r3, #4294967295
 810ce54:	e7e9      	b.n	810ce2a <_strtod_l+0x89a>
 810ce56:	4613      	mov	r3, r2
 810ce58:	e7e7      	b.n	810ce2a <_strtod_l+0x89a>
 810ce5a:	ea53 0308 	orrs.w	r3, r3, r8
 810ce5e:	d08a      	beq.n	810cd76 <_strtod_l+0x7e6>
 810ce60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810ce62:	b1e3      	cbz	r3, 810ce9e <_strtod_l+0x90e>
 810ce64:	ea13 0f0a 	tst.w	r3, sl
 810ce68:	d0ee      	beq.n	810ce48 <_strtod_l+0x8b8>
 810ce6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810ce6c:	9a04      	ldr	r2, [sp, #16]
 810ce6e:	4640      	mov	r0, r8
 810ce70:	4649      	mov	r1, r9
 810ce72:	b1c3      	cbz	r3, 810cea6 <_strtod_l+0x916>
 810ce74:	f7ff fb6f 	bl	810c556 <sulp>
 810ce78:	4602      	mov	r2, r0
 810ce7a:	460b      	mov	r3, r1
 810ce7c:	ec51 0b18 	vmov	r0, r1, d8
 810ce80:	f7f3 fa8c 	bl	810039c <__adddf3>
 810ce84:	4680      	mov	r8, r0
 810ce86:	4689      	mov	r9, r1
 810ce88:	e7de      	b.n	810ce48 <_strtod_l+0x8b8>
 810ce8a:	4013      	ands	r3, r2
 810ce8c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 810ce90:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 810ce94:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 810ce98:	f04f 38ff 	mov.w	r8, #4294967295
 810ce9c:	e7d4      	b.n	810ce48 <_strtod_l+0x8b8>
 810ce9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810cea0:	ea13 0f08 	tst.w	r3, r8
 810cea4:	e7e0      	b.n	810ce68 <_strtod_l+0x8d8>
 810cea6:	f7ff fb56 	bl	810c556 <sulp>
 810ceaa:	4602      	mov	r2, r0
 810ceac:	460b      	mov	r3, r1
 810ceae:	ec51 0b18 	vmov	r0, r1, d8
 810ceb2:	f7f3 fa71 	bl	8100398 <__aeabi_dsub>
 810ceb6:	2200      	movs	r2, #0
 810ceb8:	2300      	movs	r3, #0
 810ceba:	4680      	mov	r8, r0
 810cebc:	4689      	mov	r9, r1
 810cebe:	f7f3 fe8b 	bl	8100bd8 <__aeabi_dcmpeq>
 810cec2:	2800      	cmp	r0, #0
 810cec4:	d0c0      	beq.n	810ce48 <_strtod_l+0x8b8>
 810cec6:	e618      	b.n	810cafa <_strtod_l+0x56a>
 810cec8:	fffffc02 	.word	0xfffffc02
 810cecc:	7ff00000 	.word	0x7ff00000
 810ced0:	39500000 	.word	0x39500000
 810ced4:	000fffff 	.word	0x000fffff
 810ced8:	7fefffff 	.word	0x7fefffff
 810cedc:	0810eab8 	.word	0x0810eab8
 810cee0:	4659      	mov	r1, fp
 810cee2:	4628      	mov	r0, r5
 810cee4:	f7ff fac0 	bl	810c468 <__ratio>
 810cee8:	ec57 6b10 	vmov	r6, r7, d0
 810ceec:	ee10 0a10 	vmov	r0, s0
 810cef0:	2200      	movs	r2, #0
 810cef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 810cef6:	4639      	mov	r1, r7
 810cef8:	f7f3 fe82 	bl	8100c00 <__aeabi_dcmple>
 810cefc:	2800      	cmp	r0, #0
 810cefe:	d071      	beq.n	810cfe4 <_strtod_l+0xa54>
 810cf00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810cf02:	2b00      	cmp	r3, #0
 810cf04:	d17c      	bne.n	810d000 <_strtod_l+0xa70>
 810cf06:	f1b8 0f00 	cmp.w	r8, #0
 810cf0a:	d15a      	bne.n	810cfc2 <_strtod_l+0xa32>
 810cf0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810cf10:	2b00      	cmp	r3, #0
 810cf12:	d15d      	bne.n	810cfd0 <_strtod_l+0xa40>
 810cf14:	4b90      	ldr	r3, [pc, #576]	; (810d158 <_strtod_l+0xbc8>)
 810cf16:	2200      	movs	r2, #0
 810cf18:	4630      	mov	r0, r6
 810cf1a:	4639      	mov	r1, r7
 810cf1c:	f7f3 fe66 	bl	8100bec <__aeabi_dcmplt>
 810cf20:	2800      	cmp	r0, #0
 810cf22:	d15c      	bne.n	810cfde <_strtod_l+0xa4e>
 810cf24:	4630      	mov	r0, r6
 810cf26:	4639      	mov	r1, r7
 810cf28:	4b8c      	ldr	r3, [pc, #560]	; (810d15c <_strtod_l+0xbcc>)
 810cf2a:	2200      	movs	r2, #0
 810cf2c:	f7f3 fbec 	bl	8100708 <__aeabi_dmul>
 810cf30:	4606      	mov	r6, r0
 810cf32:	460f      	mov	r7, r1
 810cf34:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 810cf38:	9606      	str	r6, [sp, #24]
 810cf3a:	9307      	str	r3, [sp, #28]
 810cf3c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cf40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810cf44:	4b86      	ldr	r3, [pc, #536]	; (810d160 <_strtod_l+0xbd0>)
 810cf46:	ea0a 0303 	and.w	r3, sl, r3
 810cf4a:	930d      	str	r3, [sp, #52]	; 0x34
 810cf4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810cf4e:	4b85      	ldr	r3, [pc, #532]	; (810d164 <_strtod_l+0xbd4>)
 810cf50:	429a      	cmp	r2, r3
 810cf52:	f040 8090 	bne.w	810d076 <_strtod_l+0xae6>
 810cf56:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 810cf5a:	ec49 8b10 	vmov	d0, r8, r9
 810cf5e:	f7ff f9b9 	bl	810c2d4 <__ulp>
 810cf62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810cf66:	ec51 0b10 	vmov	r0, r1, d0
 810cf6a:	f7f3 fbcd 	bl	8100708 <__aeabi_dmul>
 810cf6e:	4642      	mov	r2, r8
 810cf70:	464b      	mov	r3, r9
 810cf72:	f7f3 fa13 	bl	810039c <__adddf3>
 810cf76:	460b      	mov	r3, r1
 810cf78:	4979      	ldr	r1, [pc, #484]	; (810d160 <_strtod_l+0xbd0>)
 810cf7a:	4a7b      	ldr	r2, [pc, #492]	; (810d168 <_strtod_l+0xbd8>)
 810cf7c:	4019      	ands	r1, r3
 810cf7e:	4291      	cmp	r1, r2
 810cf80:	4680      	mov	r8, r0
 810cf82:	d944      	bls.n	810d00e <_strtod_l+0xa7e>
 810cf84:	ee18 2a90 	vmov	r2, s17
 810cf88:	4b78      	ldr	r3, [pc, #480]	; (810d16c <_strtod_l+0xbdc>)
 810cf8a:	429a      	cmp	r2, r3
 810cf8c:	d104      	bne.n	810cf98 <_strtod_l+0xa08>
 810cf8e:	ee18 3a10 	vmov	r3, s16
 810cf92:	3301      	adds	r3, #1
 810cf94:	f43f ad40 	beq.w	810ca18 <_strtod_l+0x488>
 810cf98:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 810d16c <_strtod_l+0xbdc>
 810cf9c:	f04f 38ff 	mov.w	r8, #4294967295
 810cfa0:	9916      	ldr	r1, [sp, #88]	; 0x58
 810cfa2:	4620      	mov	r0, r4
 810cfa4:	f7fe fe6a 	bl	810bc7c <_Bfree>
 810cfa8:	9905      	ldr	r1, [sp, #20]
 810cfaa:	4620      	mov	r0, r4
 810cfac:	f7fe fe66 	bl	810bc7c <_Bfree>
 810cfb0:	4659      	mov	r1, fp
 810cfb2:	4620      	mov	r0, r4
 810cfb4:	f7fe fe62 	bl	810bc7c <_Bfree>
 810cfb8:	4629      	mov	r1, r5
 810cfba:	4620      	mov	r0, r4
 810cfbc:	f7fe fe5e 	bl	810bc7c <_Bfree>
 810cfc0:	e609      	b.n	810cbd6 <_strtod_l+0x646>
 810cfc2:	f1b8 0f01 	cmp.w	r8, #1
 810cfc6:	d103      	bne.n	810cfd0 <_strtod_l+0xa40>
 810cfc8:	f1b9 0f00 	cmp.w	r9, #0
 810cfcc:	f43f ad95 	beq.w	810cafa <_strtod_l+0x56a>
 810cfd0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 810d128 <_strtod_l+0xb98>
 810cfd4:	4f60      	ldr	r7, [pc, #384]	; (810d158 <_strtod_l+0xbc8>)
 810cfd6:	ed8d 7b06 	vstr	d7, [sp, #24]
 810cfda:	2600      	movs	r6, #0
 810cfdc:	e7ae      	b.n	810cf3c <_strtod_l+0x9ac>
 810cfde:	4f5f      	ldr	r7, [pc, #380]	; (810d15c <_strtod_l+0xbcc>)
 810cfe0:	2600      	movs	r6, #0
 810cfe2:	e7a7      	b.n	810cf34 <_strtod_l+0x9a4>
 810cfe4:	4b5d      	ldr	r3, [pc, #372]	; (810d15c <_strtod_l+0xbcc>)
 810cfe6:	4630      	mov	r0, r6
 810cfe8:	4639      	mov	r1, r7
 810cfea:	2200      	movs	r2, #0
 810cfec:	f7f3 fb8c 	bl	8100708 <__aeabi_dmul>
 810cff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810cff2:	4606      	mov	r6, r0
 810cff4:	460f      	mov	r7, r1
 810cff6:	2b00      	cmp	r3, #0
 810cff8:	d09c      	beq.n	810cf34 <_strtod_l+0x9a4>
 810cffa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 810cffe:	e79d      	b.n	810cf3c <_strtod_l+0x9ac>
 810d000:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 810d130 <_strtod_l+0xba0>
 810d004:	ed8d 7b06 	vstr	d7, [sp, #24]
 810d008:	ec57 6b17 	vmov	r6, r7, d7
 810d00c:	e796      	b.n	810cf3c <_strtod_l+0x9ac>
 810d00e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 810d012:	9b04      	ldr	r3, [sp, #16]
 810d014:	46ca      	mov	sl, r9
 810d016:	2b00      	cmp	r3, #0
 810d018:	d1c2      	bne.n	810cfa0 <_strtod_l+0xa10>
 810d01a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810d01e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810d020:	0d1b      	lsrs	r3, r3, #20
 810d022:	051b      	lsls	r3, r3, #20
 810d024:	429a      	cmp	r2, r3
 810d026:	d1bb      	bne.n	810cfa0 <_strtod_l+0xa10>
 810d028:	4630      	mov	r0, r6
 810d02a:	4639      	mov	r1, r7
 810d02c:	f7f3 fecc 	bl	8100dc8 <__aeabi_d2lz>
 810d030:	f7f3 fb3c 	bl	81006ac <__aeabi_l2d>
 810d034:	4602      	mov	r2, r0
 810d036:	460b      	mov	r3, r1
 810d038:	4630      	mov	r0, r6
 810d03a:	4639      	mov	r1, r7
 810d03c:	f7f3 f9ac 	bl	8100398 <__aeabi_dsub>
 810d040:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810d042:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810d046:	ea43 0308 	orr.w	r3, r3, r8
 810d04a:	4313      	orrs	r3, r2
 810d04c:	4606      	mov	r6, r0
 810d04e:	460f      	mov	r7, r1
 810d050:	d054      	beq.n	810d0fc <_strtod_l+0xb6c>
 810d052:	a339      	add	r3, pc, #228	; (adr r3, 810d138 <_strtod_l+0xba8>)
 810d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d058:	f7f3 fdc8 	bl	8100bec <__aeabi_dcmplt>
 810d05c:	2800      	cmp	r0, #0
 810d05e:	f47f ace5 	bne.w	810ca2c <_strtod_l+0x49c>
 810d062:	a337      	add	r3, pc, #220	; (adr r3, 810d140 <_strtod_l+0xbb0>)
 810d064:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d068:	4630      	mov	r0, r6
 810d06a:	4639      	mov	r1, r7
 810d06c:	f7f3 fddc 	bl	8100c28 <__aeabi_dcmpgt>
 810d070:	2800      	cmp	r0, #0
 810d072:	d095      	beq.n	810cfa0 <_strtod_l+0xa10>
 810d074:	e4da      	b.n	810ca2c <_strtod_l+0x49c>
 810d076:	9b04      	ldr	r3, [sp, #16]
 810d078:	b333      	cbz	r3, 810d0c8 <_strtod_l+0xb38>
 810d07a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810d07c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810d080:	d822      	bhi.n	810d0c8 <_strtod_l+0xb38>
 810d082:	a331      	add	r3, pc, #196	; (adr r3, 810d148 <_strtod_l+0xbb8>)
 810d084:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d088:	4630      	mov	r0, r6
 810d08a:	4639      	mov	r1, r7
 810d08c:	f7f3 fdb8 	bl	8100c00 <__aeabi_dcmple>
 810d090:	b1a0      	cbz	r0, 810d0bc <_strtod_l+0xb2c>
 810d092:	4639      	mov	r1, r7
 810d094:	4630      	mov	r0, r6
 810d096:	f7f3 fe0f 	bl	8100cb8 <__aeabi_d2uiz>
 810d09a:	2801      	cmp	r0, #1
 810d09c:	bf38      	it	cc
 810d09e:	2001      	movcc	r0, #1
 810d0a0:	f7f3 fab8 	bl	8100614 <__aeabi_ui2d>
 810d0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810d0a6:	4606      	mov	r6, r0
 810d0a8:	460f      	mov	r7, r1
 810d0aa:	bb23      	cbnz	r3, 810d0f6 <_strtod_l+0xb66>
 810d0ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 810d0b0:	9010      	str	r0, [sp, #64]	; 0x40
 810d0b2:	9311      	str	r3, [sp, #68]	; 0x44
 810d0b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 810d0b8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810d0bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810d0be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 810d0c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 810d0c4:	1a9b      	subs	r3, r3, r2
 810d0c6:	930f      	str	r3, [sp, #60]	; 0x3c
 810d0c8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810d0cc:	eeb0 0a48 	vmov.f32	s0, s16
 810d0d0:	eef0 0a68 	vmov.f32	s1, s17
 810d0d4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 810d0d8:	f7ff f8fc 	bl	810c2d4 <__ulp>
 810d0dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 810d0e0:	ec53 2b10 	vmov	r2, r3, d0
 810d0e4:	f7f3 fb10 	bl	8100708 <__aeabi_dmul>
 810d0e8:	ec53 2b18 	vmov	r2, r3, d8
 810d0ec:	f7f3 f956 	bl	810039c <__adddf3>
 810d0f0:	4680      	mov	r8, r0
 810d0f2:	4689      	mov	r9, r1
 810d0f4:	e78d      	b.n	810d012 <_strtod_l+0xa82>
 810d0f6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 810d0fa:	e7db      	b.n	810d0b4 <_strtod_l+0xb24>
 810d0fc:	a314      	add	r3, pc, #80	; (adr r3, 810d150 <_strtod_l+0xbc0>)
 810d0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 810d102:	f7f3 fd73 	bl	8100bec <__aeabi_dcmplt>
 810d106:	e7b3      	b.n	810d070 <_strtod_l+0xae0>
 810d108:	2300      	movs	r3, #0
 810d10a:	930a      	str	r3, [sp, #40]	; 0x28
 810d10c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 810d10e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810d110:	6013      	str	r3, [r2, #0]
 810d112:	f7ff ba7c 	b.w	810c60e <_strtod_l+0x7e>
 810d116:	2a65      	cmp	r2, #101	; 0x65
 810d118:	f43f ab75 	beq.w	810c806 <_strtod_l+0x276>
 810d11c:	2a45      	cmp	r2, #69	; 0x45
 810d11e:	f43f ab72 	beq.w	810c806 <_strtod_l+0x276>
 810d122:	2301      	movs	r3, #1
 810d124:	f7ff bbaa 	b.w	810c87c <_strtod_l+0x2ec>
 810d128:	00000000 	.word	0x00000000
 810d12c:	bff00000 	.word	0xbff00000
 810d130:	00000000 	.word	0x00000000
 810d134:	3ff00000 	.word	0x3ff00000
 810d138:	94a03595 	.word	0x94a03595
 810d13c:	3fdfffff 	.word	0x3fdfffff
 810d140:	35afe535 	.word	0x35afe535
 810d144:	3fe00000 	.word	0x3fe00000
 810d148:	ffc00000 	.word	0xffc00000
 810d14c:	41dfffff 	.word	0x41dfffff
 810d150:	94a03595 	.word	0x94a03595
 810d154:	3fcfffff 	.word	0x3fcfffff
 810d158:	3ff00000 	.word	0x3ff00000
 810d15c:	3fe00000 	.word	0x3fe00000
 810d160:	7ff00000 	.word	0x7ff00000
 810d164:	7fe00000 	.word	0x7fe00000
 810d168:	7c9fffff 	.word	0x7c9fffff
 810d16c:	7fefffff 	.word	0x7fefffff

0810d170 <_strtod_r>:
 810d170:	4b01      	ldr	r3, [pc, #4]	; (810d178 <_strtod_r+0x8>)
 810d172:	f7ff ba0d 	b.w	810c590 <_strtod_l>
 810d176:	bf00      	nop
 810d178:	100000cc 	.word	0x100000cc

0810d17c <_strtol_l.constprop.0>:
 810d17c:	2b01      	cmp	r3, #1
 810d17e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d182:	d001      	beq.n	810d188 <_strtol_l.constprop.0+0xc>
 810d184:	2b24      	cmp	r3, #36	; 0x24
 810d186:	d906      	bls.n	810d196 <_strtol_l.constprop.0+0x1a>
 810d188:	f7fd fd88 	bl	810ac9c <__errno>
 810d18c:	2316      	movs	r3, #22
 810d18e:	6003      	str	r3, [r0, #0]
 810d190:	2000      	movs	r0, #0
 810d192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d196:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 810d27c <_strtol_l.constprop.0+0x100>
 810d19a:	460d      	mov	r5, r1
 810d19c:	462e      	mov	r6, r5
 810d19e:	f815 4b01 	ldrb.w	r4, [r5], #1
 810d1a2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 810d1a6:	f017 0708 	ands.w	r7, r7, #8
 810d1aa:	d1f7      	bne.n	810d19c <_strtol_l.constprop.0+0x20>
 810d1ac:	2c2d      	cmp	r4, #45	; 0x2d
 810d1ae:	d132      	bne.n	810d216 <_strtol_l.constprop.0+0x9a>
 810d1b0:	782c      	ldrb	r4, [r5, #0]
 810d1b2:	2701      	movs	r7, #1
 810d1b4:	1cb5      	adds	r5, r6, #2
 810d1b6:	2b00      	cmp	r3, #0
 810d1b8:	d05b      	beq.n	810d272 <_strtol_l.constprop.0+0xf6>
 810d1ba:	2b10      	cmp	r3, #16
 810d1bc:	d109      	bne.n	810d1d2 <_strtol_l.constprop.0+0x56>
 810d1be:	2c30      	cmp	r4, #48	; 0x30
 810d1c0:	d107      	bne.n	810d1d2 <_strtol_l.constprop.0+0x56>
 810d1c2:	782c      	ldrb	r4, [r5, #0]
 810d1c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 810d1c8:	2c58      	cmp	r4, #88	; 0x58
 810d1ca:	d14d      	bne.n	810d268 <_strtol_l.constprop.0+0xec>
 810d1cc:	786c      	ldrb	r4, [r5, #1]
 810d1ce:	2310      	movs	r3, #16
 810d1d0:	3502      	adds	r5, #2
 810d1d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 810d1d6:	f108 38ff 	add.w	r8, r8, #4294967295
 810d1da:	f04f 0e00 	mov.w	lr, #0
 810d1de:	fbb8 f9f3 	udiv	r9, r8, r3
 810d1e2:	4676      	mov	r6, lr
 810d1e4:	fb03 8a19 	mls	sl, r3, r9, r8
 810d1e8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 810d1ec:	f1bc 0f09 	cmp.w	ip, #9
 810d1f0:	d816      	bhi.n	810d220 <_strtol_l.constprop.0+0xa4>
 810d1f2:	4664      	mov	r4, ip
 810d1f4:	42a3      	cmp	r3, r4
 810d1f6:	dd24      	ble.n	810d242 <_strtol_l.constprop.0+0xc6>
 810d1f8:	f1be 3fff 	cmp.w	lr, #4294967295
 810d1fc:	d008      	beq.n	810d210 <_strtol_l.constprop.0+0x94>
 810d1fe:	45b1      	cmp	r9, r6
 810d200:	d31c      	bcc.n	810d23c <_strtol_l.constprop.0+0xc0>
 810d202:	d101      	bne.n	810d208 <_strtol_l.constprop.0+0x8c>
 810d204:	45a2      	cmp	sl, r4
 810d206:	db19      	blt.n	810d23c <_strtol_l.constprop.0+0xc0>
 810d208:	fb06 4603 	mla	r6, r6, r3, r4
 810d20c:	f04f 0e01 	mov.w	lr, #1
 810d210:	f815 4b01 	ldrb.w	r4, [r5], #1
 810d214:	e7e8      	b.n	810d1e8 <_strtol_l.constprop.0+0x6c>
 810d216:	2c2b      	cmp	r4, #43	; 0x2b
 810d218:	bf04      	itt	eq
 810d21a:	782c      	ldrbeq	r4, [r5, #0]
 810d21c:	1cb5      	addeq	r5, r6, #2
 810d21e:	e7ca      	b.n	810d1b6 <_strtol_l.constprop.0+0x3a>
 810d220:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 810d224:	f1bc 0f19 	cmp.w	ip, #25
 810d228:	d801      	bhi.n	810d22e <_strtol_l.constprop.0+0xb2>
 810d22a:	3c37      	subs	r4, #55	; 0x37
 810d22c:	e7e2      	b.n	810d1f4 <_strtol_l.constprop.0+0x78>
 810d22e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 810d232:	f1bc 0f19 	cmp.w	ip, #25
 810d236:	d804      	bhi.n	810d242 <_strtol_l.constprop.0+0xc6>
 810d238:	3c57      	subs	r4, #87	; 0x57
 810d23a:	e7db      	b.n	810d1f4 <_strtol_l.constprop.0+0x78>
 810d23c:	f04f 3eff 	mov.w	lr, #4294967295
 810d240:	e7e6      	b.n	810d210 <_strtol_l.constprop.0+0x94>
 810d242:	f1be 3fff 	cmp.w	lr, #4294967295
 810d246:	d105      	bne.n	810d254 <_strtol_l.constprop.0+0xd8>
 810d248:	2322      	movs	r3, #34	; 0x22
 810d24a:	6003      	str	r3, [r0, #0]
 810d24c:	4646      	mov	r6, r8
 810d24e:	b942      	cbnz	r2, 810d262 <_strtol_l.constprop.0+0xe6>
 810d250:	4630      	mov	r0, r6
 810d252:	e79e      	b.n	810d192 <_strtol_l.constprop.0+0x16>
 810d254:	b107      	cbz	r7, 810d258 <_strtol_l.constprop.0+0xdc>
 810d256:	4276      	negs	r6, r6
 810d258:	2a00      	cmp	r2, #0
 810d25a:	d0f9      	beq.n	810d250 <_strtol_l.constprop.0+0xd4>
 810d25c:	f1be 0f00 	cmp.w	lr, #0
 810d260:	d000      	beq.n	810d264 <_strtol_l.constprop.0+0xe8>
 810d262:	1e69      	subs	r1, r5, #1
 810d264:	6011      	str	r1, [r2, #0]
 810d266:	e7f3      	b.n	810d250 <_strtol_l.constprop.0+0xd4>
 810d268:	2430      	movs	r4, #48	; 0x30
 810d26a:	2b00      	cmp	r3, #0
 810d26c:	d1b1      	bne.n	810d1d2 <_strtol_l.constprop.0+0x56>
 810d26e:	2308      	movs	r3, #8
 810d270:	e7af      	b.n	810d1d2 <_strtol_l.constprop.0+0x56>
 810d272:	2c30      	cmp	r4, #48	; 0x30
 810d274:	d0a5      	beq.n	810d1c2 <_strtol_l.constprop.0+0x46>
 810d276:	230a      	movs	r3, #10
 810d278:	e7ab      	b.n	810d1d2 <_strtol_l.constprop.0+0x56>
 810d27a:	bf00      	nop
 810d27c:	0810eae1 	.word	0x0810eae1

0810d280 <_strtol_r>:
 810d280:	f7ff bf7c 	b.w	810d17c <_strtol_l.constprop.0>

0810d284 <__ssputs_r>:
 810d284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810d288:	688e      	ldr	r6, [r1, #8]
 810d28a:	461f      	mov	r7, r3
 810d28c:	42be      	cmp	r6, r7
 810d28e:	680b      	ldr	r3, [r1, #0]
 810d290:	4682      	mov	sl, r0
 810d292:	460c      	mov	r4, r1
 810d294:	4690      	mov	r8, r2
 810d296:	d82c      	bhi.n	810d2f2 <__ssputs_r+0x6e>
 810d298:	898a      	ldrh	r2, [r1, #12]
 810d29a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810d29e:	d026      	beq.n	810d2ee <__ssputs_r+0x6a>
 810d2a0:	6965      	ldr	r5, [r4, #20]
 810d2a2:	6909      	ldr	r1, [r1, #16]
 810d2a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810d2a8:	eba3 0901 	sub.w	r9, r3, r1
 810d2ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810d2b0:	1c7b      	adds	r3, r7, #1
 810d2b2:	444b      	add	r3, r9
 810d2b4:	106d      	asrs	r5, r5, #1
 810d2b6:	429d      	cmp	r5, r3
 810d2b8:	bf38      	it	cc
 810d2ba:	461d      	movcc	r5, r3
 810d2bc:	0553      	lsls	r3, r2, #21
 810d2be:	d527      	bpl.n	810d310 <__ssputs_r+0x8c>
 810d2c0:	4629      	mov	r1, r5
 810d2c2:	f7fe fc0f 	bl	810bae4 <_malloc_r>
 810d2c6:	4606      	mov	r6, r0
 810d2c8:	b360      	cbz	r0, 810d324 <__ssputs_r+0xa0>
 810d2ca:	6921      	ldr	r1, [r4, #16]
 810d2cc:	464a      	mov	r2, r9
 810d2ce:	f000 fbf5 	bl	810dabc <memcpy>
 810d2d2:	89a3      	ldrh	r3, [r4, #12]
 810d2d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 810d2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810d2dc:	81a3      	strh	r3, [r4, #12]
 810d2de:	6126      	str	r6, [r4, #16]
 810d2e0:	6165      	str	r5, [r4, #20]
 810d2e2:	444e      	add	r6, r9
 810d2e4:	eba5 0509 	sub.w	r5, r5, r9
 810d2e8:	6026      	str	r6, [r4, #0]
 810d2ea:	60a5      	str	r5, [r4, #8]
 810d2ec:	463e      	mov	r6, r7
 810d2ee:	42be      	cmp	r6, r7
 810d2f0:	d900      	bls.n	810d2f4 <__ssputs_r+0x70>
 810d2f2:	463e      	mov	r6, r7
 810d2f4:	6820      	ldr	r0, [r4, #0]
 810d2f6:	4632      	mov	r2, r6
 810d2f8:	4641      	mov	r1, r8
 810d2fa:	f000 fba3 	bl	810da44 <memmove>
 810d2fe:	68a3      	ldr	r3, [r4, #8]
 810d300:	1b9b      	subs	r3, r3, r6
 810d302:	60a3      	str	r3, [r4, #8]
 810d304:	6823      	ldr	r3, [r4, #0]
 810d306:	4433      	add	r3, r6
 810d308:	6023      	str	r3, [r4, #0]
 810d30a:	2000      	movs	r0, #0
 810d30c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810d310:	462a      	mov	r2, r5
 810d312:	f000 ff86 	bl	810e222 <_realloc_r>
 810d316:	4606      	mov	r6, r0
 810d318:	2800      	cmp	r0, #0
 810d31a:	d1e0      	bne.n	810d2de <__ssputs_r+0x5a>
 810d31c:	6921      	ldr	r1, [r4, #16]
 810d31e:	4650      	mov	r0, sl
 810d320:	f7fe fb6c 	bl	810b9fc <_free_r>
 810d324:	230c      	movs	r3, #12
 810d326:	f8ca 3000 	str.w	r3, [sl]
 810d32a:	89a3      	ldrh	r3, [r4, #12]
 810d32c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d330:	81a3      	strh	r3, [r4, #12]
 810d332:	f04f 30ff 	mov.w	r0, #4294967295
 810d336:	e7e9      	b.n	810d30c <__ssputs_r+0x88>

0810d338 <_svfiprintf_r>:
 810d338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d33c:	4698      	mov	r8, r3
 810d33e:	898b      	ldrh	r3, [r1, #12]
 810d340:	061b      	lsls	r3, r3, #24
 810d342:	b09d      	sub	sp, #116	; 0x74
 810d344:	4607      	mov	r7, r0
 810d346:	460d      	mov	r5, r1
 810d348:	4614      	mov	r4, r2
 810d34a:	d50e      	bpl.n	810d36a <_svfiprintf_r+0x32>
 810d34c:	690b      	ldr	r3, [r1, #16]
 810d34e:	b963      	cbnz	r3, 810d36a <_svfiprintf_r+0x32>
 810d350:	2140      	movs	r1, #64	; 0x40
 810d352:	f7fe fbc7 	bl	810bae4 <_malloc_r>
 810d356:	6028      	str	r0, [r5, #0]
 810d358:	6128      	str	r0, [r5, #16]
 810d35a:	b920      	cbnz	r0, 810d366 <_svfiprintf_r+0x2e>
 810d35c:	230c      	movs	r3, #12
 810d35e:	603b      	str	r3, [r7, #0]
 810d360:	f04f 30ff 	mov.w	r0, #4294967295
 810d364:	e0d0      	b.n	810d508 <_svfiprintf_r+0x1d0>
 810d366:	2340      	movs	r3, #64	; 0x40
 810d368:	616b      	str	r3, [r5, #20]
 810d36a:	2300      	movs	r3, #0
 810d36c:	9309      	str	r3, [sp, #36]	; 0x24
 810d36e:	2320      	movs	r3, #32
 810d370:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d374:	f8cd 800c 	str.w	r8, [sp, #12]
 810d378:	2330      	movs	r3, #48	; 0x30
 810d37a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810d520 <_svfiprintf_r+0x1e8>
 810d37e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d382:	f04f 0901 	mov.w	r9, #1
 810d386:	4623      	mov	r3, r4
 810d388:	469a      	mov	sl, r3
 810d38a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d38e:	b10a      	cbz	r2, 810d394 <_svfiprintf_r+0x5c>
 810d390:	2a25      	cmp	r2, #37	; 0x25
 810d392:	d1f9      	bne.n	810d388 <_svfiprintf_r+0x50>
 810d394:	ebba 0b04 	subs.w	fp, sl, r4
 810d398:	d00b      	beq.n	810d3b2 <_svfiprintf_r+0x7a>
 810d39a:	465b      	mov	r3, fp
 810d39c:	4622      	mov	r2, r4
 810d39e:	4629      	mov	r1, r5
 810d3a0:	4638      	mov	r0, r7
 810d3a2:	f7ff ff6f 	bl	810d284 <__ssputs_r>
 810d3a6:	3001      	adds	r0, #1
 810d3a8:	f000 80a9 	beq.w	810d4fe <_svfiprintf_r+0x1c6>
 810d3ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d3ae:	445a      	add	r2, fp
 810d3b0:	9209      	str	r2, [sp, #36]	; 0x24
 810d3b2:	f89a 3000 	ldrb.w	r3, [sl]
 810d3b6:	2b00      	cmp	r3, #0
 810d3b8:	f000 80a1 	beq.w	810d4fe <_svfiprintf_r+0x1c6>
 810d3bc:	2300      	movs	r3, #0
 810d3be:	f04f 32ff 	mov.w	r2, #4294967295
 810d3c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d3c6:	f10a 0a01 	add.w	sl, sl, #1
 810d3ca:	9304      	str	r3, [sp, #16]
 810d3cc:	9307      	str	r3, [sp, #28]
 810d3ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d3d2:	931a      	str	r3, [sp, #104]	; 0x68
 810d3d4:	4654      	mov	r4, sl
 810d3d6:	2205      	movs	r2, #5
 810d3d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d3dc:	4850      	ldr	r0, [pc, #320]	; (810d520 <_svfiprintf_r+0x1e8>)
 810d3de:	f7f2 ff7f 	bl	81002e0 <memchr>
 810d3e2:	9a04      	ldr	r2, [sp, #16]
 810d3e4:	b9d8      	cbnz	r0, 810d41e <_svfiprintf_r+0xe6>
 810d3e6:	06d0      	lsls	r0, r2, #27
 810d3e8:	bf44      	itt	mi
 810d3ea:	2320      	movmi	r3, #32
 810d3ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d3f0:	0711      	lsls	r1, r2, #28
 810d3f2:	bf44      	itt	mi
 810d3f4:	232b      	movmi	r3, #43	; 0x2b
 810d3f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d3fa:	f89a 3000 	ldrb.w	r3, [sl]
 810d3fe:	2b2a      	cmp	r3, #42	; 0x2a
 810d400:	d015      	beq.n	810d42e <_svfiprintf_r+0xf6>
 810d402:	9a07      	ldr	r2, [sp, #28]
 810d404:	4654      	mov	r4, sl
 810d406:	2000      	movs	r0, #0
 810d408:	f04f 0c0a 	mov.w	ip, #10
 810d40c:	4621      	mov	r1, r4
 810d40e:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d412:	3b30      	subs	r3, #48	; 0x30
 810d414:	2b09      	cmp	r3, #9
 810d416:	d94d      	bls.n	810d4b4 <_svfiprintf_r+0x17c>
 810d418:	b1b0      	cbz	r0, 810d448 <_svfiprintf_r+0x110>
 810d41a:	9207      	str	r2, [sp, #28]
 810d41c:	e014      	b.n	810d448 <_svfiprintf_r+0x110>
 810d41e:	eba0 0308 	sub.w	r3, r0, r8
 810d422:	fa09 f303 	lsl.w	r3, r9, r3
 810d426:	4313      	orrs	r3, r2
 810d428:	9304      	str	r3, [sp, #16]
 810d42a:	46a2      	mov	sl, r4
 810d42c:	e7d2      	b.n	810d3d4 <_svfiprintf_r+0x9c>
 810d42e:	9b03      	ldr	r3, [sp, #12]
 810d430:	1d19      	adds	r1, r3, #4
 810d432:	681b      	ldr	r3, [r3, #0]
 810d434:	9103      	str	r1, [sp, #12]
 810d436:	2b00      	cmp	r3, #0
 810d438:	bfbb      	ittet	lt
 810d43a:	425b      	neglt	r3, r3
 810d43c:	f042 0202 	orrlt.w	r2, r2, #2
 810d440:	9307      	strge	r3, [sp, #28]
 810d442:	9307      	strlt	r3, [sp, #28]
 810d444:	bfb8      	it	lt
 810d446:	9204      	strlt	r2, [sp, #16]
 810d448:	7823      	ldrb	r3, [r4, #0]
 810d44a:	2b2e      	cmp	r3, #46	; 0x2e
 810d44c:	d10c      	bne.n	810d468 <_svfiprintf_r+0x130>
 810d44e:	7863      	ldrb	r3, [r4, #1]
 810d450:	2b2a      	cmp	r3, #42	; 0x2a
 810d452:	d134      	bne.n	810d4be <_svfiprintf_r+0x186>
 810d454:	9b03      	ldr	r3, [sp, #12]
 810d456:	1d1a      	adds	r2, r3, #4
 810d458:	681b      	ldr	r3, [r3, #0]
 810d45a:	9203      	str	r2, [sp, #12]
 810d45c:	2b00      	cmp	r3, #0
 810d45e:	bfb8      	it	lt
 810d460:	f04f 33ff 	movlt.w	r3, #4294967295
 810d464:	3402      	adds	r4, #2
 810d466:	9305      	str	r3, [sp, #20]
 810d468:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810d530 <_svfiprintf_r+0x1f8>
 810d46c:	7821      	ldrb	r1, [r4, #0]
 810d46e:	2203      	movs	r2, #3
 810d470:	4650      	mov	r0, sl
 810d472:	f7f2 ff35 	bl	81002e0 <memchr>
 810d476:	b138      	cbz	r0, 810d488 <_svfiprintf_r+0x150>
 810d478:	9b04      	ldr	r3, [sp, #16]
 810d47a:	eba0 000a 	sub.w	r0, r0, sl
 810d47e:	2240      	movs	r2, #64	; 0x40
 810d480:	4082      	lsls	r2, r0
 810d482:	4313      	orrs	r3, r2
 810d484:	3401      	adds	r4, #1
 810d486:	9304      	str	r3, [sp, #16]
 810d488:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d48c:	4825      	ldr	r0, [pc, #148]	; (810d524 <_svfiprintf_r+0x1ec>)
 810d48e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d492:	2206      	movs	r2, #6
 810d494:	f7f2 ff24 	bl	81002e0 <memchr>
 810d498:	2800      	cmp	r0, #0
 810d49a:	d038      	beq.n	810d50e <_svfiprintf_r+0x1d6>
 810d49c:	4b22      	ldr	r3, [pc, #136]	; (810d528 <_svfiprintf_r+0x1f0>)
 810d49e:	bb1b      	cbnz	r3, 810d4e8 <_svfiprintf_r+0x1b0>
 810d4a0:	9b03      	ldr	r3, [sp, #12]
 810d4a2:	3307      	adds	r3, #7
 810d4a4:	f023 0307 	bic.w	r3, r3, #7
 810d4a8:	3308      	adds	r3, #8
 810d4aa:	9303      	str	r3, [sp, #12]
 810d4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d4ae:	4433      	add	r3, r6
 810d4b0:	9309      	str	r3, [sp, #36]	; 0x24
 810d4b2:	e768      	b.n	810d386 <_svfiprintf_r+0x4e>
 810d4b4:	fb0c 3202 	mla	r2, ip, r2, r3
 810d4b8:	460c      	mov	r4, r1
 810d4ba:	2001      	movs	r0, #1
 810d4bc:	e7a6      	b.n	810d40c <_svfiprintf_r+0xd4>
 810d4be:	2300      	movs	r3, #0
 810d4c0:	3401      	adds	r4, #1
 810d4c2:	9305      	str	r3, [sp, #20]
 810d4c4:	4619      	mov	r1, r3
 810d4c6:	f04f 0c0a 	mov.w	ip, #10
 810d4ca:	4620      	mov	r0, r4
 810d4cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d4d0:	3a30      	subs	r2, #48	; 0x30
 810d4d2:	2a09      	cmp	r2, #9
 810d4d4:	d903      	bls.n	810d4de <_svfiprintf_r+0x1a6>
 810d4d6:	2b00      	cmp	r3, #0
 810d4d8:	d0c6      	beq.n	810d468 <_svfiprintf_r+0x130>
 810d4da:	9105      	str	r1, [sp, #20]
 810d4dc:	e7c4      	b.n	810d468 <_svfiprintf_r+0x130>
 810d4de:	fb0c 2101 	mla	r1, ip, r1, r2
 810d4e2:	4604      	mov	r4, r0
 810d4e4:	2301      	movs	r3, #1
 810d4e6:	e7f0      	b.n	810d4ca <_svfiprintf_r+0x192>
 810d4e8:	ab03      	add	r3, sp, #12
 810d4ea:	9300      	str	r3, [sp, #0]
 810d4ec:	462a      	mov	r2, r5
 810d4ee:	4b0f      	ldr	r3, [pc, #60]	; (810d52c <_svfiprintf_r+0x1f4>)
 810d4f0:	a904      	add	r1, sp, #16
 810d4f2:	4638      	mov	r0, r7
 810d4f4:	f7fc fc72 	bl	8109ddc <_printf_float>
 810d4f8:	1c42      	adds	r2, r0, #1
 810d4fa:	4606      	mov	r6, r0
 810d4fc:	d1d6      	bne.n	810d4ac <_svfiprintf_r+0x174>
 810d4fe:	89ab      	ldrh	r3, [r5, #12]
 810d500:	065b      	lsls	r3, r3, #25
 810d502:	f53f af2d 	bmi.w	810d360 <_svfiprintf_r+0x28>
 810d506:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d508:	b01d      	add	sp, #116	; 0x74
 810d50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d50e:	ab03      	add	r3, sp, #12
 810d510:	9300      	str	r3, [sp, #0]
 810d512:	462a      	mov	r2, r5
 810d514:	4b05      	ldr	r3, [pc, #20]	; (810d52c <_svfiprintf_r+0x1f4>)
 810d516:	a904      	add	r1, sp, #16
 810d518:	4638      	mov	r0, r7
 810d51a:	f7fc ff03 	bl	810a324 <_printf_i>
 810d51e:	e7eb      	b.n	810d4f8 <_svfiprintf_r+0x1c0>
 810d520:	0810ebe1 	.word	0x0810ebe1
 810d524:	0810ebeb 	.word	0x0810ebeb
 810d528:	08109ddd 	.word	0x08109ddd
 810d52c:	0810d285 	.word	0x0810d285
 810d530:	0810ebe7 	.word	0x0810ebe7

0810d534 <__sfputc_r>:
 810d534:	6893      	ldr	r3, [r2, #8]
 810d536:	3b01      	subs	r3, #1
 810d538:	2b00      	cmp	r3, #0
 810d53a:	b410      	push	{r4}
 810d53c:	6093      	str	r3, [r2, #8]
 810d53e:	da08      	bge.n	810d552 <__sfputc_r+0x1e>
 810d540:	6994      	ldr	r4, [r2, #24]
 810d542:	42a3      	cmp	r3, r4
 810d544:	db01      	blt.n	810d54a <__sfputc_r+0x16>
 810d546:	290a      	cmp	r1, #10
 810d548:	d103      	bne.n	810d552 <__sfputc_r+0x1e>
 810d54a:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d54e:	f000 b9e3 	b.w	810d918 <__swbuf_r>
 810d552:	6813      	ldr	r3, [r2, #0]
 810d554:	1c58      	adds	r0, r3, #1
 810d556:	6010      	str	r0, [r2, #0]
 810d558:	7019      	strb	r1, [r3, #0]
 810d55a:	4608      	mov	r0, r1
 810d55c:	f85d 4b04 	ldr.w	r4, [sp], #4
 810d560:	4770      	bx	lr

0810d562 <__sfputs_r>:
 810d562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d564:	4606      	mov	r6, r0
 810d566:	460f      	mov	r7, r1
 810d568:	4614      	mov	r4, r2
 810d56a:	18d5      	adds	r5, r2, r3
 810d56c:	42ac      	cmp	r4, r5
 810d56e:	d101      	bne.n	810d574 <__sfputs_r+0x12>
 810d570:	2000      	movs	r0, #0
 810d572:	e007      	b.n	810d584 <__sfputs_r+0x22>
 810d574:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d578:	463a      	mov	r2, r7
 810d57a:	4630      	mov	r0, r6
 810d57c:	f7ff ffda 	bl	810d534 <__sfputc_r>
 810d580:	1c43      	adds	r3, r0, #1
 810d582:	d1f3      	bne.n	810d56c <__sfputs_r+0xa>
 810d584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810d588 <_vfiprintf_r>:
 810d588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810d58c:	460d      	mov	r5, r1
 810d58e:	b09d      	sub	sp, #116	; 0x74
 810d590:	4614      	mov	r4, r2
 810d592:	4698      	mov	r8, r3
 810d594:	4606      	mov	r6, r0
 810d596:	b118      	cbz	r0, 810d5a0 <_vfiprintf_r+0x18>
 810d598:	6a03      	ldr	r3, [r0, #32]
 810d59a:	b90b      	cbnz	r3, 810d5a0 <_vfiprintf_r+0x18>
 810d59c:	f7fd fa80 	bl	810aaa0 <__sinit>
 810d5a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d5a2:	07d9      	lsls	r1, r3, #31
 810d5a4:	d405      	bmi.n	810d5b2 <_vfiprintf_r+0x2a>
 810d5a6:	89ab      	ldrh	r3, [r5, #12]
 810d5a8:	059a      	lsls	r2, r3, #22
 810d5aa:	d402      	bmi.n	810d5b2 <_vfiprintf_r+0x2a>
 810d5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d5ae:	f7fd fba0 	bl	810acf2 <__retarget_lock_acquire_recursive>
 810d5b2:	89ab      	ldrh	r3, [r5, #12]
 810d5b4:	071b      	lsls	r3, r3, #28
 810d5b6:	d501      	bpl.n	810d5bc <_vfiprintf_r+0x34>
 810d5b8:	692b      	ldr	r3, [r5, #16]
 810d5ba:	b99b      	cbnz	r3, 810d5e4 <_vfiprintf_r+0x5c>
 810d5bc:	4629      	mov	r1, r5
 810d5be:	4630      	mov	r0, r6
 810d5c0:	f000 f9e8 	bl	810d994 <__swsetup_r>
 810d5c4:	b170      	cbz	r0, 810d5e4 <_vfiprintf_r+0x5c>
 810d5c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d5c8:	07dc      	lsls	r4, r3, #31
 810d5ca:	d504      	bpl.n	810d5d6 <_vfiprintf_r+0x4e>
 810d5cc:	f04f 30ff 	mov.w	r0, #4294967295
 810d5d0:	b01d      	add	sp, #116	; 0x74
 810d5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810d5d6:	89ab      	ldrh	r3, [r5, #12]
 810d5d8:	0598      	lsls	r0, r3, #22
 810d5da:	d4f7      	bmi.n	810d5cc <_vfiprintf_r+0x44>
 810d5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d5de:	f7fd fb89 	bl	810acf4 <__retarget_lock_release_recursive>
 810d5e2:	e7f3      	b.n	810d5cc <_vfiprintf_r+0x44>
 810d5e4:	2300      	movs	r3, #0
 810d5e6:	9309      	str	r3, [sp, #36]	; 0x24
 810d5e8:	2320      	movs	r3, #32
 810d5ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810d5ee:	f8cd 800c 	str.w	r8, [sp, #12]
 810d5f2:	2330      	movs	r3, #48	; 0x30
 810d5f4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810d7a8 <_vfiprintf_r+0x220>
 810d5f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810d5fc:	f04f 0901 	mov.w	r9, #1
 810d600:	4623      	mov	r3, r4
 810d602:	469a      	mov	sl, r3
 810d604:	f813 2b01 	ldrb.w	r2, [r3], #1
 810d608:	b10a      	cbz	r2, 810d60e <_vfiprintf_r+0x86>
 810d60a:	2a25      	cmp	r2, #37	; 0x25
 810d60c:	d1f9      	bne.n	810d602 <_vfiprintf_r+0x7a>
 810d60e:	ebba 0b04 	subs.w	fp, sl, r4
 810d612:	d00b      	beq.n	810d62c <_vfiprintf_r+0xa4>
 810d614:	465b      	mov	r3, fp
 810d616:	4622      	mov	r2, r4
 810d618:	4629      	mov	r1, r5
 810d61a:	4630      	mov	r0, r6
 810d61c:	f7ff ffa1 	bl	810d562 <__sfputs_r>
 810d620:	3001      	adds	r0, #1
 810d622:	f000 80a9 	beq.w	810d778 <_vfiprintf_r+0x1f0>
 810d626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810d628:	445a      	add	r2, fp
 810d62a:	9209      	str	r2, [sp, #36]	; 0x24
 810d62c:	f89a 3000 	ldrb.w	r3, [sl]
 810d630:	2b00      	cmp	r3, #0
 810d632:	f000 80a1 	beq.w	810d778 <_vfiprintf_r+0x1f0>
 810d636:	2300      	movs	r3, #0
 810d638:	f04f 32ff 	mov.w	r2, #4294967295
 810d63c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810d640:	f10a 0a01 	add.w	sl, sl, #1
 810d644:	9304      	str	r3, [sp, #16]
 810d646:	9307      	str	r3, [sp, #28]
 810d648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810d64c:	931a      	str	r3, [sp, #104]	; 0x68
 810d64e:	4654      	mov	r4, sl
 810d650:	2205      	movs	r2, #5
 810d652:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d656:	4854      	ldr	r0, [pc, #336]	; (810d7a8 <_vfiprintf_r+0x220>)
 810d658:	f7f2 fe42 	bl	81002e0 <memchr>
 810d65c:	9a04      	ldr	r2, [sp, #16]
 810d65e:	b9d8      	cbnz	r0, 810d698 <_vfiprintf_r+0x110>
 810d660:	06d1      	lsls	r1, r2, #27
 810d662:	bf44      	itt	mi
 810d664:	2320      	movmi	r3, #32
 810d666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d66a:	0713      	lsls	r3, r2, #28
 810d66c:	bf44      	itt	mi
 810d66e:	232b      	movmi	r3, #43	; 0x2b
 810d670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810d674:	f89a 3000 	ldrb.w	r3, [sl]
 810d678:	2b2a      	cmp	r3, #42	; 0x2a
 810d67a:	d015      	beq.n	810d6a8 <_vfiprintf_r+0x120>
 810d67c:	9a07      	ldr	r2, [sp, #28]
 810d67e:	4654      	mov	r4, sl
 810d680:	2000      	movs	r0, #0
 810d682:	f04f 0c0a 	mov.w	ip, #10
 810d686:	4621      	mov	r1, r4
 810d688:	f811 3b01 	ldrb.w	r3, [r1], #1
 810d68c:	3b30      	subs	r3, #48	; 0x30
 810d68e:	2b09      	cmp	r3, #9
 810d690:	d94d      	bls.n	810d72e <_vfiprintf_r+0x1a6>
 810d692:	b1b0      	cbz	r0, 810d6c2 <_vfiprintf_r+0x13a>
 810d694:	9207      	str	r2, [sp, #28]
 810d696:	e014      	b.n	810d6c2 <_vfiprintf_r+0x13a>
 810d698:	eba0 0308 	sub.w	r3, r0, r8
 810d69c:	fa09 f303 	lsl.w	r3, r9, r3
 810d6a0:	4313      	orrs	r3, r2
 810d6a2:	9304      	str	r3, [sp, #16]
 810d6a4:	46a2      	mov	sl, r4
 810d6a6:	e7d2      	b.n	810d64e <_vfiprintf_r+0xc6>
 810d6a8:	9b03      	ldr	r3, [sp, #12]
 810d6aa:	1d19      	adds	r1, r3, #4
 810d6ac:	681b      	ldr	r3, [r3, #0]
 810d6ae:	9103      	str	r1, [sp, #12]
 810d6b0:	2b00      	cmp	r3, #0
 810d6b2:	bfbb      	ittet	lt
 810d6b4:	425b      	neglt	r3, r3
 810d6b6:	f042 0202 	orrlt.w	r2, r2, #2
 810d6ba:	9307      	strge	r3, [sp, #28]
 810d6bc:	9307      	strlt	r3, [sp, #28]
 810d6be:	bfb8      	it	lt
 810d6c0:	9204      	strlt	r2, [sp, #16]
 810d6c2:	7823      	ldrb	r3, [r4, #0]
 810d6c4:	2b2e      	cmp	r3, #46	; 0x2e
 810d6c6:	d10c      	bne.n	810d6e2 <_vfiprintf_r+0x15a>
 810d6c8:	7863      	ldrb	r3, [r4, #1]
 810d6ca:	2b2a      	cmp	r3, #42	; 0x2a
 810d6cc:	d134      	bne.n	810d738 <_vfiprintf_r+0x1b0>
 810d6ce:	9b03      	ldr	r3, [sp, #12]
 810d6d0:	1d1a      	adds	r2, r3, #4
 810d6d2:	681b      	ldr	r3, [r3, #0]
 810d6d4:	9203      	str	r2, [sp, #12]
 810d6d6:	2b00      	cmp	r3, #0
 810d6d8:	bfb8      	it	lt
 810d6da:	f04f 33ff 	movlt.w	r3, #4294967295
 810d6de:	3402      	adds	r4, #2
 810d6e0:	9305      	str	r3, [sp, #20]
 810d6e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810d7b8 <_vfiprintf_r+0x230>
 810d6e6:	7821      	ldrb	r1, [r4, #0]
 810d6e8:	2203      	movs	r2, #3
 810d6ea:	4650      	mov	r0, sl
 810d6ec:	f7f2 fdf8 	bl	81002e0 <memchr>
 810d6f0:	b138      	cbz	r0, 810d702 <_vfiprintf_r+0x17a>
 810d6f2:	9b04      	ldr	r3, [sp, #16]
 810d6f4:	eba0 000a 	sub.w	r0, r0, sl
 810d6f8:	2240      	movs	r2, #64	; 0x40
 810d6fa:	4082      	lsls	r2, r0
 810d6fc:	4313      	orrs	r3, r2
 810d6fe:	3401      	adds	r4, #1
 810d700:	9304      	str	r3, [sp, #16]
 810d702:	f814 1b01 	ldrb.w	r1, [r4], #1
 810d706:	4829      	ldr	r0, [pc, #164]	; (810d7ac <_vfiprintf_r+0x224>)
 810d708:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810d70c:	2206      	movs	r2, #6
 810d70e:	f7f2 fde7 	bl	81002e0 <memchr>
 810d712:	2800      	cmp	r0, #0
 810d714:	d03f      	beq.n	810d796 <_vfiprintf_r+0x20e>
 810d716:	4b26      	ldr	r3, [pc, #152]	; (810d7b0 <_vfiprintf_r+0x228>)
 810d718:	bb1b      	cbnz	r3, 810d762 <_vfiprintf_r+0x1da>
 810d71a:	9b03      	ldr	r3, [sp, #12]
 810d71c:	3307      	adds	r3, #7
 810d71e:	f023 0307 	bic.w	r3, r3, #7
 810d722:	3308      	adds	r3, #8
 810d724:	9303      	str	r3, [sp, #12]
 810d726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810d728:	443b      	add	r3, r7
 810d72a:	9309      	str	r3, [sp, #36]	; 0x24
 810d72c:	e768      	b.n	810d600 <_vfiprintf_r+0x78>
 810d72e:	fb0c 3202 	mla	r2, ip, r2, r3
 810d732:	460c      	mov	r4, r1
 810d734:	2001      	movs	r0, #1
 810d736:	e7a6      	b.n	810d686 <_vfiprintf_r+0xfe>
 810d738:	2300      	movs	r3, #0
 810d73a:	3401      	adds	r4, #1
 810d73c:	9305      	str	r3, [sp, #20]
 810d73e:	4619      	mov	r1, r3
 810d740:	f04f 0c0a 	mov.w	ip, #10
 810d744:	4620      	mov	r0, r4
 810d746:	f810 2b01 	ldrb.w	r2, [r0], #1
 810d74a:	3a30      	subs	r2, #48	; 0x30
 810d74c:	2a09      	cmp	r2, #9
 810d74e:	d903      	bls.n	810d758 <_vfiprintf_r+0x1d0>
 810d750:	2b00      	cmp	r3, #0
 810d752:	d0c6      	beq.n	810d6e2 <_vfiprintf_r+0x15a>
 810d754:	9105      	str	r1, [sp, #20]
 810d756:	e7c4      	b.n	810d6e2 <_vfiprintf_r+0x15a>
 810d758:	fb0c 2101 	mla	r1, ip, r1, r2
 810d75c:	4604      	mov	r4, r0
 810d75e:	2301      	movs	r3, #1
 810d760:	e7f0      	b.n	810d744 <_vfiprintf_r+0x1bc>
 810d762:	ab03      	add	r3, sp, #12
 810d764:	9300      	str	r3, [sp, #0]
 810d766:	462a      	mov	r2, r5
 810d768:	4b12      	ldr	r3, [pc, #72]	; (810d7b4 <_vfiprintf_r+0x22c>)
 810d76a:	a904      	add	r1, sp, #16
 810d76c:	4630      	mov	r0, r6
 810d76e:	f7fc fb35 	bl	8109ddc <_printf_float>
 810d772:	4607      	mov	r7, r0
 810d774:	1c78      	adds	r0, r7, #1
 810d776:	d1d6      	bne.n	810d726 <_vfiprintf_r+0x19e>
 810d778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810d77a:	07d9      	lsls	r1, r3, #31
 810d77c:	d405      	bmi.n	810d78a <_vfiprintf_r+0x202>
 810d77e:	89ab      	ldrh	r3, [r5, #12]
 810d780:	059a      	lsls	r2, r3, #22
 810d782:	d402      	bmi.n	810d78a <_vfiprintf_r+0x202>
 810d784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810d786:	f7fd fab5 	bl	810acf4 <__retarget_lock_release_recursive>
 810d78a:	89ab      	ldrh	r3, [r5, #12]
 810d78c:	065b      	lsls	r3, r3, #25
 810d78e:	f53f af1d 	bmi.w	810d5cc <_vfiprintf_r+0x44>
 810d792:	9809      	ldr	r0, [sp, #36]	; 0x24
 810d794:	e71c      	b.n	810d5d0 <_vfiprintf_r+0x48>
 810d796:	ab03      	add	r3, sp, #12
 810d798:	9300      	str	r3, [sp, #0]
 810d79a:	462a      	mov	r2, r5
 810d79c:	4b05      	ldr	r3, [pc, #20]	; (810d7b4 <_vfiprintf_r+0x22c>)
 810d79e:	a904      	add	r1, sp, #16
 810d7a0:	4630      	mov	r0, r6
 810d7a2:	f7fc fdbf 	bl	810a324 <_printf_i>
 810d7a6:	e7e4      	b.n	810d772 <_vfiprintf_r+0x1ea>
 810d7a8:	0810ebe1 	.word	0x0810ebe1
 810d7ac:	0810ebeb 	.word	0x0810ebeb
 810d7b0:	08109ddd 	.word	0x08109ddd
 810d7b4:	0810d563 	.word	0x0810d563
 810d7b8:	0810ebe7 	.word	0x0810ebe7

0810d7bc <__sflush_r>:
 810d7bc:	898a      	ldrh	r2, [r1, #12]
 810d7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810d7c2:	4605      	mov	r5, r0
 810d7c4:	0710      	lsls	r0, r2, #28
 810d7c6:	460c      	mov	r4, r1
 810d7c8:	d458      	bmi.n	810d87c <__sflush_r+0xc0>
 810d7ca:	684b      	ldr	r3, [r1, #4]
 810d7cc:	2b00      	cmp	r3, #0
 810d7ce:	dc05      	bgt.n	810d7dc <__sflush_r+0x20>
 810d7d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810d7d2:	2b00      	cmp	r3, #0
 810d7d4:	dc02      	bgt.n	810d7dc <__sflush_r+0x20>
 810d7d6:	2000      	movs	r0, #0
 810d7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810d7dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810d7de:	2e00      	cmp	r6, #0
 810d7e0:	d0f9      	beq.n	810d7d6 <__sflush_r+0x1a>
 810d7e2:	2300      	movs	r3, #0
 810d7e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810d7e8:	682f      	ldr	r7, [r5, #0]
 810d7ea:	6a21      	ldr	r1, [r4, #32]
 810d7ec:	602b      	str	r3, [r5, #0]
 810d7ee:	d032      	beq.n	810d856 <__sflush_r+0x9a>
 810d7f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810d7f2:	89a3      	ldrh	r3, [r4, #12]
 810d7f4:	075a      	lsls	r2, r3, #29
 810d7f6:	d505      	bpl.n	810d804 <__sflush_r+0x48>
 810d7f8:	6863      	ldr	r3, [r4, #4]
 810d7fa:	1ac0      	subs	r0, r0, r3
 810d7fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810d7fe:	b10b      	cbz	r3, 810d804 <__sflush_r+0x48>
 810d800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810d802:	1ac0      	subs	r0, r0, r3
 810d804:	2300      	movs	r3, #0
 810d806:	4602      	mov	r2, r0
 810d808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810d80a:	6a21      	ldr	r1, [r4, #32]
 810d80c:	4628      	mov	r0, r5
 810d80e:	47b0      	blx	r6
 810d810:	1c43      	adds	r3, r0, #1
 810d812:	89a3      	ldrh	r3, [r4, #12]
 810d814:	d106      	bne.n	810d824 <__sflush_r+0x68>
 810d816:	6829      	ldr	r1, [r5, #0]
 810d818:	291d      	cmp	r1, #29
 810d81a:	d82b      	bhi.n	810d874 <__sflush_r+0xb8>
 810d81c:	4a29      	ldr	r2, [pc, #164]	; (810d8c4 <__sflush_r+0x108>)
 810d81e:	410a      	asrs	r2, r1
 810d820:	07d6      	lsls	r6, r2, #31
 810d822:	d427      	bmi.n	810d874 <__sflush_r+0xb8>
 810d824:	2200      	movs	r2, #0
 810d826:	6062      	str	r2, [r4, #4]
 810d828:	04d9      	lsls	r1, r3, #19
 810d82a:	6922      	ldr	r2, [r4, #16]
 810d82c:	6022      	str	r2, [r4, #0]
 810d82e:	d504      	bpl.n	810d83a <__sflush_r+0x7e>
 810d830:	1c42      	adds	r2, r0, #1
 810d832:	d101      	bne.n	810d838 <__sflush_r+0x7c>
 810d834:	682b      	ldr	r3, [r5, #0]
 810d836:	b903      	cbnz	r3, 810d83a <__sflush_r+0x7e>
 810d838:	6560      	str	r0, [r4, #84]	; 0x54
 810d83a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d83c:	602f      	str	r7, [r5, #0]
 810d83e:	2900      	cmp	r1, #0
 810d840:	d0c9      	beq.n	810d7d6 <__sflush_r+0x1a>
 810d842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d846:	4299      	cmp	r1, r3
 810d848:	d002      	beq.n	810d850 <__sflush_r+0x94>
 810d84a:	4628      	mov	r0, r5
 810d84c:	f7fe f8d6 	bl	810b9fc <_free_r>
 810d850:	2000      	movs	r0, #0
 810d852:	6360      	str	r0, [r4, #52]	; 0x34
 810d854:	e7c0      	b.n	810d7d8 <__sflush_r+0x1c>
 810d856:	2301      	movs	r3, #1
 810d858:	4628      	mov	r0, r5
 810d85a:	47b0      	blx	r6
 810d85c:	1c41      	adds	r1, r0, #1
 810d85e:	d1c8      	bne.n	810d7f2 <__sflush_r+0x36>
 810d860:	682b      	ldr	r3, [r5, #0]
 810d862:	2b00      	cmp	r3, #0
 810d864:	d0c5      	beq.n	810d7f2 <__sflush_r+0x36>
 810d866:	2b1d      	cmp	r3, #29
 810d868:	d001      	beq.n	810d86e <__sflush_r+0xb2>
 810d86a:	2b16      	cmp	r3, #22
 810d86c:	d101      	bne.n	810d872 <__sflush_r+0xb6>
 810d86e:	602f      	str	r7, [r5, #0]
 810d870:	e7b1      	b.n	810d7d6 <__sflush_r+0x1a>
 810d872:	89a3      	ldrh	r3, [r4, #12]
 810d874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d878:	81a3      	strh	r3, [r4, #12]
 810d87a:	e7ad      	b.n	810d7d8 <__sflush_r+0x1c>
 810d87c:	690f      	ldr	r7, [r1, #16]
 810d87e:	2f00      	cmp	r7, #0
 810d880:	d0a9      	beq.n	810d7d6 <__sflush_r+0x1a>
 810d882:	0793      	lsls	r3, r2, #30
 810d884:	680e      	ldr	r6, [r1, #0]
 810d886:	bf08      	it	eq
 810d888:	694b      	ldreq	r3, [r1, #20]
 810d88a:	600f      	str	r7, [r1, #0]
 810d88c:	bf18      	it	ne
 810d88e:	2300      	movne	r3, #0
 810d890:	eba6 0807 	sub.w	r8, r6, r7
 810d894:	608b      	str	r3, [r1, #8]
 810d896:	f1b8 0f00 	cmp.w	r8, #0
 810d89a:	dd9c      	ble.n	810d7d6 <__sflush_r+0x1a>
 810d89c:	6a21      	ldr	r1, [r4, #32]
 810d89e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810d8a0:	4643      	mov	r3, r8
 810d8a2:	463a      	mov	r2, r7
 810d8a4:	4628      	mov	r0, r5
 810d8a6:	47b0      	blx	r6
 810d8a8:	2800      	cmp	r0, #0
 810d8aa:	dc06      	bgt.n	810d8ba <__sflush_r+0xfe>
 810d8ac:	89a3      	ldrh	r3, [r4, #12]
 810d8ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810d8b2:	81a3      	strh	r3, [r4, #12]
 810d8b4:	f04f 30ff 	mov.w	r0, #4294967295
 810d8b8:	e78e      	b.n	810d7d8 <__sflush_r+0x1c>
 810d8ba:	4407      	add	r7, r0
 810d8bc:	eba8 0800 	sub.w	r8, r8, r0
 810d8c0:	e7e9      	b.n	810d896 <__sflush_r+0xda>
 810d8c2:	bf00      	nop
 810d8c4:	dfbffffe 	.word	0xdfbffffe

0810d8c8 <_fflush_r>:
 810d8c8:	b538      	push	{r3, r4, r5, lr}
 810d8ca:	690b      	ldr	r3, [r1, #16]
 810d8cc:	4605      	mov	r5, r0
 810d8ce:	460c      	mov	r4, r1
 810d8d0:	b913      	cbnz	r3, 810d8d8 <_fflush_r+0x10>
 810d8d2:	2500      	movs	r5, #0
 810d8d4:	4628      	mov	r0, r5
 810d8d6:	bd38      	pop	{r3, r4, r5, pc}
 810d8d8:	b118      	cbz	r0, 810d8e2 <_fflush_r+0x1a>
 810d8da:	6a03      	ldr	r3, [r0, #32]
 810d8dc:	b90b      	cbnz	r3, 810d8e2 <_fflush_r+0x1a>
 810d8de:	f7fd f8df 	bl	810aaa0 <__sinit>
 810d8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810d8e6:	2b00      	cmp	r3, #0
 810d8e8:	d0f3      	beq.n	810d8d2 <_fflush_r+0xa>
 810d8ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810d8ec:	07d0      	lsls	r0, r2, #31
 810d8ee:	d404      	bmi.n	810d8fa <_fflush_r+0x32>
 810d8f0:	0599      	lsls	r1, r3, #22
 810d8f2:	d402      	bmi.n	810d8fa <_fflush_r+0x32>
 810d8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810d8f6:	f7fd f9fc 	bl	810acf2 <__retarget_lock_acquire_recursive>
 810d8fa:	4628      	mov	r0, r5
 810d8fc:	4621      	mov	r1, r4
 810d8fe:	f7ff ff5d 	bl	810d7bc <__sflush_r>
 810d902:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810d904:	07da      	lsls	r2, r3, #31
 810d906:	4605      	mov	r5, r0
 810d908:	d4e4      	bmi.n	810d8d4 <_fflush_r+0xc>
 810d90a:	89a3      	ldrh	r3, [r4, #12]
 810d90c:	059b      	lsls	r3, r3, #22
 810d90e:	d4e1      	bmi.n	810d8d4 <_fflush_r+0xc>
 810d910:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810d912:	f7fd f9ef 	bl	810acf4 <__retarget_lock_release_recursive>
 810d916:	e7dd      	b.n	810d8d4 <_fflush_r+0xc>

0810d918 <__swbuf_r>:
 810d918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d91a:	460e      	mov	r6, r1
 810d91c:	4614      	mov	r4, r2
 810d91e:	4605      	mov	r5, r0
 810d920:	b118      	cbz	r0, 810d92a <__swbuf_r+0x12>
 810d922:	6a03      	ldr	r3, [r0, #32]
 810d924:	b90b      	cbnz	r3, 810d92a <__swbuf_r+0x12>
 810d926:	f7fd f8bb 	bl	810aaa0 <__sinit>
 810d92a:	69a3      	ldr	r3, [r4, #24]
 810d92c:	60a3      	str	r3, [r4, #8]
 810d92e:	89a3      	ldrh	r3, [r4, #12]
 810d930:	071a      	lsls	r2, r3, #28
 810d932:	d525      	bpl.n	810d980 <__swbuf_r+0x68>
 810d934:	6923      	ldr	r3, [r4, #16]
 810d936:	b31b      	cbz	r3, 810d980 <__swbuf_r+0x68>
 810d938:	6823      	ldr	r3, [r4, #0]
 810d93a:	6922      	ldr	r2, [r4, #16]
 810d93c:	1a98      	subs	r0, r3, r2
 810d93e:	6963      	ldr	r3, [r4, #20]
 810d940:	b2f6      	uxtb	r6, r6
 810d942:	4283      	cmp	r3, r0
 810d944:	4637      	mov	r7, r6
 810d946:	dc04      	bgt.n	810d952 <__swbuf_r+0x3a>
 810d948:	4621      	mov	r1, r4
 810d94a:	4628      	mov	r0, r5
 810d94c:	f7ff ffbc 	bl	810d8c8 <_fflush_r>
 810d950:	b9e0      	cbnz	r0, 810d98c <__swbuf_r+0x74>
 810d952:	68a3      	ldr	r3, [r4, #8]
 810d954:	3b01      	subs	r3, #1
 810d956:	60a3      	str	r3, [r4, #8]
 810d958:	6823      	ldr	r3, [r4, #0]
 810d95a:	1c5a      	adds	r2, r3, #1
 810d95c:	6022      	str	r2, [r4, #0]
 810d95e:	701e      	strb	r6, [r3, #0]
 810d960:	6962      	ldr	r2, [r4, #20]
 810d962:	1c43      	adds	r3, r0, #1
 810d964:	429a      	cmp	r2, r3
 810d966:	d004      	beq.n	810d972 <__swbuf_r+0x5a>
 810d968:	89a3      	ldrh	r3, [r4, #12]
 810d96a:	07db      	lsls	r3, r3, #31
 810d96c:	d506      	bpl.n	810d97c <__swbuf_r+0x64>
 810d96e:	2e0a      	cmp	r6, #10
 810d970:	d104      	bne.n	810d97c <__swbuf_r+0x64>
 810d972:	4621      	mov	r1, r4
 810d974:	4628      	mov	r0, r5
 810d976:	f7ff ffa7 	bl	810d8c8 <_fflush_r>
 810d97a:	b938      	cbnz	r0, 810d98c <__swbuf_r+0x74>
 810d97c:	4638      	mov	r0, r7
 810d97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 810d980:	4621      	mov	r1, r4
 810d982:	4628      	mov	r0, r5
 810d984:	f000 f806 	bl	810d994 <__swsetup_r>
 810d988:	2800      	cmp	r0, #0
 810d98a:	d0d5      	beq.n	810d938 <__swbuf_r+0x20>
 810d98c:	f04f 37ff 	mov.w	r7, #4294967295
 810d990:	e7f4      	b.n	810d97c <__swbuf_r+0x64>
	...

0810d994 <__swsetup_r>:
 810d994:	b538      	push	{r3, r4, r5, lr}
 810d996:	4b2a      	ldr	r3, [pc, #168]	; (810da40 <__swsetup_r+0xac>)
 810d998:	4605      	mov	r5, r0
 810d99a:	6818      	ldr	r0, [r3, #0]
 810d99c:	460c      	mov	r4, r1
 810d99e:	b118      	cbz	r0, 810d9a8 <__swsetup_r+0x14>
 810d9a0:	6a03      	ldr	r3, [r0, #32]
 810d9a2:	b90b      	cbnz	r3, 810d9a8 <__swsetup_r+0x14>
 810d9a4:	f7fd f87c 	bl	810aaa0 <__sinit>
 810d9a8:	89a3      	ldrh	r3, [r4, #12]
 810d9aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810d9ae:	0718      	lsls	r0, r3, #28
 810d9b0:	d422      	bmi.n	810d9f8 <__swsetup_r+0x64>
 810d9b2:	06d9      	lsls	r1, r3, #27
 810d9b4:	d407      	bmi.n	810d9c6 <__swsetup_r+0x32>
 810d9b6:	2309      	movs	r3, #9
 810d9b8:	602b      	str	r3, [r5, #0]
 810d9ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810d9be:	81a3      	strh	r3, [r4, #12]
 810d9c0:	f04f 30ff 	mov.w	r0, #4294967295
 810d9c4:	e034      	b.n	810da30 <__swsetup_r+0x9c>
 810d9c6:	0758      	lsls	r0, r3, #29
 810d9c8:	d512      	bpl.n	810d9f0 <__swsetup_r+0x5c>
 810d9ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810d9cc:	b141      	cbz	r1, 810d9e0 <__swsetup_r+0x4c>
 810d9ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810d9d2:	4299      	cmp	r1, r3
 810d9d4:	d002      	beq.n	810d9dc <__swsetup_r+0x48>
 810d9d6:	4628      	mov	r0, r5
 810d9d8:	f7fe f810 	bl	810b9fc <_free_r>
 810d9dc:	2300      	movs	r3, #0
 810d9de:	6363      	str	r3, [r4, #52]	; 0x34
 810d9e0:	89a3      	ldrh	r3, [r4, #12]
 810d9e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810d9e6:	81a3      	strh	r3, [r4, #12]
 810d9e8:	2300      	movs	r3, #0
 810d9ea:	6063      	str	r3, [r4, #4]
 810d9ec:	6923      	ldr	r3, [r4, #16]
 810d9ee:	6023      	str	r3, [r4, #0]
 810d9f0:	89a3      	ldrh	r3, [r4, #12]
 810d9f2:	f043 0308 	orr.w	r3, r3, #8
 810d9f6:	81a3      	strh	r3, [r4, #12]
 810d9f8:	6923      	ldr	r3, [r4, #16]
 810d9fa:	b94b      	cbnz	r3, 810da10 <__swsetup_r+0x7c>
 810d9fc:	89a3      	ldrh	r3, [r4, #12]
 810d9fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810da02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810da06:	d003      	beq.n	810da10 <__swsetup_r+0x7c>
 810da08:	4621      	mov	r1, r4
 810da0a:	4628      	mov	r0, r5
 810da0c:	f000 fc7e 	bl	810e30c <__smakebuf_r>
 810da10:	89a0      	ldrh	r0, [r4, #12]
 810da12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810da16:	f010 0301 	ands.w	r3, r0, #1
 810da1a:	d00a      	beq.n	810da32 <__swsetup_r+0x9e>
 810da1c:	2300      	movs	r3, #0
 810da1e:	60a3      	str	r3, [r4, #8]
 810da20:	6963      	ldr	r3, [r4, #20]
 810da22:	425b      	negs	r3, r3
 810da24:	61a3      	str	r3, [r4, #24]
 810da26:	6923      	ldr	r3, [r4, #16]
 810da28:	b943      	cbnz	r3, 810da3c <__swsetup_r+0xa8>
 810da2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810da2e:	d1c4      	bne.n	810d9ba <__swsetup_r+0x26>
 810da30:	bd38      	pop	{r3, r4, r5, pc}
 810da32:	0781      	lsls	r1, r0, #30
 810da34:	bf58      	it	pl
 810da36:	6963      	ldrpl	r3, [r4, #20]
 810da38:	60a3      	str	r3, [r4, #8]
 810da3a:	e7f4      	b.n	810da26 <__swsetup_r+0x92>
 810da3c:	2000      	movs	r0, #0
 810da3e:	e7f7      	b.n	810da30 <__swsetup_r+0x9c>
 810da40:	100000c8 	.word	0x100000c8

0810da44 <memmove>:
 810da44:	4288      	cmp	r0, r1
 810da46:	b510      	push	{r4, lr}
 810da48:	eb01 0402 	add.w	r4, r1, r2
 810da4c:	d902      	bls.n	810da54 <memmove+0x10>
 810da4e:	4284      	cmp	r4, r0
 810da50:	4623      	mov	r3, r4
 810da52:	d807      	bhi.n	810da64 <memmove+0x20>
 810da54:	1e43      	subs	r3, r0, #1
 810da56:	42a1      	cmp	r1, r4
 810da58:	d008      	beq.n	810da6c <memmove+0x28>
 810da5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 810da5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 810da62:	e7f8      	b.n	810da56 <memmove+0x12>
 810da64:	4402      	add	r2, r0
 810da66:	4601      	mov	r1, r0
 810da68:	428a      	cmp	r2, r1
 810da6a:	d100      	bne.n	810da6e <memmove+0x2a>
 810da6c:	bd10      	pop	{r4, pc}
 810da6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810da72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810da76:	e7f7      	b.n	810da68 <memmove+0x24>

0810da78 <strncmp>:
 810da78:	b510      	push	{r4, lr}
 810da7a:	b16a      	cbz	r2, 810da98 <strncmp+0x20>
 810da7c:	3901      	subs	r1, #1
 810da7e:	1884      	adds	r4, r0, r2
 810da80:	f810 2b01 	ldrb.w	r2, [r0], #1
 810da84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810da88:	429a      	cmp	r2, r3
 810da8a:	d103      	bne.n	810da94 <strncmp+0x1c>
 810da8c:	42a0      	cmp	r0, r4
 810da8e:	d001      	beq.n	810da94 <strncmp+0x1c>
 810da90:	2a00      	cmp	r2, #0
 810da92:	d1f5      	bne.n	810da80 <strncmp+0x8>
 810da94:	1ad0      	subs	r0, r2, r3
 810da96:	bd10      	pop	{r4, pc}
 810da98:	4610      	mov	r0, r2
 810da9a:	e7fc      	b.n	810da96 <strncmp+0x1e>

0810da9c <_sbrk_r>:
 810da9c:	b538      	push	{r3, r4, r5, lr}
 810da9e:	4d06      	ldr	r5, [pc, #24]	; (810dab8 <_sbrk_r+0x1c>)
 810daa0:	2300      	movs	r3, #0
 810daa2:	4604      	mov	r4, r0
 810daa4:	4608      	mov	r0, r1
 810daa6:	602b      	str	r3, [r5, #0]
 810daa8:	f7f5 fc60 	bl	810336c <_sbrk>
 810daac:	1c43      	adds	r3, r0, #1
 810daae:	d102      	bne.n	810dab6 <_sbrk_r+0x1a>
 810dab0:	682b      	ldr	r3, [r5, #0]
 810dab2:	b103      	cbz	r3, 810dab6 <_sbrk_r+0x1a>
 810dab4:	6023      	str	r3, [r4, #0]
 810dab6:	bd38      	pop	{r3, r4, r5, pc}
 810dab8:	100006a4 	.word	0x100006a4

0810dabc <memcpy>:
 810dabc:	440a      	add	r2, r1
 810dabe:	4291      	cmp	r1, r2
 810dac0:	f100 33ff 	add.w	r3, r0, #4294967295
 810dac4:	d100      	bne.n	810dac8 <memcpy+0xc>
 810dac6:	4770      	bx	lr
 810dac8:	b510      	push	{r4, lr}
 810daca:	f811 4b01 	ldrb.w	r4, [r1], #1
 810dace:	f803 4f01 	strb.w	r4, [r3, #1]!
 810dad2:	4291      	cmp	r1, r2
 810dad4:	d1f9      	bne.n	810daca <memcpy+0xe>
 810dad6:	bd10      	pop	{r4, pc}

0810dad8 <nan>:
 810dad8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810dae0 <nan+0x8>
 810dadc:	4770      	bx	lr
 810dade:	bf00      	nop
 810dae0:	00000000 	.word	0x00000000
 810dae4:	7ff80000 	.word	0x7ff80000

0810dae8 <__assert_func>:
 810dae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810daea:	4614      	mov	r4, r2
 810daec:	461a      	mov	r2, r3
 810daee:	4b09      	ldr	r3, [pc, #36]	; (810db14 <__assert_func+0x2c>)
 810daf0:	681b      	ldr	r3, [r3, #0]
 810daf2:	4605      	mov	r5, r0
 810daf4:	68d8      	ldr	r0, [r3, #12]
 810daf6:	b14c      	cbz	r4, 810db0c <__assert_func+0x24>
 810daf8:	4b07      	ldr	r3, [pc, #28]	; (810db18 <__assert_func+0x30>)
 810dafa:	9100      	str	r1, [sp, #0]
 810dafc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810db00:	4906      	ldr	r1, [pc, #24]	; (810db1c <__assert_func+0x34>)
 810db02:	462b      	mov	r3, r5
 810db04:	f000 fbca 	bl	810e29c <fiprintf>
 810db08:	f000 fc5e 	bl	810e3c8 <abort>
 810db0c:	4b04      	ldr	r3, [pc, #16]	; (810db20 <__assert_func+0x38>)
 810db0e:	461c      	mov	r4, r3
 810db10:	e7f3      	b.n	810dafa <__assert_func+0x12>
 810db12:	bf00      	nop
 810db14:	100000c8 	.word	0x100000c8
 810db18:	0810ebfa 	.word	0x0810ebfa
 810db1c:	0810ec07 	.word	0x0810ec07
 810db20:	0810ec35 	.word	0x0810ec35

0810db24 <_calloc_r>:
 810db24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810db26:	fba1 2402 	umull	r2, r4, r1, r2
 810db2a:	b94c      	cbnz	r4, 810db40 <_calloc_r+0x1c>
 810db2c:	4611      	mov	r1, r2
 810db2e:	9201      	str	r2, [sp, #4]
 810db30:	f7fd ffd8 	bl	810bae4 <_malloc_r>
 810db34:	9a01      	ldr	r2, [sp, #4]
 810db36:	4605      	mov	r5, r0
 810db38:	b930      	cbnz	r0, 810db48 <_calloc_r+0x24>
 810db3a:	4628      	mov	r0, r5
 810db3c:	b003      	add	sp, #12
 810db3e:	bd30      	pop	{r4, r5, pc}
 810db40:	220c      	movs	r2, #12
 810db42:	6002      	str	r2, [r0, #0]
 810db44:	2500      	movs	r5, #0
 810db46:	e7f8      	b.n	810db3a <_calloc_r+0x16>
 810db48:	4621      	mov	r1, r4
 810db4a:	f7fd f854 	bl	810abf6 <memset>
 810db4e:	e7f4      	b.n	810db3a <_calloc_r+0x16>

0810db50 <rshift>:
 810db50:	6903      	ldr	r3, [r0, #16]
 810db52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810db56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810db5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 810db5e:	f100 0414 	add.w	r4, r0, #20
 810db62:	dd45      	ble.n	810dbf0 <rshift+0xa0>
 810db64:	f011 011f 	ands.w	r1, r1, #31
 810db68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810db6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810db70:	d10c      	bne.n	810db8c <rshift+0x3c>
 810db72:	f100 0710 	add.w	r7, r0, #16
 810db76:	4629      	mov	r1, r5
 810db78:	42b1      	cmp	r1, r6
 810db7a:	d334      	bcc.n	810dbe6 <rshift+0x96>
 810db7c:	1a9b      	subs	r3, r3, r2
 810db7e:	009b      	lsls	r3, r3, #2
 810db80:	1eea      	subs	r2, r5, #3
 810db82:	4296      	cmp	r6, r2
 810db84:	bf38      	it	cc
 810db86:	2300      	movcc	r3, #0
 810db88:	4423      	add	r3, r4
 810db8a:	e015      	b.n	810dbb8 <rshift+0x68>
 810db8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810db90:	f1c1 0820 	rsb	r8, r1, #32
 810db94:	40cf      	lsrs	r7, r1
 810db96:	f105 0e04 	add.w	lr, r5, #4
 810db9a:	46a1      	mov	r9, r4
 810db9c:	4576      	cmp	r6, lr
 810db9e:	46f4      	mov	ip, lr
 810dba0:	d815      	bhi.n	810dbce <rshift+0x7e>
 810dba2:	1a9a      	subs	r2, r3, r2
 810dba4:	0092      	lsls	r2, r2, #2
 810dba6:	3a04      	subs	r2, #4
 810dba8:	3501      	adds	r5, #1
 810dbaa:	42ae      	cmp	r6, r5
 810dbac:	bf38      	it	cc
 810dbae:	2200      	movcc	r2, #0
 810dbb0:	18a3      	adds	r3, r4, r2
 810dbb2:	50a7      	str	r7, [r4, r2]
 810dbb4:	b107      	cbz	r7, 810dbb8 <rshift+0x68>
 810dbb6:	3304      	adds	r3, #4
 810dbb8:	1b1a      	subs	r2, r3, r4
 810dbba:	42a3      	cmp	r3, r4
 810dbbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810dbc0:	bf08      	it	eq
 810dbc2:	2300      	moveq	r3, #0
 810dbc4:	6102      	str	r2, [r0, #16]
 810dbc6:	bf08      	it	eq
 810dbc8:	6143      	streq	r3, [r0, #20]
 810dbca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810dbce:	f8dc c000 	ldr.w	ip, [ip]
 810dbd2:	fa0c fc08 	lsl.w	ip, ip, r8
 810dbd6:	ea4c 0707 	orr.w	r7, ip, r7
 810dbda:	f849 7b04 	str.w	r7, [r9], #4
 810dbde:	f85e 7b04 	ldr.w	r7, [lr], #4
 810dbe2:	40cf      	lsrs	r7, r1
 810dbe4:	e7da      	b.n	810db9c <rshift+0x4c>
 810dbe6:	f851 cb04 	ldr.w	ip, [r1], #4
 810dbea:	f847 cf04 	str.w	ip, [r7, #4]!
 810dbee:	e7c3      	b.n	810db78 <rshift+0x28>
 810dbf0:	4623      	mov	r3, r4
 810dbf2:	e7e1      	b.n	810dbb8 <rshift+0x68>

0810dbf4 <__hexdig_fun>:
 810dbf4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810dbf8:	2b09      	cmp	r3, #9
 810dbfa:	d802      	bhi.n	810dc02 <__hexdig_fun+0xe>
 810dbfc:	3820      	subs	r0, #32
 810dbfe:	b2c0      	uxtb	r0, r0
 810dc00:	4770      	bx	lr
 810dc02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810dc06:	2b05      	cmp	r3, #5
 810dc08:	d801      	bhi.n	810dc0e <__hexdig_fun+0x1a>
 810dc0a:	3847      	subs	r0, #71	; 0x47
 810dc0c:	e7f7      	b.n	810dbfe <__hexdig_fun+0xa>
 810dc0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810dc12:	2b05      	cmp	r3, #5
 810dc14:	d801      	bhi.n	810dc1a <__hexdig_fun+0x26>
 810dc16:	3827      	subs	r0, #39	; 0x27
 810dc18:	e7f1      	b.n	810dbfe <__hexdig_fun+0xa>
 810dc1a:	2000      	movs	r0, #0
 810dc1c:	4770      	bx	lr
	...

0810dc20 <__gethex>:
 810dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810dc24:	4617      	mov	r7, r2
 810dc26:	680a      	ldr	r2, [r1, #0]
 810dc28:	b085      	sub	sp, #20
 810dc2a:	f102 0b02 	add.w	fp, r2, #2
 810dc2e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810dc32:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810dc36:	4681      	mov	r9, r0
 810dc38:	468a      	mov	sl, r1
 810dc3a:	9302      	str	r3, [sp, #8]
 810dc3c:	32fe      	adds	r2, #254	; 0xfe
 810dc3e:	eb02 030b 	add.w	r3, r2, fp
 810dc42:	46d8      	mov	r8, fp
 810dc44:	f81b 0b01 	ldrb.w	r0, [fp], #1
 810dc48:	9301      	str	r3, [sp, #4]
 810dc4a:	2830      	cmp	r0, #48	; 0x30
 810dc4c:	d0f7      	beq.n	810dc3e <__gethex+0x1e>
 810dc4e:	f7ff ffd1 	bl	810dbf4 <__hexdig_fun>
 810dc52:	4604      	mov	r4, r0
 810dc54:	2800      	cmp	r0, #0
 810dc56:	d138      	bne.n	810dcca <__gethex+0xaa>
 810dc58:	49a7      	ldr	r1, [pc, #668]	; (810def8 <__gethex+0x2d8>)
 810dc5a:	2201      	movs	r2, #1
 810dc5c:	4640      	mov	r0, r8
 810dc5e:	f7ff ff0b 	bl	810da78 <strncmp>
 810dc62:	4606      	mov	r6, r0
 810dc64:	2800      	cmp	r0, #0
 810dc66:	d169      	bne.n	810dd3c <__gethex+0x11c>
 810dc68:	f898 0001 	ldrb.w	r0, [r8, #1]
 810dc6c:	465d      	mov	r5, fp
 810dc6e:	f7ff ffc1 	bl	810dbf4 <__hexdig_fun>
 810dc72:	2800      	cmp	r0, #0
 810dc74:	d064      	beq.n	810dd40 <__gethex+0x120>
 810dc76:	465a      	mov	r2, fp
 810dc78:	7810      	ldrb	r0, [r2, #0]
 810dc7a:	2830      	cmp	r0, #48	; 0x30
 810dc7c:	4690      	mov	r8, r2
 810dc7e:	f102 0201 	add.w	r2, r2, #1
 810dc82:	d0f9      	beq.n	810dc78 <__gethex+0x58>
 810dc84:	f7ff ffb6 	bl	810dbf4 <__hexdig_fun>
 810dc88:	2301      	movs	r3, #1
 810dc8a:	fab0 f480 	clz	r4, r0
 810dc8e:	0964      	lsrs	r4, r4, #5
 810dc90:	465e      	mov	r6, fp
 810dc92:	9301      	str	r3, [sp, #4]
 810dc94:	4642      	mov	r2, r8
 810dc96:	4615      	mov	r5, r2
 810dc98:	3201      	adds	r2, #1
 810dc9a:	7828      	ldrb	r0, [r5, #0]
 810dc9c:	f7ff ffaa 	bl	810dbf4 <__hexdig_fun>
 810dca0:	2800      	cmp	r0, #0
 810dca2:	d1f8      	bne.n	810dc96 <__gethex+0x76>
 810dca4:	4994      	ldr	r1, [pc, #592]	; (810def8 <__gethex+0x2d8>)
 810dca6:	2201      	movs	r2, #1
 810dca8:	4628      	mov	r0, r5
 810dcaa:	f7ff fee5 	bl	810da78 <strncmp>
 810dcae:	b978      	cbnz	r0, 810dcd0 <__gethex+0xb0>
 810dcb0:	b946      	cbnz	r6, 810dcc4 <__gethex+0xa4>
 810dcb2:	1c6e      	adds	r6, r5, #1
 810dcb4:	4632      	mov	r2, r6
 810dcb6:	4615      	mov	r5, r2
 810dcb8:	3201      	adds	r2, #1
 810dcba:	7828      	ldrb	r0, [r5, #0]
 810dcbc:	f7ff ff9a 	bl	810dbf4 <__hexdig_fun>
 810dcc0:	2800      	cmp	r0, #0
 810dcc2:	d1f8      	bne.n	810dcb6 <__gethex+0x96>
 810dcc4:	1b73      	subs	r3, r6, r5
 810dcc6:	009e      	lsls	r6, r3, #2
 810dcc8:	e004      	b.n	810dcd4 <__gethex+0xb4>
 810dcca:	2400      	movs	r4, #0
 810dccc:	4626      	mov	r6, r4
 810dcce:	e7e1      	b.n	810dc94 <__gethex+0x74>
 810dcd0:	2e00      	cmp	r6, #0
 810dcd2:	d1f7      	bne.n	810dcc4 <__gethex+0xa4>
 810dcd4:	782b      	ldrb	r3, [r5, #0]
 810dcd6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810dcda:	2b50      	cmp	r3, #80	; 0x50
 810dcdc:	d13d      	bne.n	810dd5a <__gethex+0x13a>
 810dcde:	786b      	ldrb	r3, [r5, #1]
 810dce0:	2b2b      	cmp	r3, #43	; 0x2b
 810dce2:	d02f      	beq.n	810dd44 <__gethex+0x124>
 810dce4:	2b2d      	cmp	r3, #45	; 0x2d
 810dce6:	d031      	beq.n	810dd4c <__gethex+0x12c>
 810dce8:	1c69      	adds	r1, r5, #1
 810dcea:	f04f 0b00 	mov.w	fp, #0
 810dcee:	7808      	ldrb	r0, [r1, #0]
 810dcf0:	f7ff ff80 	bl	810dbf4 <__hexdig_fun>
 810dcf4:	1e42      	subs	r2, r0, #1
 810dcf6:	b2d2      	uxtb	r2, r2
 810dcf8:	2a18      	cmp	r2, #24
 810dcfa:	d82e      	bhi.n	810dd5a <__gethex+0x13a>
 810dcfc:	f1a0 0210 	sub.w	r2, r0, #16
 810dd00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810dd04:	f7ff ff76 	bl	810dbf4 <__hexdig_fun>
 810dd08:	f100 3cff 	add.w	ip, r0, #4294967295
 810dd0c:	fa5f fc8c 	uxtb.w	ip, ip
 810dd10:	f1bc 0f18 	cmp.w	ip, #24
 810dd14:	d91d      	bls.n	810dd52 <__gethex+0x132>
 810dd16:	f1bb 0f00 	cmp.w	fp, #0
 810dd1a:	d000      	beq.n	810dd1e <__gethex+0xfe>
 810dd1c:	4252      	negs	r2, r2
 810dd1e:	4416      	add	r6, r2
 810dd20:	f8ca 1000 	str.w	r1, [sl]
 810dd24:	b1dc      	cbz	r4, 810dd5e <__gethex+0x13e>
 810dd26:	9b01      	ldr	r3, [sp, #4]
 810dd28:	2b00      	cmp	r3, #0
 810dd2a:	bf14      	ite	ne
 810dd2c:	f04f 0800 	movne.w	r8, #0
 810dd30:	f04f 0806 	moveq.w	r8, #6
 810dd34:	4640      	mov	r0, r8
 810dd36:	b005      	add	sp, #20
 810dd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810dd3c:	4645      	mov	r5, r8
 810dd3e:	4626      	mov	r6, r4
 810dd40:	2401      	movs	r4, #1
 810dd42:	e7c7      	b.n	810dcd4 <__gethex+0xb4>
 810dd44:	f04f 0b00 	mov.w	fp, #0
 810dd48:	1ca9      	adds	r1, r5, #2
 810dd4a:	e7d0      	b.n	810dcee <__gethex+0xce>
 810dd4c:	f04f 0b01 	mov.w	fp, #1
 810dd50:	e7fa      	b.n	810dd48 <__gethex+0x128>
 810dd52:	230a      	movs	r3, #10
 810dd54:	fb03 0002 	mla	r0, r3, r2, r0
 810dd58:	e7d0      	b.n	810dcfc <__gethex+0xdc>
 810dd5a:	4629      	mov	r1, r5
 810dd5c:	e7e0      	b.n	810dd20 <__gethex+0x100>
 810dd5e:	eba5 0308 	sub.w	r3, r5, r8
 810dd62:	3b01      	subs	r3, #1
 810dd64:	4621      	mov	r1, r4
 810dd66:	2b07      	cmp	r3, #7
 810dd68:	dc0a      	bgt.n	810dd80 <__gethex+0x160>
 810dd6a:	4648      	mov	r0, r9
 810dd6c:	f7fd ff46 	bl	810bbfc <_Balloc>
 810dd70:	4604      	mov	r4, r0
 810dd72:	b940      	cbnz	r0, 810dd86 <__gethex+0x166>
 810dd74:	4b61      	ldr	r3, [pc, #388]	; (810defc <__gethex+0x2dc>)
 810dd76:	4602      	mov	r2, r0
 810dd78:	21e4      	movs	r1, #228	; 0xe4
 810dd7a:	4861      	ldr	r0, [pc, #388]	; (810df00 <__gethex+0x2e0>)
 810dd7c:	f7ff feb4 	bl	810dae8 <__assert_func>
 810dd80:	3101      	adds	r1, #1
 810dd82:	105b      	asrs	r3, r3, #1
 810dd84:	e7ef      	b.n	810dd66 <__gethex+0x146>
 810dd86:	f100 0a14 	add.w	sl, r0, #20
 810dd8a:	2300      	movs	r3, #0
 810dd8c:	495a      	ldr	r1, [pc, #360]	; (810def8 <__gethex+0x2d8>)
 810dd8e:	f8cd a004 	str.w	sl, [sp, #4]
 810dd92:	469b      	mov	fp, r3
 810dd94:	45a8      	cmp	r8, r5
 810dd96:	d342      	bcc.n	810de1e <__gethex+0x1fe>
 810dd98:	9801      	ldr	r0, [sp, #4]
 810dd9a:	f840 bb04 	str.w	fp, [r0], #4
 810dd9e:	eba0 000a 	sub.w	r0, r0, sl
 810dda2:	1080      	asrs	r0, r0, #2
 810dda4:	6120      	str	r0, [r4, #16]
 810dda6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810ddaa:	4658      	mov	r0, fp
 810ddac:	f7fe f818 	bl	810bde0 <__hi0bits>
 810ddb0:	683d      	ldr	r5, [r7, #0]
 810ddb2:	eba8 0000 	sub.w	r0, r8, r0
 810ddb6:	42a8      	cmp	r0, r5
 810ddb8:	dd59      	ble.n	810de6e <__gethex+0x24e>
 810ddba:	eba0 0805 	sub.w	r8, r0, r5
 810ddbe:	4641      	mov	r1, r8
 810ddc0:	4620      	mov	r0, r4
 810ddc2:	f7fe fba7 	bl	810c514 <__any_on>
 810ddc6:	4683      	mov	fp, r0
 810ddc8:	b1b8      	cbz	r0, 810ddfa <__gethex+0x1da>
 810ddca:	f108 33ff 	add.w	r3, r8, #4294967295
 810ddce:	1159      	asrs	r1, r3, #5
 810ddd0:	f003 021f 	and.w	r2, r3, #31
 810ddd4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810ddd8:	f04f 0b01 	mov.w	fp, #1
 810dddc:	fa0b f202 	lsl.w	r2, fp, r2
 810dde0:	420a      	tst	r2, r1
 810dde2:	d00a      	beq.n	810ddfa <__gethex+0x1da>
 810dde4:	455b      	cmp	r3, fp
 810dde6:	dd06      	ble.n	810ddf6 <__gethex+0x1d6>
 810dde8:	f1a8 0102 	sub.w	r1, r8, #2
 810ddec:	4620      	mov	r0, r4
 810ddee:	f7fe fb91 	bl	810c514 <__any_on>
 810ddf2:	2800      	cmp	r0, #0
 810ddf4:	d138      	bne.n	810de68 <__gethex+0x248>
 810ddf6:	f04f 0b02 	mov.w	fp, #2
 810ddfa:	4641      	mov	r1, r8
 810ddfc:	4620      	mov	r0, r4
 810ddfe:	f7ff fea7 	bl	810db50 <rshift>
 810de02:	4446      	add	r6, r8
 810de04:	68bb      	ldr	r3, [r7, #8]
 810de06:	42b3      	cmp	r3, r6
 810de08:	da41      	bge.n	810de8e <__gethex+0x26e>
 810de0a:	4621      	mov	r1, r4
 810de0c:	4648      	mov	r0, r9
 810de0e:	f7fd ff35 	bl	810bc7c <_Bfree>
 810de12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810de14:	2300      	movs	r3, #0
 810de16:	6013      	str	r3, [r2, #0]
 810de18:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 810de1c:	e78a      	b.n	810dd34 <__gethex+0x114>
 810de1e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 810de22:	2a2e      	cmp	r2, #46	; 0x2e
 810de24:	d014      	beq.n	810de50 <__gethex+0x230>
 810de26:	2b20      	cmp	r3, #32
 810de28:	d106      	bne.n	810de38 <__gethex+0x218>
 810de2a:	9b01      	ldr	r3, [sp, #4]
 810de2c:	f843 bb04 	str.w	fp, [r3], #4
 810de30:	f04f 0b00 	mov.w	fp, #0
 810de34:	9301      	str	r3, [sp, #4]
 810de36:	465b      	mov	r3, fp
 810de38:	7828      	ldrb	r0, [r5, #0]
 810de3a:	9303      	str	r3, [sp, #12]
 810de3c:	f7ff feda 	bl	810dbf4 <__hexdig_fun>
 810de40:	9b03      	ldr	r3, [sp, #12]
 810de42:	f000 000f 	and.w	r0, r0, #15
 810de46:	4098      	lsls	r0, r3
 810de48:	ea4b 0b00 	orr.w	fp, fp, r0
 810de4c:	3304      	adds	r3, #4
 810de4e:	e7a1      	b.n	810dd94 <__gethex+0x174>
 810de50:	45a8      	cmp	r8, r5
 810de52:	d8e8      	bhi.n	810de26 <__gethex+0x206>
 810de54:	2201      	movs	r2, #1
 810de56:	4628      	mov	r0, r5
 810de58:	9303      	str	r3, [sp, #12]
 810de5a:	f7ff fe0d 	bl	810da78 <strncmp>
 810de5e:	4926      	ldr	r1, [pc, #152]	; (810def8 <__gethex+0x2d8>)
 810de60:	9b03      	ldr	r3, [sp, #12]
 810de62:	2800      	cmp	r0, #0
 810de64:	d1df      	bne.n	810de26 <__gethex+0x206>
 810de66:	e795      	b.n	810dd94 <__gethex+0x174>
 810de68:	f04f 0b03 	mov.w	fp, #3
 810de6c:	e7c5      	b.n	810ddfa <__gethex+0x1da>
 810de6e:	da0b      	bge.n	810de88 <__gethex+0x268>
 810de70:	eba5 0800 	sub.w	r8, r5, r0
 810de74:	4621      	mov	r1, r4
 810de76:	4642      	mov	r2, r8
 810de78:	4648      	mov	r0, r9
 810de7a:	f7fe f919 	bl	810c0b0 <__lshift>
 810de7e:	eba6 0608 	sub.w	r6, r6, r8
 810de82:	4604      	mov	r4, r0
 810de84:	f100 0a14 	add.w	sl, r0, #20
 810de88:	f04f 0b00 	mov.w	fp, #0
 810de8c:	e7ba      	b.n	810de04 <__gethex+0x1e4>
 810de8e:	687b      	ldr	r3, [r7, #4]
 810de90:	42b3      	cmp	r3, r6
 810de92:	dd73      	ble.n	810df7c <__gethex+0x35c>
 810de94:	1b9e      	subs	r6, r3, r6
 810de96:	42b5      	cmp	r5, r6
 810de98:	dc34      	bgt.n	810df04 <__gethex+0x2e4>
 810de9a:	68fb      	ldr	r3, [r7, #12]
 810de9c:	2b02      	cmp	r3, #2
 810de9e:	d023      	beq.n	810dee8 <__gethex+0x2c8>
 810dea0:	2b03      	cmp	r3, #3
 810dea2:	d025      	beq.n	810def0 <__gethex+0x2d0>
 810dea4:	2b01      	cmp	r3, #1
 810dea6:	d115      	bne.n	810ded4 <__gethex+0x2b4>
 810dea8:	42b5      	cmp	r5, r6
 810deaa:	d113      	bne.n	810ded4 <__gethex+0x2b4>
 810deac:	2d01      	cmp	r5, #1
 810deae:	d10b      	bne.n	810dec8 <__gethex+0x2a8>
 810deb0:	9a02      	ldr	r2, [sp, #8]
 810deb2:	687b      	ldr	r3, [r7, #4]
 810deb4:	6013      	str	r3, [r2, #0]
 810deb6:	2301      	movs	r3, #1
 810deb8:	6123      	str	r3, [r4, #16]
 810deba:	f8ca 3000 	str.w	r3, [sl]
 810debe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810dec0:	f04f 0862 	mov.w	r8, #98	; 0x62
 810dec4:	601c      	str	r4, [r3, #0]
 810dec6:	e735      	b.n	810dd34 <__gethex+0x114>
 810dec8:	1e69      	subs	r1, r5, #1
 810deca:	4620      	mov	r0, r4
 810decc:	f7fe fb22 	bl	810c514 <__any_on>
 810ded0:	2800      	cmp	r0, #0
 810ded2:	d1ed      	bne.n	810deb0 <__gethex+0x290>
 810ded4:	4621      	mov	r1, r4
 810ded6:	4648      	mov	r0, r9
 810ded8:	f7fd fed0 	bl	810bc7c <_Bfree>
 810dedc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810dede:	2300      	movs	r3, #0
 810dee0:	6013      	str	r3, [r2, #0]
 810dee2:	f04f 0850 	mov.w	r8, #80	; 0x50
 810dee6:	e725      	b.n	810dd34 <__gethex+0x114>
 810dee8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810deea:	2b00      	cmp	r3, #0
 810deec:	d1f2      	bne.n	810ded4 <__gethex+0x2b4>
 810deee:	e7df      	b.n	810deb0 <__gethex+0x290>
 810def0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810def2:	2b00      	cmp	r3, #0
 810def4:	d1dc      	bne.n	810deb0 <__gethex+0x290>
 810def6:	e7ed      	b.n	810ded4 <__gethex+0x2b4>
 810def8:	0810ea8c 	.word	0x0810ea8c
 810defc:	0810e925 	.word	0x0810e925
 810df00:	0810ec36 	.word	0x0810ec36
 810df04:	f106 38ff 	add.w	r8, r6, #4294967295
 810df08:	f1bb 0f00 	cmp.w	fp, #0
 810df0c:	d133      	bne.n	810df76 <__gethex+0x356>
 810df0e:	f1b8 0f00 	cmp.w	r8, #0
 810df12:	d004      	beq.n	810df1e <__gethex+0x2fe>
 810df14:	4641      	mov	r1, r8
 810df16:	4620      	mov	r0, r4
 810df18:	f7fe fafc 	bl	810c514 <__any_on>
 810df1c:	4683      	mov	fp, r0
 810df1e:	ea4f 1268 	mov.w	r2, r8, asr #5
 810df22:	2301      	movs	r3, #1
 810df24:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810df28:	f008 081f 	and.w	r8, r8, #31
 810df2c:	fa03 f308 	lsl.w	r3, r3, r8
 810df30:	4213      	tst	r3, r2
 810df32:	4631      	mov	r1, r6
 810df34:	4620      	mov	r0, r4
 810df36:	bf18      	it	ne
 810df38:	f04b 0b02 	orrne.w	fp, fp, #2
 810df3c:	1bad      	subs	r5, r5, r6
 810df3e:	f7ff fe07 	bl	810db50 <rshift>
 810df42:	687e      	ldr	r6, [r7, #4]
 810df44:	f04f 0802 	mov.w	r8, #2
 810df48:	f1bb 0f00 	cmp.w	fp, #0
 810df4c:	d04a      	beq.n	810dfe4 <__gethex+0x3c4>
 810df4e:	68fb      	ldr	r3, [r7, #12]
 810df50:	2b02      	cmp	r3, #2
 810df52:	d016      	beq.n	810df82 <__gethex+0x362>
 810df54:	2b03      	cmp	r3, #3
 810df56:	d018      	beq.n	810df8a <__gethex+0x36a>
 810df58:	2b01      	cmp	r3, #1
 810df5a:	d109      	bne.n	810df70 <__gethex+0x350>
 810df5c:	f01b 0f02 	tst.w	fp, #2
 810df60:	d006      	beq.n	810df70 <__gethex+0x350>
 810df62:	f8da 3000 	ldr.w	r3, [sl]
 810df66:	ea4b 0b03 	orr.w	fp, fp, r3
 810df6a:	f01b 0f01 	tst.w	fp, #1
 810df6e:	d10f      	bne.n	810df90 <__gethex+0x370>
 810df70:	f048 0810 	orr.w	r8, r8, #16
 810df74:	e036      	b.n	810dfe4 <__gethex+0x3c4>
 810df76:	f04f 0b01 	mov.w	fp, #1
 810df7a:	e7d0      	b.n	810df1e <__gethex+0x2fe>
 810df7c:	f04f 0801 	mov.w	r8, #1
 810df80:	e7e2      	b.n	810df48 <__gethex+0x328>
 810df82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810df84:	f1c3 0301 	rsb	r3, r3, #1
 810df88:	930f      	str	r3, [sp, #60]	; 0x3c
 810df8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810df8c:	2b00      	cmp	r3, #0
 810df8e:	d0ef      	beq.n	810df70 <__gethex+0x350>
 810df90:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810df94:	f104 0214 	add.w	r2, r4, #20
 810df98:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810df9c:	9301      	str	r3, [sp, #4]
 810df9e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 810dfa2:	2300      	movs	r3, #0
 810dfa4:	4694      	mov	ip, r2
 810dfa6:	f852 1b04 	ldr.w	r1, [r2], #4
 810dfaa:	f1b1 3fff 	cmp.w	r1, #4294967295
 810dfae:	d01e      	beq.n	810dfee <__gethex+0x3ce>
 810dfb0:	3101      	adds	r1, #1
 810dfb2:	f8cc 1000 	str.w	r1, [ip]
 810dfb6:	f1b8 0f02 	cmp.w	r8, #2
 810dfba:	f104 0214 	add.w	r2, r4, #20
 810dfbe:	d13d      	bne.n	810e03c <__gethex+0x41c>
 810dfc0:	683b      	ldr	r3, [r7, #0]
 810dfc2:	3b01      	subs	r3, #1
 810dfc4:	42ab      	cmp	r3, r5
 810dfc6:	d10b      	bne.n	810dfe0 <__gethex+0x3c0>
 810dfc8:	1169      	asrs	r1, r5, #5
 810dfca:	2301      	movs	r3, #1
 810dfcc:	f005 051f 	and.w	r5, r5, #31
 810dfd0:	fa03 f505 	lsl.w	r5, r3, r5
 810dfd4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810dfd8:	421d      	tst	r5, r3
 810dfda:	bf18      	it	ne
 810dfdc:	f04f 0801 	movne.w	r8, #1
 810dfe0:	f048 0820 	orr.w	r8, r8, #32
 810dfe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810dfe6:	601c      	str	r4, [r3, #0]
 810dfe8:	9b02      	ldr	r3, [sp, #8]
 810dfea:	601e      	str	r6, [r3, #0]
 810dfec:	e6a2      	b.n	810dd34 <__gethex+0x114>
 810dfee:	4290      	cmp	r0, r2
 810dff0:	f842 3c04 	str.w	r3, [r2, #-4]
 810dff4:	d8d6      	bhi.n	810dfa4 <__gethex+0x384>
 810dff6:	68a2      	ldr	r2, [r4, #8]
 810dff8:	4593      	cmp	fp, r2
 810dffa:	db17      	blt.n	810e02c <__gethex+0x40c>
 810dffc:	6861      	ldr	r1, [r4, #4]
 810dffe:	4648      	mov	r0, r9
 810e000:	3101      	adds	r1, #1
 810e002:	f7fd fdfb 	bl	810bbfc <_Balloc>
 810e006:	4682      	mov	sl, r0
 810e008:	b918      	cbnz	r0, 810e012 <__gethex+0x3f2>
 810e00a:	4b1b      	ldr	r3, [pc, #108]	; (810e078 <__gethex+0x458>)
 810e00c:	4602      	mov	r2, r0
 810e00e:	2184      	movs	r1, #132	; 0x84
 810e010:	e6b3      	b.n	810dd7a <__gethex+0x15a>
 810e012:	6922      	ldr	r2, [r4, #16]
 810e014:	3202      	adds	r2, #2
 810e016:	f104 010c 	add.w	r1, r4, #12
 810e01a:	0092      	lsls	r2, r2, #2
 810e01c:	300c      	adds	r0, #12
 810e01e:	f7ff fd4d 	bl	810dabc <memcpy>
 810e022:	4621      	mov	r1, r4
 810e024:	4648      	mov	r0, r9
 810e026:	f7fd fe29 	bl	810bc7c <_Bfree>
 810e02a:	4654      	mov	r4, sl
 810e02c:	6922      	ldr	r2, [r4, #16]
 810e02e:	1c51      	adds	r1, r2, #1
 810e030:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 810e034:	6121      	str	r1, [r4, #16]
 810e036:	2101      	movs	r1, #1
 810e038:	6151      	str	r1, [r2, #20]
 810e03a:	e7bc      	b.n	810dfb6 <__gethex+0x396>
 810e03c:	6921      	ldr	r1, [r4, #16]
 810e03e:	4559      	cmp	r1, fp
 810e040:	dd0b      	ble.n	810e05a <__gethex+0x43a>
 810e042:	2101      	movs	r1, #1
 810e044:	4620      	mov	r0, r4
 810e046:	f7ff fd83 	bl	810db50 <rshift>
 810e04a:	68bb      	ldr	r3, [r7, #8]
 810e04c:	3601      	adds	r6, #1
 810e04e:	42b3      	cmp	r3, r6
 810e050:	f6ff aedb 	blt.w	810de0a <__gethex+0x1ea>
 810e054:	f04f 0801 	mov.w	r8, #1
 810e058:	e7c2      	b.n	810dfe0 <__gethex+0x3c0>
 810e05a:	f015 051f 	ands.w	r5, r5, #31
 810e05e:	d0f9      	beq.n	810e054 <__gethex+0x434>
 810e060:	9b01      	ldr	r3, [sp, #4]
 810e062:	441a      	add	r2, r3
 810e064:	f1c5 0520 	rsb	r5, r5, #32
 810e068:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810e06c:	f7fd feb8 	bl	810bde0 <__hi0bits>
 810e070:	42a8      	cmp	r0, r5
 810e072:	dbe6      	blt.n	810e042 <__gethex+0x422>
 810e074:	e7ee      	b.n	810e054 <__gethex+0x434>
 810e076:	bf00      	nop
 810e078:	0810e925 	.word	0x0810e925

0810e07c <L_shift>:
 810e07c:	f1c2 0208 	rsb	r2, r2, #8
 810e080:	0092      	lsls	r2, r2, #2
 810e082:	b570      	push	{r4, r5, r6, lr}
 810e084:	f1c2 0620 	rsb	r6, r2, #32
 810e088:	6843      	ldr	r3, [r0, #4]
 810e08a:	6804      	ldr	r4, [r0, #0]
 810e08c:	fa03 f506 	lsl.w	r5, r3, r6
 810e090:	432c      	orrs	r4, r5
 810e092:	40d3      	lsrs	r3, r2
 810e094:	6004      	str	r4, [r0, #0]
 810e096:	f840 3f04 	str.w	r3, [r0, #4]!
 810e09a:	4288      	cmp	r0, r1
 810e09c:	d3f4      	bcc.n	810e088 <L_shift+0xc>
 810e09e:	bd70      	pop	{r4, r5, r6, pc}

0810e0a0 <__match>:
 810e0a0:	b530      	push	{r4, r5, lr}
 810e0a2:	6803      	ldr	r3, [r0, #0]
 810e0a4:	3301      	adds	r3, #1
 810e0a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 810e0aa:	b914      	cbnz	r4, 810e0b2 <__match+0x12>
 810e0ac:	6003      	str	r3, [r0, #0]
 810e0ae:	2001      	movs	r0, #1
 810e0b0:	bd30      	pop	{r4, r5, pc}
 810e0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 810e0b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810e0ba:	2d19      	cmp	r5, #25
 810e0bc:	bf98      	it	ls
 810e0be:	3220      	addls	r2, #32
 810e0c0:	42a2      	cmp	r2, r4
 810e0c2:	d0f0      	beq.n	810e0a6 <__match+0x6>
 810e0c4:	2000      	movs	r0, #0
 810e0c6:	e7f3      	b.n	810e0b0 <__match+0x10>

0810e0c8 <__hexnan>:
 810e0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e0cc:	680b      	ldr	r3, [r1, #0]
 810e0ce:	6801      	ldr	r1, [r0, #0]
 810e0d0:	115e      	asrs	r6, r3, #5
 810e0d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810e0d6:	f013 031f 	ands.w	r3, r3, #31
 810e0da:	b087      	sub	sp, #28
 810e0dc:	bf18      	it	ne
 810e0de:	3604      	addne	r6, #4
 810e0e0:	2500      	movs	r5, #0
 810e0e2:	1f37      	subs	r7, r6, #4
 810e0e4:	4682      	mov	sl, r0
 810e0e6:	4690      	mov	r8, r2
 810e0e8:	9301      	str	r3, [sp, #4]
 810e0ea:	f846 5c04 	str.w	r5, [r6, #-4]
 810e0ee:	46b9      	mov	r9, r7
 810e0f0:	463c      	mov	r4, r7
 810e0f2:	9502      	str	r5, [sp, #8]
 810e0f4:	46ab      	mov	fp, r5
 810e0f6:	784a      	ldrb	r2, [r1, #1]
 810e0f8:	1c4b      	adds	r3, r1, #1
 810e0fa:	9303      	str	r3, [sp, #12]
 810e0fc:	b342      	cbz	r2, 810e150 <__hexnan+0x88>
 810e0fe:	4610      	mov	r0, r2
 810e100:	9105      	str	r1, [sp, #20]
 810e102:	9204      	str	r2, [sp, #16]
 810e104:	f7ff fd76 	bl	810dbf4 <__hexdig_fun>
 810e108:	2800      	cmp	r0, #0
 810e10a:	d14f      	bne.n	810e1ac <__hexnan+0xe4>
 810e10c:	9a04      	ldr	r2, [sp, #16]
 810e10e:	9905      	ldr	r1, [sp, #20]
 810e110:	2a20      	cmp	r2, #32
 810e112:	d818      	bhi.n	810e146 <__hexnan+0x7e>
 810e114:	9b02      	ldr	r3, [sp, #8]
 810e116:	459b      	cmp	fp, r3
 810e118:	dd13      	ble.n	810e142 <__hexnan+0x7a>
 810e11a:	454c      	cmp	r4, r9
 810e11c:	d206      	bcs.n	810e12c <__hexnan+0x64>
 810e11e:	2d07      	cmp	r5, #7
 810e120:	dc04      	bgt.n	810e12c <__hexnan+0x64>
 810e122:	462a      	mov	r2, r5
 810e124:	4649      	mov	r1, r9
 810e126:	4620      	mov	r0, r4
 810e128:	f7ff ffa8 	bl	810e07c <L_shift>
 810e12c:	4544      	cmp	r4, r8
 810e12e:	d950      	bls.n	810e1d2 <__hexnan+0x10a>
 810e130:	2300      	movs	r3, #0
 810e132:	f1a4 0904 	sub.w	r9, r4, #4
 810e136:	f844 3c04 	str.w	r3, [r4, #-4]
 810e13a:	f8cd b008 	str.w	fp, [sp, #8]
 810e13e:	464c      	mov	r4, r9
 810e140:	461d      	mov	r5, r3
 810e142:	9903      	ldr	r1, [sp, #12]
 810e144:	e7d7      	b.n	810e0f6 <__hexnan+0x2e>
 810e146:	2a29      	cmp	r2, #41	; 0x29
 810e148:	d155      	bne.n	810e1f6 <__hexnan+0x12e>
 810e14a:	3102      	adds	r1, #2
 810e14c:	f8ca 1000 	str.w	r1, [sl]
 810e150:	f1bb 0f00 	cmp.w	fp, #0
 810e154:	d04f      	beq.n	810e1f6 <__hexnan+0x12e>
 810e156:	454c      	cmp	r4, r9
 810e158:	d206      	bcs.n	810e168 <__hexnan+0xa0>
 810e15a:	2d07      	cmp	r5, #7
 810e15c:	dc04      	bgt.n	810e168 <__hexnan+0xa0>
 810e15e:	462a      	mov	r2, r5
 810e160:	4649      	mov	r1, r9
 810e162:	4620      	mov	r0, r4
 810e164:	f7ff ff8a 	bl	810e07c <L_shift>
 810e168:	4544      	cmp	r4, r8
 810e16a:	d934      	bls.n	810e1d6 <__hexnan+0x10e>
 810e16c:	f1a8 0204 	sub.w	r2, r8, #4
 810e170:	4623      	mov	r3, r4
 810e172:	f853 1b04 	ldr.w	r1, [r3], #4
 810e176:	f842 1f04 	str.w	r1, [r2, #4]!
 810e17a:	429f      	cmp	r7, r3
 810e17c:	d2f9      	bcs.n	810e172 <__hexnan+0xaa>
 810e17e:	1b3b      	subs	r3, r7, r4
 810e180:	f023 0303 	bic.w	r3, r3, #3
 810e184:	3304      	adds	r3, #4
 810e186:	3e03      	subs	r6, #3
 810e188:	3401      	adds	r4, #1
 810e18a:	42a6      	cmp	r6, r4
 810e18c:	bf38      	it	cc
 810e18e:	2304      	movcc	r3, #4
 810e190:	4443      	add	r3, r8
 810e192:	2200      	movs	r2, #0
 810e194:	f843 2b04 	str.w	r2, [r3], #4
 810e198:	429f      	cmp	r7, r3
 810e19a:	d2fb      	bcs.n	810e194 <__hexnan+0xcc>
 810e19c:	683b      	ldr	r3, [r7, #0]
 810e19e:	b91b      	cbnz	r3, 810e1a8 <__hexnan+0xe0>
 810e1a0:	4547      	cmp	r7, r8
 810e1a2:	d126      	bne.n	810e1f2 <__hexnan+0x12a>
 810e1a4:	2301      	movs	r3, #1
 810e1a6:	603b      	str	r3, [r7, #0]
 810e1a8:	2005      	movs	r0, #5
 810e1aa:	e025      	b.n	810e1f8 <__hexnan+0x130>
 810e1ac:	3501      	adds	r5, #1
 810e1ae:	2d08      	cmp	r5, #8
 810e1b0:	f10b 0b01 	add.w	fp, fp, #1
 810e1b4:	dd06      	ble.n	810e1c4 <__hexnan+0xfc>
 810e1b6:	4544      	cmp	r4, r8
 810e1b8:	d9c3      	bls.n	810e142 <__hexnan+0x7a>
 810e1ba:	2300      	movs	r3, #0
 810e1bc:	f844 3c04 	str.w	r3, [r4, #-4]
 810e1c0:	2501      	movs	r5, #1
 810e1c2:	3c04      	subs	r4, #4
 810e1c4:	6822      	ldr	r2, [r4, #0]
 810e1c6:	f000 000f 	and.w	r0, r0, #15
 810e1ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810e1ce:	6020      	str	r0, [r4, #0]
 810e1d0:	e7b7      	b.n	810e142 <__hexnan+0x7a>
 810e1d2:	2508      	movs	r5, #8
 810e1d4:	e7b5      	b.n	810e142 <__hexnan+0x7a>
 810e1d6:	9b01      	ldr	r3, [sp, #4]
 810e1d8:	2b00      	cmp	r3, #0
 810e1da:	d0df      	beq.n	810e19c <__hexnan+0xd4>
 810e1dc:	f1c3 0320 	rsb	r3, r3, #32
 810e1e0:	f04f 32ff 	mov.w	r2, #4294967295
 810e1e4:	40da      	lsrs	r2, r3
 810e1e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810e1ea:	4013      	ands	r3, r2
 810e1ec:	f846 3c04 	str.w	r3, [r6, #-4]
 810e1f0:	e7d4      	b.n	810e19c <__hexnan+0xd4>
 810e1f2:	3f04      	subs	r7, #4
 810e1f4:	e7d2      	b.n	810e19c <__hexnan+0xd4>
 810e1f6:	2004      	movs	r0, #4
 810e1f8:	b007      	add	sp, #28
 810e1fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810e1fe <__ascii_mbtowc>:
 810e1fe:	b082      	sub	sp, #8
 810e200:	b901      	cbnz	r1, 810e204 <__ascii_mbtowc+0x6>
 810e202:	a901      	add	r1, sp, #4
 810e204:	b142      	cbz	r2, 810e218 <__ascii_mbtowc+0x1a>
 810e206:	b14b      	cbz	r3, 810e21c <__ascii_mbtowc+0x1e>
 810e208:	7813      	ldrb	r3, [r2, #0]
 810e20a:	600b      	str	r3, [r1, #0]
 810e20c:	7812      	ldrb	r2, [r2, #0]
 810e20e:	1e10      	subs	r0, r2, #0
 810e210:	bf18      	it	ne
 810e212:	2001      	movne	r0, #1
 810e214:	b002      	add	sp, #8
 810e216:	4770      	bx	lr
 810e218:	4610      	mov	r0, r2
 810e21a:	e7fb      	b.n	810e214 <__ascii_mbtowc+0x16>
 810e21c:	f06f 0001 	mvn.w	r0, #1
 810e220:	e7f8      	b.n	810e214 <__ascii_mbtowc+0x16>

0810e222 <_realloc_r>:
 810e222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810e226:	4680      	mov	r8, r0
 810e228:	4614      	mov	r4, r2
 810e22a:	460e      	mov	r6, r1
 810e22c:	b921      	cbnz	r1, 810e238 <_realloc_r+0x16>
 810e22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810e232:	4611      	mov	r1, r2
 810e234:	f7fd bc56 	b.w	810bae4 <_malloc_r>
 810e238:	b92a      	cbnz	r2, 810e246 <_realloc_r+0x24>
 810e23a:	f7fd fbdf 	bl	810b9fc <_free_r>
 810e23e:	4625      	mov	r5, r4
 810e240:	4628      	mov	r0, r5
 810e242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810e246:	f000 f8c6 	bl	810e3d6 <_malloc_usable_size_r>
 810e24a:	4284      	cmp	r4, r0
 810e24c:	4607      	mov	r7, r0
 810e24e:	d802      	bhi.n	810e256 <_realloc_r+0x34>
 810e250:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810e254:	d812      	bhi.n	810e27c <_realloc_r+0x5a>
 810e256:	4621      	mov	r1, r4
 810e258:	4640      	mov	r0, r8
 810e25a:	f7fd fc43 	bl	810bae4 <_malloc_r>
 810e25e:	4605      	mov	r5, r0
 810e260:	2800      	cmp	r0, #0
 810e262:	d0ed      	beq.n	810e240 <_realloc_r+0x1e>
 810e264:	42bc      	cmp	r4, r7
 810e266:	4622      	mov	r2, r4
 810e268:	4631      	mov	r1, r6
 810e26a:	bf28      	it	cs
 810e26c:	463a      	movcs	r2, r7
 810e26e:	f7ff fc25 	bl	810dabc <memcpy>
 810e272:	4631      	mov	r1, r6
 810e274:	4640      	mov	r0, r8
 810e276:	f7fd fbc1 	bl	810b9fc <_free_r>
 810e27a:	e7e1      	b.n	810e240 <_realloc_r+0x1e>
 810e27c:	4635      	mov	r5, r6
 810e27e:	e7df      	b.n	810e240 <_realloc_r+0x1e>

0810e280 <__ascii_wctomb>:
 810e280:	b149      	cbz	r1, 810e296 <__ascii_wctomb+0x16>
 810e282:	2aff      	cmp	r2, #255	; 0xff
 810e284:	bf85      	ittet	hi
 810e286:	238a      	movhi	r3, #138	; 0x8a
 810e288:	6003      	strhi	r3, [r0, #0]
 810e28a:	700a      	strbls	r2, [r1, #0]
 810e28c:	f04f 30ff 	movhi.w	r0, #4294967295
 810e290:	bf98      	it	ls
 810e292:	2001      	movls	r0, #1
 810e294:	4770      	bx	lr
 810e296:	4608      	mov	r0, r1
 810e298:	4770      	bx	lr
	...

0810e29c <fiprintf>:
 810e29c:	b40e      	push	{r1, r2, r3}
 810e29e:	b503      	push	{r0, r1, lr}
 810e2a0:	4601      	mov	r1, r0
 810e2a2:	ab03      	add	r3, sp, #12
 810e2a4:	4805      	ldr	r0, [pc, #20]	; (810e2bc <fiprintf+0x20>)
 810e2a6:	f853 2b04 	ldr.w	r2, [r3], #4
 810e2aa:	6800      	ldr	r0, [r0, #0]
 810e2ac:	9301      	str	r3, [sp, #4]
 810e2ae:	f7ff f96b 	bl	810d588 <_vfiprintf_r>
 810e2b2:	b002      	add	sp, #8
 810e2b4:	f85d eb04 	ldr.w	lr, [sp], #4
 810e2b8:	b003      	add	sp, #12
 810e2ba:	4770      	bx	lr
 810e2bc:	100000c8 	.word	0x100000c8

0810e2c0 <__swhatbuf_r>:
 810e2c0:	b570      	push	{r4, r5, r6, lr}
 810e2c2:	460c      	mov	r4, r1
 810e2c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810e2c8:	2900      	cmp	r1, #0
 810e2ca:	b096      	sub	sp, #88	; 0x58
 810e2cc:	4615      	mov	r5, r2
 810e2ce:	461e      	mov	r6, r3
 810e2d0:	da0d      	bge.n	810e2ee <__swhatbuf_r+0x2e>
 810e2d2:	89a3      	ldrh	r3, [r4, #12]
 810e2d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 810e2d8:	f04f 0100 	mov.w	r1, #0
 810e2dc:	bf0c      	ite	eq
 810e2de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810e2e2:	2340      	movne	r3, #64	; 0x40
 810e2e4:	2000      	movs	r0, #0
 810e2e6:	6031      	str	r1, [r6, #0]
 810e2e8:	602b      	str	r3, [r5, #0]
 810e2ea:	b016      	add	sp, #88	; 0x58
 810e2ec:	bd70      	pop	{r4, r5, r6, pc}
 810e2ee:	466a      	mov	r2, sp
 810e2f0:	f000 f848 	bl	810e384 <_fstat_r>
 810e2f4:	2800      	cmp	r0, #0
 810e2f6:	dbec      	blt.n	810e2d2 <__swhatbuf_r+0x12>
 810e2f8:	9901      	ldr	r1, [sp, #4]
 810e2fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810e2fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810e302:	4259      	negs	r1, r3
 810e304:	4159      	adcs	r1, r3
 810e306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810e30a:	e7eb      	b.n	810e2e4 <__swhatbuf_r+0x24>

0810e30c <__smakebuf_r>:
 810e30c:	898b      	ldrh	r3, [r1, #12]
 810e30e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810e310:	079d      	lsls	r5, r3, #30
 810e312:	4606      	mov	r6, r0
 810e314:	460c      	mov	r4, r1
 810e316:	d507      	bpl.n	810e328 <__smakebuf_r+0x1c>
 810e318:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810e31c:	6023      	str	r3, [r4, #0]
 810e31e:	6123      	str	r3, [r4, #16]
 810e320:	2301      	movs	r3, #1
 810e322:	6163      	str	r3, [r4, #20]
 810e324:	b002      	add	sp, #8
 810e326:	bd70      	pop	{r4, r5, r6, pc}
 810e328:	ab01      	add	r3, sp, #4
 810e32a:	466a      	mov	r2, sp
 810e32c:	f7ff ffc8 	bl	810e2c0 <__swhatbuf_r>
 810e330:	9900      	ldr	r1, [sp, #0]
 810e332:	4605      	mov	r5, r0
 810e334:	4630      	mov	r0, r6
 810e336:	f7fd fbd5 	bl	810bae4 <_malloc_r>
 810e33a:	b948      	cbnz	r0, 810e350 <__smakebuf_r+0x44>
 810e33c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810e340:	059a      	lsls	r2, r3, #22
 810e342:	d4ef      	bmi.n	810e324 <__smakebuf_r+0x18>
 810e344:	f023 0303 	bic.w	r3, r3, #3
 810e348:	f043 0302 	orr.w	r3, r3, #2
 810e34c:	81a3      	strh	r3, [r4, #12]
 810e34e:	e7e3      	b.n	810e318 <__smakebuf_r+0xc>
 810e350:	89a3      	ldrh	r3, [r4, #12]
 810e352:	6020      	str	r0, [r4, #0]
 810e354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810e358:	81a3      	strh	r3, [r4, #12]
 810e35a:	9b00      	ldr	r3, [sp, #0]
 810e35c:	6163      	str	r3, [r4, #20]
 810e35e:	9b01      	ldr	r3, [sp, #4]
 810e360:	6120      	str	r0, [r4, #16]
 810e362:	b15b      	cbz	r3, 810e37c <__smakebuf_r+0x70>
 810e364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810e368:	4630      	mov	r0, r6
 810e36a:	f000 f81d 	bl	810e3a8 <_isatty_r>
 810e36e:	b128      	cbz	r0, 810e37c <__smakebuf_r+0x70>
 810e370:	89a3      	ldrh	r3, [r4, #12]
 810e372:	f023 0303 	bic.w	r3, r3, #3
 810e376:	f043 0301 	orr.w	r3, r3, #1
 810e37a:	81a3      	strh	r3, [r4, #12]
 810e37c:	89a3      	ldrh	r3, [r4, #12]
 810e37e:	431d      	orrs	r5, r3
 810e380:	81a5      	strh	r5, [r4, #12]
 810e382:	e7cf      	b.n	810e324 <__smakebuf_r+0x18>

0810e384 <_fstat_r>:
 810e384:	b538      	push	{r3, r4, r5, lr}
 810e386:	4d07      	ldr	r5, [pc, #28]	; (810e3a4 <_fstat_r+0x20>)
 810e388:	2300      	movs	r3, #0
 810e38a:	4604      	mov	r4, r0
 810e38c:	4608      	mov	r0, r1
 810e38e:	4611      	mov	r1, r2
 810e390:	602b      	str	r3, [r5, #0]
 810e392:	f7f4 ffc2 	bl	810331a <_fstat>
 810e396:	1c43      	adds	r3, r0, #1
 810e398:	d102      	bne.n	810e3a0 <_fstat_r+0x1c>
 810e39a:	682b      	ldr	r3, [r5, #0]
 810e39c:	b103      	cbz	r3, 810e3a0 <_fstat_r+0x1c>
 810e39e:	6023      	str	r3, [r4, #0]
 810e3a0:	bd38      	pop	{r3, r4, r5, pc}
 810e3a2:	bf00      	nop
 810e3a4:	100006a4 	.word	0x100006a4

0810e3a8 <_isatty_r>:
 810e3a8:	b538      	push	{r3, r4, r5, lr}
 810e3aa:	4d06      	ldr	r5, [pc, #24]	; (810e3c4 <_isatty_r+0x1c>)
 810e3ac:	2300      	movs	r3, #0
 810e3ae:	4604      	mov	r4, r0
 810e3b0:	4608      	mov	r0, r1
 810e3b2:	602b      	str	r3, [r5, #0]
 810e3b4:	f7f4 ffc1 	bl	810333a <_isatty>
 810e3b8:	1c43      	adds	r3, r0, #1
 810e3ba:	d102      	bne.n	810e3c2 <_isatty_r+0x1a>
 810e3bc:	682b      	ldr	r3, [r5, #0]
 810e3be:	b103      	cbz	r3, 810e3c2 <_isatty_r+0x1a>
 810e3c0:	6023      	str	r3, [r4, #0]
 810e3c2:	bd38      	pop	{r3, r4, r5, pc}
 810e3c4:	100006a4 	.word	0x100006a4

0810e3c8 <abort>:
 810e3c8:	b508      	push	{r3, lr}
 810e3ca:	2006      	movs	r0, #6
 810e3cc:	f000 f834 	bl	810e438 <raise>
 810e3d0:	2001      	movs	r0, #1
 810e3d2:	f7f4 ff51 	bl	8103278 <_exit>

0810e3d6 <_malloc_usable_size_r>:
 810e3d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810e3da:	1f18      	subs	r0, r3, #4
 810e3dc:	2b00      	cmp	r3, #0
 810e3de:	bfbc      	itt	lt
 810e3e0:	580b      	ldrlt	r3, [r1, r0]
 810e3e2:	18c0      	addlt	r0, r0, r3
 810e3e4:	4770      	bx	lr

0810e3e6 <_raise_r>:
 810e3e6:	291f      	cmp	r1, #31
 810e3e8:	b538      	push	{r3, r4, r5, lr}
 810e3ea:	4604      	mov	r4, r0
 810e3ec:	460d      	mov	r5, r1
 810e3ee:	d904      	bls.n	810e3fa <_raise_r+0x14>
 810e3f0:	2316      	movs	r3, #22
 810e3f2:	6003      	str	r3, [r0, #0]
 810e3f4:	f04f 30ff 	mov.w	r0, #4294967295
 810e3f8:	bd38      	pop	{r3, r4, r5, pc}
 810e3fa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 810e3fc:	b112      	cbz	r2, 810e404 <_raise_r+0x1e>
 810e3fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810e402:	b94b      	cbnz	r3, 810e418 <_raise_r+0x32>
 810e404:	4620      	mov	r0, r4
 810e406:	f000 f831 	bl	810e46c <_getpid_r>
 810e40a:	462a      	mov	r2, r5
 810e40c:	4601      	mov	r1, r0
 810e40e:	4620      	mov	r0, r4
 810e410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810e414:	f000 b818 	b.w	810e448 <_kill_r>
 810e418:	2b01      	cmp	r3, #1
 810e41a:	d00a      	beq.n	810e432 <_raise_r+0x4c>
 810e41c:	1c59      	adds	r1, r3, #1
 810e41e:	d103      	bne.n	810e428 <_raise_r+0x42>
 810e420:	2316      	movs	r3, #22
 810e422:	6003      	str	r3, [r0, #0]
 810e424:	2001      	movs	r0, #1
 810e426:	e7e7      	b.n	810e3f8 <_raise_r+0x12>
 810e428:	2400      	movs	r4, #0
 810e42a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810e42e:	4628      	mov	r0, r5
 810e430:	4798      	blx	r3
 810e432:	2000      	movs	r0, #0
 810e434:	e7e0      	b.n	810e3f8 <_raise_r+0x12>
	...

0810e438 <raise>:
 810e438:	4b02      	ldr	r3, [pc, #8]	; (810e444 <raise+0xc>)
 810e43a:	4601      	mov	r1, r0
 810e43c:	6818      	ldr	r0, [r3, #0]
 810e43e:	f7ff bfd2 	b.w	810e3e6 <_raise_r>
 810e442:	bf00      	nop
 810e444:	100000c8 	.word	0x100000c8

0810e448 <_kill_r>:
 810e448:	b538      	push	{r3, r4, r5, lr}
 810e44a:	4d07      	ldr	r5, [pc, #28]	; (810e468 <_kill_r+0x20>)
 810e44c:	2300      	movs	r3, #0
 810e44e:	4604      	mov	r4, r0
 810e450:	4608      	mov	r0, r1
 810e452:	4611      	mov	r1, r2
 810e454:	602b      	str	r3, [r5, #0]
 810e456:	f7f4 feff 	bl	8103258 <_kill>
 810e45a:	1c43      	adds	r3, r0, #1
 810e45c:	d102      	bne.n	810e464 <_kill_r+0x1c>
 810e45e:	682b      	ldr	r3, [r5, #0]
 810e460:	b103      	cbz	r3, 810e464 <_kill_r+0x1c>
 810e462:	6023      	str	r3, [r4, #0]
 810e464:	bd38      	pop	{r3, r4, r5, pc}
 810e466:	bf00      	nop
 810e468:	100006a4 	.word	0x100006a4

0810e46c <_getpid_r>:
 810e46c:	f7f4 beec 	b.w	8103248 <_getpid>

0810e470 <sqrt>:
 810e470:	b538      	push	{r3, r4, r5, lr}
 810e472:	ed2d 8b02 	vpush	{d8}
 810e476:	ec55 4b10 	vmov	r4, r5, d0
 810e47a:	f000 f825 	bl	810e4c8 <__ieee754_sqrt>
 810e47e:	4622      	mov	r2, r4
 810e480:	462b      	mov	r3, r5
 810e482:	4620      	mov	r0, r4
 810e484:	4629      	mov	r1, r5
 810e486:	eeb0 8a40 	vmov.f32	s16, s0
 810e48a:	eef0 8a60 	vmov.f32	s17, s1
 810e48e:	f7f2 fbd5 	bl	8100c3c <__aeabi_dcmpun>
 810e492:	b990      	cbnz	r0, 810e4ba <sqrt+0x4a>
 810e494:	2200      	movs	r2, #0
 810e496:	2300      	movs	r3, #0
 810e498:	4620      	mov	r0, r4
 810e49a:	4629      	mov	r1, r5
 810e49c:	f7f2 fba6 	bl	8100bec <__aeabi_dcmplt>
 810e4a0:	b158      	cbz	r0, 810e4ba <sqrt+0x4a>
 810e4a2:	f7fc fbfb 	bl	810ac9c <__errno>
 810e4a6:	2321      	movs	r3, #33	; 0x21
 810e4a8:	6003      	str	r3, [r0, #0]
 810e4aa:	2200      	movs	r2, #0
 810e4ac:	2300      	movs	r3, #0
 810e4ae:	4610      	mov	r0, r2
 810e4b0:	4619      	mov	r1, r3
 810e4b2:	f7f2 fa53 	bl	810095c <__aeabi_ddiv>
 810e4b6:	ec41 0b18 	vmov	d8, r0, r1
 810e4ba:	eeb0 0a48 	vmov.f32	s0, s16
 810e4be:	eef0 0a68 	vmov.f32	s1, s17
 810e4c2:	ecbd 8b02 	vpop	{d8}
 810e4c6:	bd38      	pop	{r3, r4, r5, pc}

0810e4c8 <__ieee754_sqrt>:
 810e4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810e4cc:	ec55 4b10 	vmov	r4, r5, d0
 810e4d0:	4e67      	ldr	r6, [pc, #412]	; (810e670 <__ieee754_sqrt+0x1a8>)
 810e4d2:	43ae      	bics	r6, r5
 810e4d4:	ee10 0a10 	vmov	r0, s0
 810e4d8:	ee10 2a10 	vmov	r2, s0
 810e4dc:	4629      	mov	r1, r5
 810e4de:	462b      	mov	r3, r5
 810e4e0:	d10d      	bne.n	810e4fe <__ieee754_sqrt+0x36>
 810e4e2:	f7f2 f911 	bl	8100708 <__aeabi_dmul>
 810e4e6:	4602      	mov	r2, r0
 810e4e8:	460b      	mov	r3, r1
 810e4ea:	4620      	mov	r0, r4
 810e4ec:	4629      	mov	r1, r5
 810e4ee:	f7f1 ff55 	bl	810039c <__adddf3>
 810e4f2:	4604      	mov	r4, r0
 810e4f4:	460d      	mov	r5, r1
 810e4f6:	ec45 4b10 	vmov	d0, r4, r5
 810e4fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810e4fe:	2d00      	cmp	r5, #0
 810e500:	dc0b      	bgt.n	810e51a <__ieee754_sqrt+0x52>
 810e502:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 810e506:	4326      	orrs	r6, r4
 810e508:	d0f5      	beq.n	810e4f6 <__ieee754_sqrt+0x2e>
 810e50a:	b135      	cbz	r5, 810e51a <__ieee754_sqrt+0x52>
 810e50c:	f7f1 ff44 	bl	8100398 <__aeabi_dsub>
 810e510:	4602      	mov	r2, r0
 810e512:	460b      	mov	r3, r1
 810e514:	f7f2 fa22 	bl	810095c <__aeabi_ddiv>
 810e518:	e7eb      	b.n	810e4f2 <__ieee754_sqrt+0x2a>
 810e51a:	1509      	asrs	r1, r1, #20
 810e51c:	f000 808d 	beq.w	810e63a <__ieee754_sqrt+0x172>
 810e520:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810e524:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 810e528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 810e52c:	07c9      	lsls	r1, r1, #31
 810e52e:	bf5c      	itt	pl
 810e530:	005b      	lslpl	r3, r3, #1
 810e532:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 810e536:	ea4f 0343 	mov.w	r3, r3, lsl #1
 810e53a:	bf58      	it	pl
 810e53c:	0052      	lslpl	r2, r2, #1
 810e53e:	2500      	movs	r5, #0
 810e540:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e544:	1076      	asrs	r6, r6, #1
 810e546:	0052      	lsls	r2, r2, #1
 810e548:	f04f 0e16 	mov.w	lr, #22
 810e54c:	46ac      	mov	ip, r5
 810e54e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810e552:	eb0c 0001 	add.w	r0, ip, r1
 810e556:	4298      	cmp	r0, r3
 810e558:	bfde      	ittt	le
 810e55a:	1a1b      	suble	r3, r3, r0
 810e55c:	eb00 0c01 	addle.w	ip, r0, r1
 810e560:	186d      	addle	r5, r5, r1
 810e562:	005b      	lsls	r3, r3, #1
 810e564:	f1be 0e01 	subs.w	lr, lr, #1
 810e568:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e56c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810e570:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e574:	d1ed      	bne.n	810e552 <__ieee754_sqrt+0x8a>
 810e576:	4674      	mov	r4, lr
 810e578:	2720      	movs	r7, #32
 810e57a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 810e57e:	4563      	cmp	r3, ip
 810e580:	eb01 000e 	add.w	r0, r1, lr
 810e584:	dc02      	bgt.n	810e58c <__ieee754_sqrt+0xc4>
 810e586:	d113      	bne.n	810e5b0 <__ieee754_sqrt+0xe8>
 810e588:	4290      	cmp	r0, r2
 810e58a:	d811      	bhi.n	810e5b0 <__ieee754_sqrt+0xe8>
 810e58c:	2800      	cmp	r0, #0
 810e58e:	eb00 0e01 	add.w	lr, r0, r1
 810e592:	da57      	bge.n	810e644 <__ieee754_sqrt+0x17c>
 810e594:	f1be 0f00 	cmp.w	lr, #0
 810e598:	db54      	blt.n	810e644 <__ieee754_sqrt+0x17c>
 810e59a:	f10c 0801 	add.w	r8, ip, #1
 810e59e:	eba3 030c 	sub.w	r3, r3, ip
 810e5a2:	4290      	cmp	r0, r2
 810e5a4:	bf88      	it	hi
 810e5a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 810e5aa:	1a12      	subs	r2, r2, r0
 810e5ac:	440c      	add	r4, r1
 810e5ae:	46c4      	mov	ip, r8
 810e5b0:	005b      	lsls	r3, r3, #1
 810e5b2:	3f01      	subs	r7, #1
 810e5b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 810e5b8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 810e5bc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 810e5c0:	d1dd      	bne.n	810e57e <__ieee754_sqrt+0xb6>
 810e5c2:	4313      	orrs	r3, r2
 810e5c4:	d01b      	beq.n	810e5fe <__ieee754_sqrt+0x136>
 810e5c6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 810e674 <__ieee754_sqrt+0x1ac>
 810e5ca:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 810e678 <__ieee754_sqrt+0x1b0>
 810e5ce:	e9da 0100 	ldrd	r0, r1, [sl]
 810e5d2:	e9db 2300 	ldrd	r2, r3, [fp]
 810e5d6:	f7f1 fedf 	bl	8100398 <__aeabi_dsub>
 810e5da:	e9da 8900 	ldrd	r8, r9, [sl]
 810e5de:	4602      	mov	r2, r0
 810e5e0:	460b      	mov	r3, r1
 810e5e2:	4640      	mov	r0, r8
 810e5e4:	4649      	mov	r1, r9
 810e5e6:	f7f2 fb0b 	bl	8100c00 <__aeabi_dcmple>
 810e5ea:	b140      	cbz	r0, 810e5fe <__ieee754_sqrt+0x136>
 810e5ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 810e5f0:	e9da 0100 	ldrd	r0, r1, [sl]
 810e5f4:	e9db 2300 	ldrd	r2, r3, [fp]
 810e5f8:	d126      	bne.n	810e648 <__ieee754_sqrt+0x180>
 810e5fa:	3501      	adds	r5, #1
 810e5fc:	463c      	mov	r4, r7
 810e5fe:	106a      	asrs	r2, r5, #1
 810e600:	0863      	lsrs	r3, r4, #1
 810e602:	07e9      	lsls	r1, r5, #31
 810e604:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 810e608:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 810e60c:	bf48      	it	mi
 810e60e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 810e612:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 810e616:	461c      	mov	r4, r3
 810e618:	e76d      	b.n	810e4f6 <__ieee754_sqrt+0x2e>
 810e61a:	0ad3      	lsrs	r3, r2, #11
 810e61c:	3815      	subs	r0, #21
 810e61e:	0552      	lsls	r2, r2, #21
 810e620:	2b00      	cmp	r3, #0
 810e622:	d0fa      	beq.n	810e61a <__ieee754_sqrt+0x152>
 810e624:	02dc      	lsls	r4, r3, #11
 810e626:	d50a      	bpl.n	810e63e <__ieee754_sqrt+0x176>
 810e628:	f1c1 0420 	rsb	r4, r1, #32
 810e62c:	fa22 f404 	lsr.w	r4, r2, r4
 810e630:	1e4d      	subs	r5, r1, #1
 810e632:	408a      	lsls	r2, r1
 810e634:	4323      	orrs	r3, r4
 810e636:	1b41      	subs	r1, r0, r5
 810e638:	e772      	b.n	810e520 <__ieee754_sqrt+0x58>
 810e63a:	4608      	mov	r0, r1
 810e63c:	e7f0      	b.n	810e620 <__ieee754_sqrt+0x158>
 810e63e:	005b      	lsls	r3, r3, #1
 810e640:	3101      	adds	r1, #1
 810e642:	e7ef      	b.n	810e624 <__ieee754_sqrt+0x15c>
 810e644:	46e0      	mov	r8, ip
 810e646:	e7aa      	b.n	810e59e <__ieee754_sqrt+0xd6>
 810e648:	f7f1 fea8 	bl	810039c <__adddf3>
 810e64c:	e9da 8900 	ldrd	r8, r9, [sl]
 810e650:	4602      	mov	r2, r0
 810e652:	460b      	mov	r3, r1
 810e654:	4640      	mov	r0, r8
 810e656:	4649      	mov	r1, r9
 810e658:	f7f2 fac8 	bl	8100bec <__aeabi_dcmplt>
 810e65c:	b120      	cbz	r0, 810e668 <__ieee754_sqrt+0x1a0>
 810e65e:	1ca0      	adds	r0, r4, #2
 810e660:	bf08      	it	eq
 810e662:	3501      	addeq	r5, #1
 810e664:	3402      	adds	r4, #2
 810e666:	e7ca      	b.n	810e5fe <__ieee754_sqrt+0x136>
 810e668:	3401      	adds	r4, #1
 810e66a:	f024 0401 	bic.w	r4, r4, #1
 810e66e:	e7c6      	b.n	810e5fe <__ieee754_sqrt+0x136>
 810e670:	7ff00000 	.word	0x7ff00000
 810e674:	10000238 	.word	0x10000238
 810e678:	10000240 	.word	0x10000240

0810e67c <_init>:
 810e67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e67e:	bf00      	nop
 810e680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e682:	bc08      	pop	{r3}
 810e684:	469e      	mov	lr, r3
 810e686:	4770      	bx	lr

0810e688 <_fini>:
 810e688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810e68a:	bf00      	nop
 810e68c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810e68e:	bc08      	pop	{r3}
 810e690:	469e      	mov	lr, r3
 810e692:	4770      	bx	lr
